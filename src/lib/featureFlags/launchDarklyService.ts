import { initialize, LDClient, LDContext } from 'launchdarkly-js-client-sdk';\n\nclass LaunchDarklyService {\n  private client: LDClient | null = null;\n  private isInitialized = false;\n\n  async initializeClient(context: LDContext): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    try {\n      const clientSideId = process.env.REACT_APP_LAUNCHDARKLY_CLIENT_ID;\n      if (!clientSideId) {\n        console.error('LaunchDarkly client ID not found in environment variables');\n        return;\n      }\n\n      this.client = initialize(clientSideId, context);\n      await this.client.waitForInitialization();\n      this.isInitialized = true;\n      console.log('LaunchDarkly client initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize LaunchDarkly client:', error);\n      this.isInitialized = false;\n    }\n  }\n\n  isPersonalizationEnabled(defaultValue: boolean = false): boolean {\n    if (!this.client || !this.isInitialized) {\n      console.warn('LaunchDarkly client not initialized, returning default value');\n      return defaultValue;\n    }\n\n    return this.client.variation('personalization_greeting', defaultValue);\n  }\n\n  shouldShowOptOutBanner(defaultValue: boolean = false): boolean {\n    if (!this.client || !this.isInitialized) {\n      return defaultValue;\n    }\n\n    return this.client.variation('show_opt_out_banner', defaultValue);\n  }\n\n  getVariation(flagKey: string, defaultValue: any): any {\n    if (!this.client || !this.isInitialized) {\n      return defaultValue;\n    }\n\n    return this.client.variation(flagKey, defaultValue);\n  }\n\n  async updateContext(context: LDContext): Promise<void> {\n    if (!this.client || !this.isInitialized) {\n      console.warn('LaunchDarkly client not initialized, cannot update context');\n      return;\n    }\n\n    try {\n      await this.client.identify(context);\n    } catch (error) {\n      console.error('Failed to update LaunchDarkly context:', error);\n    }\n  }\n\n  onFlagChange(flagKey: string, callback: (value: any) => void): void {\n    if (!this.client || !this.isInitialized) {\n      console.warn('LaunchDarkly client not initialized, cannot listen for flag changes');\n      return;\n    }\n\n    this.client.on(`change:${flagKey}`, callback);\n  }\n\n  close(): void {\n    if (this.client) {\n      this.client.close();\n      this.client = null;\n      this.isInitialized = false;\n    }\n  }\n}\n\nexport default new LaunchDarklyService();
