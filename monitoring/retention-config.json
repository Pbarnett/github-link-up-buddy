{
  "prometheus": {
    "global": {
      "retention": "30d",
      "retentionSize": "10GB"
    },
    "retention_policies": {
      "critical": {
        "retention": "90d",
        "metrics": [
          "parker_flight_requests_total",
          "parker_flight_request_duration_seconds",
          "parker_flight_service_dependency_health",
          "up"
        ]
      },
      "important": {
        "retention": "30d",
        "metrics": [
          "parker_flight_service_dependency_requests_total",
          "parker_flight_service_dependency_duration_seconds",
          "parker_flight_nodejs_process_cpu_seconds_total",
          "parker_flight_nodejs_process_resident_memory_bytes"
        ]
      },
      "debug": {
        "retention": "7d",
        "metrics": [
          "parker_flight_nodejs_nodejs_eventloop_lag_seconds",
          "parker_flight_nodejs_nodejs_gc_duration_seconds",
          "parker_flight_nodejs_nodejs_heap_size_total_bytes"
        ]
      }
    }
  },
  "recommendations": {
    "storage": [
      "Use SSD storage for recent data (last 7 days) for fast queries",
      "Use cheaper HDD storage for historical data (older than 7 days)",
      "Enable compression to reduce storage by 50-80%",
      "Consider remote storage solutions for data older than 90 days"
    ],
    "query_optimization": [
      "Use recording rules for commonly queried aggregations",
      "Limit query time ranges to necessary periods",
      "Use efficient PromQL queries with proper filtering",
      "Cache dashboard queries where possible"
    ],
    "monitoring": [
      "Monitor prometheus_tsdb_* metrics for storage usage",
      "Set up alerts for storage capacity issues",
      "Regularly review and clean up unused metrics",
      "Track query performance and optimize slow queries"
    ]
  }
}