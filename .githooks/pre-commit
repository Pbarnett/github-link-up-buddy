#!/bin/sh
# Block commits directly to main and enforce branch naming policy.
# Enable with: git config core.hooksPath .githooks
branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$branch" = "main" ]; then
  echo "Abort: commit to main is blocked. Create a feature branch." 1>&2
  echo "Use: git switch -c feat/<topic> origin/main" 1>&2
  exit 1
fi
# Enforce branch naming convention for consistency
case "$branch" in
  feat/*|fix/*|chore/*|refactor/*|docs/*|test/*)
    ;;
  *)
    echo "Abort: branch '$branch' doesn’t follow naming policy (feat|fix|chore|refactor|docs|test)/<topic>." 1>&2
    echo "Use: git switch -c feat/<topic> origin/main" 1>&2
    exit 1
    ;;
 esac

# Scan staged TS/TSX files for stray control characters that break builds (e.g., \x03)
CONTROL_PATTERN='[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'
files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$')
if [ -n "$files" ]; then
  found=0
  for f in $files; do
    if [ -f "$f" ]; then
      # Check the staged blob content using Python for portability
      if git show ":$f" | python3 - <<'PY'
import sys, re
pat = re.compile(rb'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]')
flag = 0
for i, line in enumerate(sys.stdin.buffer, 1):
    if pat.search(line):
        sys.stdout.write(f"{i}: {line.decode('utf-8', 'replace')}")
        flag = 1
sys.exit(flag)
PY
      then
        : # no matches
      else
        found=1
        echo "❌ Control characters detected in $f (staged):" 1>&2
        git show ":$f" | python3 - <<'PY'
import sys, re
pat = re.compile(rb'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]')
for i, line in enumerate(sys.stdin.buffer, 1):
    if pat.search(line):
        sys.stdout.write(f"{i}: {line.decode('utf-8', 'replace')}")
PY
      fi
    fi
  done
  if [ "$found" -ne 0 ]; then
    echo "Abort: control characters found in staged files. Please remove them and retry commit." 1>&2
    exit 1
  fi
fi

