{
  "name": "parker-flight",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "tsc": "tsc",
    "dev": "concurrently \"vite --port 3000 --strictPort\" \"tsx server/index.ts\"",
    "dev:safe": "npm run check-localhost && npm run dev",
    "check-localhost": "node scripts/diagnostics/localhost-binding-check.js",
    "fix-localhost-binding": "node scripts/diagnostics/fix-localhost-binding.js",
    "smoke-test": "tsx scripts/smoke-test.ts",
    "dev:test": "npm run dev & sleep 8 && npm run smoke-test && kill %1",
    "monitor:ping": "tsx scripts/monitor-ping.ts",
    "monitor:up": "docker-compose -f docker-compose.monitoring.yml up -d",
    "monitor:down": "docker-compose -f docker-compose.monitoring.yml down",
    "monitor:logs": "docker-compose -f docker-compose.monitoring.yml logs -f",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:unit": "vitest run --project unit",
    "test:unit:watch": "vitest --project unit",
    "test:integration": "vitest run --project integration",
    "test:integration:watch": "vitest --project integration",
    "test:edge": "vitest run --project edge",
    "test:functions": "vitest run supabase/functions/tests --reporter=dot",
    "test:edge:personalization": "vitest run tests/edge/getPersonalizationData.test.ts",
    "test:function:local": "./scripts/test-local-function.sh",
    "test:function:staging": "./scripts/test-staging-function.sh",
    "test:load:personalization": "k6 run tests/load/personalization_k6.js",
    "deploy:function": "./scripts/deploy-function.sh",
    "backup:staging": "./scripts/backup-staging.sh",
    "test:e2e": "playwright test",
    "test:e2e-ui": "playwright test --ui",
    "test:e2e-debug": "playwright test --debug",
    "test:e2e-headed": "playwright test --headed",
    "test:e2e-trace": "playwright test --trace on",
    "test:visual": "playwright test tests/e2e/visual/",
    "test:e2e:trip-request": "playwright test tests/e2e/trip-request-form.spec.ts",
    "test:visual-update": "playwright test tests/e2e/visual/ --update-snapshots",
    "test:accessibility": "playwright test --grep accessibility",
    "test:a11y": "playwright test tests/e2e/accessibility.a11y.spec.ts",
    "test:e2e-mobile": "playwright test --project='Mobile Chrome' --project='Mobile Safari'",
    "test:e2e-desktop": "playwright test --project=chromium --project=firefox --project=webkit",
    "test:e2e-changed": "playwright test --only-changed",
    "test:integration:external": "playwright test --config=playwright.integration.config.ts",
    "test:integration:external:headed": "playwright test --config=playwright.integration.config.ts --headed",
    "test:integration:external:debug": "playwright test --config=playwright.integration.config.ts --debug",
    "test:integration:setup": "node scripts/setup-integration-tests.js",
    "credentials:setup": "./scripts/setup-credentials.sh",
    "credentials:pro": "tsx scripts/security/credential-manager.ts",
    "credentials:pro:setup": "./scripts/security/setup-credentials-pro.sh",
    "credentials:pro:init": "tsx scripts/security/credential-manager.ts init",
    "credentials:pro:report": "tsx scripts/security/credential-manager.ts report",
    "credentials:pro:audit": "tsx scripts/security/credential-manager.ts audit",
    "security:audit": "tsx scripts/security/security-audit.ts",
    "security:audit:json": "tsx scripts/security/security-audit.ts --json",
    "security:audit:report": "tsx scripts/security/security-audit.ts --json --output security-report.json",
    "test:security": "node scripts/security/security-audit.js",
    "test:performance": "k6 run tests/performance/flight-search-load.js",
    "test:smoke": "playwright test tests/e2e/secure-booking-flow.e2e.spec.ts --grep smoke",
    "test:wallet-ui": "tsx scripts/test-wallet-ui.ts",
    "test:wallet-ui:verbose": "tsx scripts/test-wallet-ui.ts --verbose",
    "qa:wallet-walkthrough": "tsx scripts/qa-wallet-walkthrough.ts",
    "test:wallet-smoke": "playwright test tests/e2e/wallet-smoke.spec.ts",
    "test:wallet-mobile": "playwright test tests/e2e/wallet-smoke.spec.ts --grep @mobile",
    "test:a11y:wallet": "playwright test tests/a11y/wallet-accessibility.spec.ts",
    "test:devices:wallet": "playwright test tests/e2e/wallet-mobile-devices.spec.ts",
    "test:devices:iphone": "playwright test tests/e2e/wallet-mobile-devices.spec.ts --grep 'iPhone'",
    "test:devices:ipad": "playwright test tests/e2e/wallet-mobile-devices.spec.ts --grep 'iPad'",
    "deploy:wallet-canary": "./scripts/wallet-ui-rollout.sh",
    "deploy:wallet-canary:direct": "echo \"UPDATE feature_flags SET rollout_percentage = 5 WHERE name = 'wallet_ui';\" | psql $DATABASE_URL",
    "test:twilio": "tsx scripts/test-twilio-sms.ts",
    "test:twilio:config": "tsx scripts/test-twilio-sms.ts --config-only",
    "test:twilio:verbose": "tsx scripts/test-twilio-sms.ts --verbose",
    "verify:launchdarkly": "tsx scripts/verify-launchdarkly.ts",
    "verify:launchdarkly:api": "tsx scripts/verify-launchdarkly-api.ts",
    "test:launchdarkly:connectivity": "tsx scripts/test-launchdarkly-connectivity.ts",
    "test:launchdarkly:connectivity:verbose": "tsx scripts/test-launchdarkly-connectivity.ts --verbose",
    "test:launchdarkly:connectivity:network-issues": "tsx scripts/test-launchdarkly-connectivity.ts --simulate-network-issues --verbose",
    "test:launchdarkly:resilience": "vitest run src/tests/integration/launchdarkly-network-resilience.test.ts",
    "// ---------- MVP DEPLOYMENT ----------": "",
    "mvp:deploy": "docker-compose up --build -d",
    "mvp:stop": "docker-compose down",
    "mvp:logs": "docker-compose logs -f",
    "mvp:status": "docker-compose ps && ./scripts/health-check.sh quick",
    "mvp:restart": "docker-compose restart parker-flight",
    "// ---------- MONITORING \u0026 SECURITY ----------": "",
    "monitor": "./scripts/monitor-app.sh monitor",
    "monitor:status": "./scripts/monitor-app.sh status",
    "monitor:report": "./scripts/monitor-app.sh report",
    "secrets:init": "./scripts/manage-secrets.sh init",
    "secrets:validate": "./scripts/manage-secrets.sh validate",
    "security:scan": "docker run --rm -v $(pwd):/app -w /app aquasec/trivy fs .",
    "// ---------- AUTH TESTS ----------": "",
    "test:auth": "playwright test tests/auth/oauth.spec.ts",
    "test:auth:ci": "MOCK_GOOGLE_OAUTH=true playwright test tests/auth/oauth.spec.ts",
    "test:auth:edge": "pnpm run edge:e2e tests/auth/oauth.spec.ts",
    "verify:session": "ts-node scripts/verify-oauth-session.ts",
    "env:validate": "tsx scripts/validate-environment.ts",
    "env:quick": "node scripts/quick-validate.js",
    "env:load": "tsx scripts/load-env.ts",
    "// ---------- DEPLOYMENT ----------": "",
    "validate:deployment": "tsx scripts/validate-deployment.ts",
    "validate:deployment:fix": "tsx scripts/validate-deployment.ts --fix",
    "pre-deploy": "npm run validate:deployment:fix && npm run test:smoke",
    "deploy:staging": "npm run pre-deploy && echo 'Deploy to staging environment'",
    "deploy:production": "npm run pre-deploy && echo 'Deploy to production environment'",
    "health:check": "curl -f http://localhost:3000/api/health || exit 1",
    "monitoring:dashboard": "echo 'Open monitoring dashboard'",
    "// ---------- REPOSITORY ORGANIZATION ----------": "",
    "org:check": "node scripts/enforcement/enforce-organization.js",
    "org:check:verbose": "node scripts/enforcement/enforce-organization.js --verbose",
    "org:fix": "node scripts/enforcement/enforce-organization.js --fix",
    "org:enforce": "node scripts/enforcement/enforce-organization.js --fix",
    "// ---------- ENTERPRISE CODE QUALITY ----------": "",
    "enterprise:code-quality": "node scripts/enforcement/code-quality-enforcement.js",
    "enterprise:code-quality:fix": "node scripts/enforcement/code-quality-enforcement.js --fix",
    "enterprise:deployment:verify": "node scripts/enforcement/deployment-verification.js",
    "enterprise:all": "npm run org:check && npm run enterprise:code-quality && npm run quality:check",
    "// ---------- PROFESSIONAL QUALITY GATES ----------": "",
    "quality:check": "node scripts/development/quality-gates.js",
    "quality:check:verbose": "node scripts/development/quality-gates.js --verbose",
    "quality:check:no-fix": "node scripts/development/quality-gates.js --no-fix",
    "quality:audit": "npm audit && npm run security:audit",
    "format": "prettier --write \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "type-check": "tsc --noEmit --skipLibCheck",
    "lighthouse": "lhci collect --config=.lighthouserc.json \u0026\u0026 lhci assert --config=.lighthouserc.json \u0026\u0026 lhci upload --config=.lighthouserc.json",
    "performance:audit": "VITE_DISABLE_BASE_ENFORCE=true npm run build && npm run lighthouse",
    "// ---------- BRANCH PROTECTION \u0026 SECURITY ----------": "",
    "setup:branch-protection": "node scripts/deployment/setup-branch-protection.js",
    "security:secrets-scan": "git secrets --scan",
    "security:full-audit": "npm run security:audit && npm run security:secrets-scan",
    "// ---------- ADVANCED ENTERPRISE QUALITY ----------": "",
    "ai:analyze": "node scripts/development/ai-code-analysis.js",
    "ai:analyze:fix": "node scripts/development/ai-code-analysis.js --fix",
    "ai:analyze:report": "node scripts/development/ai-code-analysis.js --report",
    "ai:review": "node scripts/development/ai-code-review.js",
    "ai:review:main": "node scripts/development/ai-code-review.js --compare-with main",
    "ai:review:enforcement": "node scripts/enforcement/ai-code-review.js",
    "ai:review:test": "OPENAI_API_KEY=$OPENAI_API_KEY node scripts/enforcement/ai-code-review.js",
    "test:advanced": "node scripts/testing/advanced-test-runner.js",
    "test:mutation": "node scripts/testing/advanced-test-runner.js --mutation",
    "test:flaky": "node scripts/testing/advanced-test-runner.js --flaky-detection",
    "test:enterprise": "node scripts/testing/advanced-test-runner.js --mutation --flaky-detection --verbose",
    "type:strict": "tsc --project tsconfig.strict.json --noEmit",
    "quality:enterprise": "npm run ai:analyze \u0026\u0026 npm run test:enterprise \u0026\u0026 npm run quality:check"
  },
  "dependencies": {
    "@aws-sdk/client-cloudformation": "^3.848.0",
    "@aws-sdk/client-sfn": "^3.848.0",
    "@aws-sdk/client-ssm": "^3.848.0",
    "@aws-sdk/client-cloudwatch": "^3.848.0",
    "@aws-sdk/client-dynamodb": "^3.840.0",
    "@aws-sdk/client-iam": "^3.848.0",
    "@aws-sdk/client-kms": "^3.848.0",
    "@aws-sdk/client-s3": "^3.842.0",
    "@aws-sdk/client-secrets-manager": "^3.848.0",
    "@aws-sdk/client-sns": "^3.848.0",
    "@aws-sdk/client-sts": "^3.848.0",
    "@duffel/api": "^4.14.1",
    "@hookform/resolvers": "^3.9.0",
    "@launchdarkly/node-server-sdk": "^9.10.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@radix-ui/themes": "^3.2.1",
    "@sentry/react": "^9.32.0",
    "@storybook/react": "^9.0.16",
    "@stripe/react-stripe-js": "^3.7.0",
    "@stripe/stripe-js": "^7.5.0",
    "@supabase/auth-helpers-react": "^0.5.0",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.45.4",
    "@tanstack/react-query": "^5.82.0",
    "@types/dompurify": "^3.0.5",
    "@types/ua-parser-js": "^0.7.39",
    "@types/uuid": "^10.0.0",
    "aws-sdk": "^2.1692.0",
    "bootstrap": "^5.3.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "dompurify": "^3.2.6",
    "embla-carousel-react": "^8.3.0",
    "express": "^5.1.0",
    "express-prom-bundle": "^8.0.0",
    "immer": "^10.1.1",
    "input-otp": "^1.2.4",
    "launchdarkly-js-client-sdk": "^3.8.1",
    "launchdarkly-react-client-sdk": "^3.8.1",
    "localforage": "^1.10.0",
    "lodash-es": "^4.17.21",
    "lucide-react": "^0.462.0",
    "murmurhash-js": "^1.0.0",
    "next-themes": "^0.3.0",
    "openai": "^5.10.2",
    "pg": "^8.16.3",
    "prom-client": "^15.1.3",
    "react": "^19.1.0",
    "react-bootstrap": "^2.10.10",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "ua-parser-js": "^2.0.4",
    "uuid": "^11.1.0",
    "vaul": "^0.9.3",
    "web-vitals": "^5.0.3",
    "webgl-utils": "^1.0.1",
    "workbox-webpack-plugin": "^7.3.0",
    "zod": "^3.23.8",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@deno/vite-plugin": "^1.0.5",
    "@eslint/js": "^9.9.0",
    "@faker-js/faker": "^9.9.0",
    "@lhci/cli": "^0.15.1",
    "@pact-foundation/pact": "^15.0.1",
    "@playwright/test": "^1.53.2",
    "@tailwindcss/typography": "^0.5.15",
    "@testcontainers/postgresql": "^11.3.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/express": "^5.0.3",
    "@types/k6": "^1.1.0",
    "@types/node": "^22.16.5",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "artillery": "^2.0.23",
    "autoprefixer": "^10.4.21",
    "axe-playwright": "^2.1.0",
    "concurrently": "^9.2.0",
    "dotenv": "^16.6.1",
    "eslint": "^9.9.0",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "eslint-plugin-security": "^3.0.1",
    "glob": "^11.0.3",
    "globals": "^15.9.0",
    "jsdom": "^26.1.0",
    "k6": "^0.0.0",
    "lighthouse": "^12.7.1",
    "lovable-tagger": "^1.1.7",
    "playwright": "^1.53.2",
    "postcss": "^8.4.47",
    "resend": "^4.6.0",
    "stripe": "^18.2.1",
    "tailwindcss": "^3.4.11",
    "terser": "^5.43.1",
    "testcontainers": "^11.3.0",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "tsx": "^4.20.3",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.2.4",
    "whatwg-fetch": "^3.6.20",
    "zx": "^8.1.0"
  },
  "overrides": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6"
  },
  "packageManager": "pnpm@8.15.5",
  "playwright": {
    "reporter": [
      [
        "html",
        {
          "outputFolder": "tests/reports/oauth/html"
        }
      ],
      [
        "json",
        {
          "outputFile": "tests/reports/oauth/report.json"
        }
      ]
    ]
  }
}
