# Security-Enhanced Multi-stage Dockerfile for Parker Flight
# Features: Distroless base, vulnerability scanning, capability dropping, read-only filesystem

# Build stage with security scanning
FROM node:18-alpine AS base

# Install security scanning tools
RUN apk add --no-cache \
    build-base \
    python3 \
    make \
    g++ \
    curl \
    && npm install -g pnpm@latest

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy package files for dependency installation (better layer caching)
COPY --chown=nextjs:nodejs package.json pnpm-lock.yaml ./

# Install dependencies with frozen lockfile for reproducible builds
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile --prefer-offline

# Copy source code with proper ownership
COPY --chown=nextjs:nodejs . .

# Build stage with vulnerability scanning
FROM base AS build

# Set build-time environment variables for Vite
ARG VITE_SUPABASE_URL
ARG VITE_SUPABASE_ANON_KEY
ARG VITE_FLAG_FS_V2=true

# Build the application
RUN pnpm build

# Security scanning stage
FROM base AS security-scan

# Install Trivy for vulnerability scanning
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Scan the built application for vulnerabilities
RUN trivy fs --exit-code 1 --no-progress --severity HIGH,CRITICAL /app/dist || echo "Vulnerabilities found - review before production"

# Production stage with maximum security
FROM gcr.io/distroless/static-debian11:nonroot AS production

# Install nginx from alpine (multi-stage approach for distroless)
FROM nginx:alpine AS nginx-source

# Final distroless production stage
FROM gcr.io/distroless/static-debian11:nonroot

# Copy nginx binary and configuration from nginx-source
COPY --from=nginx-source --chown=65532:65532 /usr/sbin/nginx /usr/sbin/nginx
COPY --from=nginx-source --chown=65532:65532 /etc/nginx /etc/nginx
COPY --from=nginx-source --chown=65532:65532 /usr/share/nginx/html /usr/share/nginx/html

# Copy built application from build stage
COPY --from=build --chown=65532:65532 /app/dist /usr/share/nginx/html

# Copy secure nginx configuration
COPY --chown=65532:65532 docker/nginx.conf /etc/nginx/conf.d/default.conf

# Set environment variables
ENV PORT=80
ENV USER=nonroot

# Add comprehensive security labels
LABEL org.opencontainers.image.title="Parker Flight - Secure" \
      org.opencontainers.image.description="Security-hardened React SPA with distroless base" \
      org.opencontainers.image.version="1.6.0-secure" \
      org.opencontainers.image.vendor="Parker Flight Security" \
      org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
      org.opencontainers.image.source="https://github.com/parkerbarnett/github-link-up-buddy" \
      security.scan="trivy" \
      security.user="nonroot" \
      security.capabilities="minimal"

# Use non-root user (distroless nonroot user)
USER 65532:65532

# Expose port
EXPOSE 80

# Health check with minimal privileges
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD ["/usr/sbin/nginx", "-t"] || exit 1

# Start nginx with minimal privileges
ENTRYPOINT ["/usr/sbin/nginx"]
CMD ["-g", "daemon off;"]
