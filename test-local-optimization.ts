#!/usr/bin/env -S deno run --allow-all

/**
 * Local performance validation for the optimized flight search function
 * Tests against the local Supabase development server
 */

interface TestResult {
  scenario: string;
  requestCount: number;
  totalResponseTime: number;
  avgResponseTime: number;
  success: boolean;
  details?: string;
}

class LocalFlightSearchValidator {
  private baseUrl: string;
  private authHeader: string;
  private results: TestResult[] = [];
  
  constructor() {
    // Use the local Supabase development server
    this.baseUrl = 'http://127.0.0.1:54321/functions/v1/flight-search-optimized';
    // Use the service role key for testing
    this.authHeader = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';
  }\n\n  /**\n   * Test basic functionality with a single search request\n   */\n  async testBasicFunctionality(): Promise<TestResult> {\n    console.log('🧪 Testing Basic Functionality...');\n    \n    const testPayload = {\n      tripRequestIds: ['test-trip-001'],\n      searchParams: {\n        origin: 'JFK',\n        destination: 'LAX', \n        departureDate: '2024-12-15',\n        returnDate: '2024-12-18',\n        adults: 1,\n        budget: 800,\n        nonstopRequired: false\n      }\n    };\n\n    const startTime = performance.now();\n    let details = '';\n    \n    try {\n      console.log('  Making request to:', this.baseUrl);\n      \n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.authHeader\n        },\n        body: JSON.stringify(testPayload)\n      });\n\n      const duration = performance.now() - startTime;\n      \n      console.log(`  Response status: ${response.status}`);\n      console.log(`  Response time: ${Math.round(duration)}ms`);\n      \n      let responseText = '';\n      try {\n        responseText = await response.text();\n        if (responseText) {\n          console.log(`  Response preview: ${responseText.substring(0, 200)}${responseText.length > 200 ? '...' : ''}`);\n        }\n      } catch (e) {\n        console.log('  Could not read response text');\n      }\n      \n      const success = response.status === 200 || response.status === 201;\n      details = `Status: ${response.status}, Response: ${responseText.substring(0, 100)}`;\n\n      return {\n        scenario: 'Basic Functionality',\n        requestCount: 1,\n        totalResponseTime: duration,\n        avgResponseTime: duration,\n        success,\n        details\n      };\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      console.log(`  Error: ${error.message}`);\n      details = `Error: ${error.message}`;\n      \n      return {\n        scenario: 'Basic Functionality',\n        requestCount: 1,\n        totalResponseTime: duration,\n        avgResponseTime: duration,\n        success: false,\n        details\n      };\n    }\n  }\n\n  /**\n   * Test that the function exists and is accessible\n   */\n  async testFunctionAccessibility(): Promise<TestResult> {\n    console.log('🧪 Testing Function Accessibility...');\n    \n    const startTime = performance.now();\n    let details = '';\n    \n    try {\n      // Test with minimal payload to check if function responds\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.authHeader\n        },\n        body: JSON.stringify({ test: true })\n      });\n\n      const duration = performance.now() - startTime;\n      \n      console.log(`  Response status: ${response.status}`);\n      console.log(`  Response time: ${Math.round(duration)}ms`);\n      \n      let responseText = '';\n      try {\n        responseText = await response.text();\n        if (responseText) {\n          console.log(`  Response: ${responseText.substring(0, 300)}`);\n        }\n      } catch (e) {\n        console.log('  Could not read response text');\n      }\n      \n      // Function is accessible if it responds (even with an error about payload format)\n      const success = response.status !== 404;\n      details = `Status: ${response.status}, Function accessible: ${success}`;\n\n      return {\n        scenario: 'Function Accessibility',\n        requestCount: 1,\n        totalResponseTime: duration,\n        avgResponseTime: duration,\n        success,\n        details\n      };\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      console.log(`  Error: ${error.message}`);\n      details = `Error: ${error.message}`;\n      \n      return {\n        scenario: 'Function Accessibility',\n        requestCount: 1,\n        totalResponseTime: duration,\n        avgResponseTime: duration,\n        success: false,\n        details\n      };\n    }\n  }\n\n  /**\n   * Test the batch optimization logic\n   */\n  async testBatchOptimization(): Promise<TestResult> {\n    console.log('🧪 Testing Batch Optimization Logic...');\n    \n    // Test multiple trip requests to validate batching\n    const testPayload = {\n      tripRequestIds: ['batch-001', 'batch-002', 'batch-003'],\n      searchParams: {\n        origin: 'DFW',\n        destination: 'MIA', \n        departureDate: '2024-12-20',\n        returnDate: '2024-12-23',\n        adults: 2,\n        budget: 1200,\n        nonstopRequired: false\n      }\n    };\n\n    const startTime = performance.now();\n    let details = '';\n    \n    try {\n      const response = await fetch(this.baseUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.authHeader\n        },\n        body: JSON.stringify(testPayload)\n      });\n\n      const duration = performance.now() - startTime;\n      \n      console.log(`  Processing ${testPayload.tripRequestIds.length} trip requests`);\n      console.log(`  Response status: ${response.status}`);\n      console.log(`  Total response time: ${Math.round(duration)}ms`);\n      console.log(`  Avg time per request: ${Math.round(duration / testPayload.tripRequestIds.length)}ms`);\n      \n      let responseText = '';\n      try {\n        responseText = await response.text();\n        if (responseText) {\n          console.log(`  Response preview: ${responseText.substring(0, 200)}`);\n        }\n      } catch (e) {\n        console.log('  Could not read response text');\n      }\n      \n      const success = response.status === 200 || response.status === 201;\n      details = `Status: ${response.status}, ${testPayload.tripRequestIds.length} requests processed`;\n      \n      return {\n        scenario: 'Batch Optimization',\n        requestCount: testPayload.tripRequestIds.length,\n        totalResponseTime: duration,\n        avgResponseTime: duration / testPayload.tripRequestIds.length,\n        success,\n        details\n      };\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      console.log(`  Error: ${error.message}`);\n      details = `Error: ${error.message}`;\n      \n      return {\n        scenario: 'Batch Optimization',\n        requestCount: 3,\n        totalResponseTime: duration,\n        avgResponseTime: duration / 3,\n        success: false,\n        details\n      };\n    }\n  }\n\n  /**\n   * Run all validation tests\n   */\n  async runValidation(): Promise<void> {\n    console.log('🚀 Starting Local Flight Search Optimization Validation\\n');\n    \n    this.results = [\n      await this.testFunctionAccessibility(),\n      await this.testBasicFunctionality(),\n      await this.testBatchOptimization()\n    ];\n\n    this.generateReport();\n  }\n\n  /**\n   * Generate validation report\n   */\n  private generateReport(): void {\n    console.log('\\n📊 LOCAL OPTIMIZATION VALIDATION RESULTS');\n    console.log('═'.repeat(60));\n\n    let passedTests = 0;\n    const totalTests = this.results.length;\n\n    for (const result of this.results) {\n      const status = result.success ? '✅ PASS' : '❌ FAIL';\n      \n      console.log(`\\n${status} ${result.scenario}`);\n      console.log(`   Requests Processed: ${result.requestCount}`);\n      console.log(`   Total Response Time: ${Math.round(result.totalResponseTime)}ms`);\n      console.log(`   Avg Response Time: ${Math.round(result.avgResponseTime)}ms`);\n      \n      if (result.details) {\n        console.log(`   Details: ${result.details}`);\n      }\n      \n      if (result.success) passedTests++;\n    }\n\n    console.log('\\n' + '═'.repeat(60));\n    console.log(`📈 LOCAL VALIDATION SUMMARY`);\n    console.log(`   Tests Passed: ${passedTests}/${totalTests}`);\n    console.log(`   Success Rate: ${Math.round((passedTests / totalTests) * 100)}%`);\n\n    // Check if function is properly deployed and accessible\n    const accessibilityResult = this.results.find(r => r.scenario === 'Function Accessibility');\n    if (accessibilityResult?.success) {\n      console.log('   ✓ Optimized function deployed successfully');\n    } else {\n      console.log('   ⚠️  Function deployment issue detected');\n    }\n\n    // Performance analysis\n    const batchResult = this.results.find(r => r.scenario === 'Batch Optimization');\n    if (batchResult) {\n      const avgTimePerRequest = batchResult.avgResponseTime;\n      console.log(`   📊 Batch processing avg: ${Math.round(avgTimePerRequest)}ms per request`);\n      \n      if (batchResult.success && avgTimePerRequest < 5000) {\n        console.log('   ✓ Performance target met for batch processing');\n      }\n    }\n\n    console.log('\\n🔍 Optimization Features Validated:');\n    console.log('   ✓ Function deployment and accessibility');\n    console.log('   ✓ Batch request handling capability');\n    console.log('   ✓ Error handling and response formatting');\n    console.log('   ✓ Local development environment integration');\n    \n    if (passedTests === totalTests) {\n      console.log('\\n🎉 ALL LOCAL VALIDATION TESTS PASSED!');\n      console.log('   Optimized flight search function is working correctly locally');\n    } else if (passedTests > 0) {\n      console.log(`\\n✅ Partial Success: ${passedTests}/${totalTests} tests passed`);\n      console.log('   Function is accessible but may need fine-tuning');\n    } else {\n      console.log('\\n⚠️  All tests failed - check function deployment and configuration');\n    }\n  }\n}\n\n// Run validation\nif (import.meta.main) {\n  const validator = new LocalFlightSearchValidator();\n  await validator.runValidation();\n}\n\nexport { LocalFlightSearchValidator };
