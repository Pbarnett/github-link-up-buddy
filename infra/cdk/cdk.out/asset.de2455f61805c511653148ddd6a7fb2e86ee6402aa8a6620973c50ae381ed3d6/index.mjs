import{DynamoDBClient as N,GetItemCommand as A,DeleteItemCommand as E}from"@aws-sdk/client-dynamodb";import{SFNClient as x,SendTaskSuccessCommand as D,SendTaskFailureCommand as O}from"@aws-sdk/client-sfn";import{SSMClient as L,GetParameterCommand as M}from"@aws-sdk/client-ssm";import{createHmac as R}from"crypto";import{DynamoDBClient as I,PutItemCommand as p,UpdateItemCommand as b,QueryCommand as _}from"@aws-sdk/client-dynamodb";var c=class{ddb;paymentsTable;sagaTable;constructor(e,s,a){this.ddb=new I({region:e}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||s||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||a||"saga-transactions"}async recordPaymentAttempt(e,s,a,d=24*60*60){let t=Math.floor(Date.now()/1e3)+d;await this.ddb.send(new p({TableName:this.paymentsTable,Item:{idempotencyKey:{S:e},correlationId:{S:s},amount:{N:a.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:t.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(e,s){await this.ddb.send(new b({TableName:this.paymentsTable,Key:{idempotencyKey:{S:e}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:s},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(e,s,a,d=24*60*60){let t=Math.floor(Date.now()/1e3)+d;await this.ddb.send(new p({TableName:this.paymentsTable,Item:{idempotencyKey:{S:e},correlationId:{S:s},amount:{N:a.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:t.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(e,s){await this.ddb.send(new b({TableName:this.paymentsTable,Key:{idempotencyKey:{S:e}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:s},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(e,s,a,d,t,o=7){let l=Math.floor(Date.now()/1e3)+o*24*60*60;await this.ddb.send(new p({TableName:this.sagaTable,Item:{transactionId:{S:e},stepId:{S:s},correlationId:{S:a},action:{S:d},status:{S:t},timestamp:{S:new Date().toISOString()},ttl:{N:l.toString()}}}))}async recordSagaStepOnce(e,s,a,d,t,o=7){let l=Math.floor(Date.now()/1e3)+o*24*60*60;await this.ddb.send(new p({TableName:this.sagaTable,Item:{transactionId:{S:e},stepId:{S:s},correlationId:{S:a},action:{S:d},status:{S:t},timestamp:{S:new Date().toISOString()},ttl:{N:l.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(e){return(await this.ddb.send(new _({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:e}}}))).Items||[]}};function y(r){if(r==null)return r;if(typeof r=="string")return r.replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi,"[REDACTED]");if(Array.isArray(r))return r.map(y);if(typeof r=="object"){let e=r,s={};for(let a of Object.keys(e))/password|secret|token|ssn|dob|email/i.test(a)?s[a]="[REDACTED]":s[a]=y(e[a]);return s}return r}function g(r,e,s){let a={level:r,msg:e,timestamp:new Date().toISOString(),pii:!1,...s},d=a.pii?{...a,msg:"[REDACTED]",pii:!1}:{...a},t=y(d),o=JSON.stringify(t);switch(r){case"debug":console.debug(o);break;case"info":console.info(o);break;case"warn":console.warn(o);break;case"error":console.error(o);break}}var i={debug:(r,e)=>g("debug",r,e),info:(r,e)=>g("info",r,e),warn:(r,e)=>g("warn",r,e),error:(r,e)=>g("error",r,e)};var f=new N({}),w=new x({}),K=new L({}),k=process.env.CALLBACK_TABLE||"pending-callbacks",h=process.env.WEBHOOK_SECRET_PARAM||"";async function Z(r){let e=!!r&&(typeof r.headers=="object"||typeof r.body=="string"),s="",a="";if(e&&r.headers){let n=r.headers;s=n["X-Signature"]||n["x-signature"]||"",a=n["X-Timestamp"]||n["x-timestamp"]||""}let d=e&&r.body||"",t=r.correlationId,o=r.status;if(e&&d)try{let n=JSON.parse(d);t=t||n.correlationId,o=o||n.status}catch{}if(i.info("webhook_received",{correlationId:t,step:"webhook",state:"received"}),e){if(!s||!a)return i.warn("missing_signature",{step:"webhook",state:"auth",errorType:"MissingSignature"}),{statusCode:401,body:JSON.stringify({ok:!1,error:"MissingSignature"})};let n=Math.floor(Date.now()/1e3),S=Number(a);if(!Number.isFinite(S)||Math.abs(n-S)>300)return i.warn("stale_timestamp",{step:"webhook",state:"auth",errorType:"StaleTimestamp"}),{statusCode:401,body:JSON.stringify({ok:!1,error:"StaleTimestamp"})};if(!h)return i.error("server_misconfigured",{step:"webhook",state:"auth",errorType:"ConfigError"}),{statusCode:500,body:JSON.stringify({ok:!1,error:"ServerMisconfigured"})};let u="";try{u=(await K.send(new M({Name:h,WithDecryption:!0}))).Parameter?.Value||""}catch{return i.error("ssm_read_failed",{step:"webhook",state:"auth",errorType:"SecretUnavailable"}),{statusCode:500,body:JSON.stringify({ok:!1,error:"SecretUnavailable"})}}if(!u)return i.error("secret_unavailable",{step:"webhook",state:"auth",errorType:"SecretUnavailable"}),{statusCode:500,body:JSON.stringify({ok:!1,error:"SecretUnavailable"})};let T=`${d}.${S}`;if(R("sha256",u).update(T).digest("hex")!==s)return i.warn("invalid_signature",{correlationId:t,step:"webhook",state:"auth",errorType:"InvalidSignature"}),{statusCode:401,body:JSON.stringify({ok:!1,error:"InvalidSignature",correlationId:t||null})}}if(!t||o!=="confirmed"&&o!=="rejected")return e?{statusCode:400,body:JSON.stringify({ok:!1,error:"Invalid payload"})}:{ok:!1};try{await new c().recordSagaStep(t,"webhook_received",t,"provider_webhook","completed")}catch{i.warn("saga_record_failed",{correlationId:t,step:"webhook",state:"record",errorType:"SagaWriteFailed"})}let m=(await f.send(new A({TableName:k,Key:{correlationId:{S:t}}}))).Item?.taskToken?.S;if(!m)return i.warn("no_task_token",{correlationId:t,step:"webhook",state:"lookup",errorType:"MissingTaskToken"}),e?{statusCode:404,body:JSON.stringify({ok:!1})}:{ok:!1};try{if(o==="confirmed"){await w.send(new D({taskToken:m,output:JSON.stringify({status:"confirmed",correlationId:t})}));try{await new c().recordSagaStep(t,"callback_confirmed",t,"send_task_success","completed"),i.info("callback_confirmed",{correlationId:t,step:"webhook",state:"success"})}catch{i.warn("saga_record_failed",{correlationId:t,step:"webhook",state:"record",errorType:"SagaWriteFailed"})}}else{await w.send(new O({taskToken:m,error:"BookingRejected",cause:"Provider rejected booking"}));try{await new c().recordSagaStep(t,"callback_rejected",t,"send_task_failure","failed"),i.info("callback_rejected",{correlationId:t,step:"webhook",state:"failure"})}catch{i.warn("saga_record_failed",{correlationId:t,step:"webhook",state:"record",errorType:"SagaWriteFailed"})}}}finally{await f.send(new E({TableName:k,Key:{correlationId:{S:t}}}))}return e?{statusCode:200,body:JSON.stringify({ok:!0})}:{ok:!0}}export{Z as handler};
