import{DynamoDBClient as E,PutItemCommand as p,UpdateItemCommand as y,QueryCommand as S}from"@aws-sdk/client-dynamodb";var c=class{ddb;paymentsTable;sagaTable;constructor(t,e="payments-idempotency",n="saga-transactions"){this.ddb=new E({region:t}),this.paymentsTable=e,this.sagaTable=n}async recordPaymentAttempt(t,e,n,o=24*60*60){let i=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new p({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:i.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,e){await this.ddb.send(new y({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,e,n,o,i,d=7){let m=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new p({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:o},status:{S:i},timestamp:{S:new Date().toISOString()},ttl:{N:m.toString()}}}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new S({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};import{SSMClient as w,GetParameterCommand as g}from"@aws-sdk/client-ssm";import h from"stripe";var I=process.env.ENABLE_STRIPE==="true",u=process.env.STRIPE_SECRET_PARAM||"",l=process.env.STRIPE_SECRET||"",T=new w({});async function b(){if(l)return l;if(!u)throw new Error("FatalProviderError");try{let t=(await T.send(new g({Name:u,WithDecryption:!0}))).Parameter?.Value;if(!t)throw new Error("MissingStripeSecret");return t}catch{throw new Error("TransientProviderError")}}async function A(s){let{correlationId:t,idempotencyKey:e,amount:n}=s||{},o=s.currency||"usd";if(!t||!e||!Number.isFinite(n))throw new Error("ValidationError");let i=new c;try{await i.recordPaymentAttempt(e,t,n)}catch(r){if(!String(r).includes("ConditionalCheckFailed"))throw new Error("TransientProviderError")}if(!I){let r=`pi_stub_${Math.random().toString(36).slice(2,12)}`;try{await i.markPaymentCompleted(e,r)}catch{throw new Error("TransientProviderError")}return{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:r,amount:n,currency:o,stub:!0}}let d=await b(),m=new h(d,{apiVersion:"2024-06-20"});try{let r=await m.paymentIntents.create({amount:n,currency:o,confirmation_method:"automatic",confirm:!0},{idempotencyKey:e});if(r.status!=="succeeded"&&r.status!=="requires_capture"&&r.status!=="processing")throw new Error("TransientProviderError");try{await i.markPaymentCompleted(e,r.id)}catch{throw new Error("TransientProviderError")}return{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:r.id,amount:n,currency:o,status:r.status}}catch(r){let a=r?.code||r?.type||"";throw a.includes("api_connection")||a.includes("rate_limit")||a.includes("api_error")||a.includes("idempotency")?new Error("TransientProviderError"):a.includes("card_error")||a.includes("invalid_request")?new Error("FatalProviderError"):new Error("TransientProviderError")}}export{A as handler};
