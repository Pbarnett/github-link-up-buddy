import{DynamoDBClient as g,PutItemCommand as S}from"@aws-sdk/client-dynamodb";import{DynamoDBClient as c,PutItemCommand as i,UpdateItemCommand as m,QueryCommand as p}from"@aws-sdk/client-dynamodb";var o=class{ddb;paymentsTable;sagaTable;constructor(t,e="payments-idempotency",n="saga-transactions"){this.ddb=new c({region:t}),this.paymentsTable=e,this.sagaTable=n}async recordPaymentAttempt(t,e,n,a=24*60*60){let s=Math.floor(Date.now()/1e3)+a;await this.ddb.send(new i({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,e){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,e,n,a,s,d=7){let l=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new i({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:a},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:l.toString()}}}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new p({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};var y=new g({}),b=process.env.CALLBACK_TABLE||"pending-callbacks";async function h(r){let{correlationId:t,TaskToken:e}=r;console.log(JSON.stringify({correlationId:t,stage:"callback_initiate",status:"storing_token"}));let n=r.payload&&r.payload.simulate||process.env.CALLBACK_SIMULATE;try{await y.send(new S({TableName:b,Item:{correlationId:{S:t},taskToken:{S:e},createdAt:{S:new Date().toISOString()}}}))}catch(a){throw console.error("Failed to store task token:",a),new Error("TransientProviderError")}try{await new o().recordSagaStep(t,"callback_token_stored",t,"store_task_token","completed")}catch(a){console.warn("Failed to record saga step (callback_token_stored):",a)}if(n==="transient")throw console.warn("Simulating transient provider error after token storage"),new Error("TransientProviderError");return{ok:!0}}export{h as handler};
