import{DynamoDBClient as c,PutItemCommand as m,UpdateItemCommand as l,QueryCommand as p}from"@aws-sdk/client-dynamodb";var s=class{ddb;paymentsTable;sagaTable;constructor(t,e="payments-idempotency",n="saga-transactions"){this.ddb=new c({region:t}),this.paymentsTable=e,this.sagaTable=n}async recordPaymentAttempt(t,e,n,a=24*60*60){let r=Math.floor(Date.now()/1e3)+a;await this.ddb.send(new m({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:r.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,e){await this.ddb.send(new l({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,e,n,a,r,i=7){let d=Math.floor(Date.now()/1e3)+i*24*60*60;await this.ddb.send(new m({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:a},status:{S:r},timestamp:{S:new Date().toISOString()},ttl:{N:d.toString()}}}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new p({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};async function u(o){let{correlationId:t,idempotencyKey:e,amount:n}=o||{};if(!t||!e||!Number.isFinite(n))throw new Error("ValidationError");let a=new s;try{await a.recordPaymentAttempt(e,t,n)}catch(i){if(!String(i).includes("ConditionalCheckFailed"))throw new Error("TransientProviderError")}let r=`pi_${Math.random().toString(36).slice(2,12)}`;try{await a.markPaymentCompleted(e,r)}catch{throw new Error("TransientProviderError")}return{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:r,amount:n}}export{u as handler};
