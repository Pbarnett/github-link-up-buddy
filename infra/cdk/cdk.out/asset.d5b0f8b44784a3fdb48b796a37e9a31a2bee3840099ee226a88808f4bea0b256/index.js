"use strict";var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var S=(r,t)=>{for(var e in t)l(r,e,{get:t[e],enumerable:!0})},b=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of g(t))!m.call(r,s)&&s!==e&&l(r,s,{get:()=>t[s],enumerable:!(n=p(t,s))||n.enumerable});return r};var u=r=>b(l({},"__esModule",{value:!0}),r);var w={};S(w,{handler:()=>y});module.exports=u(w);var o=require("@aws-sdk/client-dynamodb"),i=class{ddb;paymentsTable;sagaTable;constructor(t,e,n){this.ddb=new o.DynamoDBClient({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||e||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||n||"saga-transactions"}async recordPaymentAttempt(t,e,n,s=24*60*60){let a=Math.floor(Date.now()/1e3)+s;await this.ddb.send(new o.PutItemCommand({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:a.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,e){await this.ddb.send(new o.UpdateItemCommand({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,e,n,s=24*60*60){let a=Math.floor(Date.now()/1e3)+s;await this.ddb.send(new o.PutItemCommand({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:a.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,e){await this.ddb.send(new o.UpdateItemCommand({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,e,n,s,a,d=7){let c=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new o.PutItemCommand({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:s},status:{S:a},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}}}))}async recordSagaStepOnce(t,e,n,s,a,d=7){let c=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new o.PutItemCommand({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:s},status:{S:a},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new o.QueryCommand({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};async function y(r){let t=r.correlationId||"unknown-correlation";console.log(JSON.stringify({correlationId:t,stage:"process_booking",status:"started"}));try{await new i().recordSagaStep(t,"process_booking_started",t,"process_booking","completed")}catch(a){console.warn("Failed to record saga step (process_booking_started):",a)}let e=r.bookingData&&r.bookingData.simulate||process.env.PROCESS_SIMULATE;if(e==="transient")throw console.warn("Simulating transient provider error"),new Error("TransientProviderError");if(e==="fatal")throw console.error("Simulating fatal provider error"),new Error("FatalProviderError");let n=`bk_${Math.random().toString(36).slice(2,10)}`,s={statusCode:200,bookingId:n,status:"SUCCEEDED",correlationId:t};console.log(JSON.stringify({correlationId:t,stage:"process_booking",status:"success",bookingId:n}));try{await new i().recordSagaStep(t,"process_booking_succeeded",t,"process_booking","completed")}catch(a){console.warn("Failed to record saga step (process_booking_succeeded):",a)}return s}0&&(module.exports={handler});
