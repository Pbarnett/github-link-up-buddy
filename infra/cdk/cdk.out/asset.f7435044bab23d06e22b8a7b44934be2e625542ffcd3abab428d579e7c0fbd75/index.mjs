import{DynamoDBClient as E,PutItemCommand as m,UpdateItemCommand as g,QueryCommand as _}from"@aws-sdk/client-dynamodb";var y=class{ddb;paymentsTable;sagaTable;constructor(t,e,n){this.ddb=new E({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||e||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||n||"saga-transactions"}async recordPaymentAttempt(t,e,n,o=24*60*60){let a=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new m({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:a.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,e){await this.ddb.send(new g({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,e,n,o=24*60*60){let a=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new m({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:n.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:a.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,e){await this.ddb.send(new g({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,e,n,o,a,d=7){let p=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new m({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:o},status:{S:a},timestamp:{S:new Date().toISOString()},ttl:{N:p.toString()}}}))}async recordSagaStepOnce(t,e,n,o,a,d=7){let p=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new m({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:n},action:{S:o},status:{S:a},timestamp:{S:new Date().toISOString()},ttl:{N:p.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new _({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};import{SSMClient as T,GetParameterCommand as b}from"@aws-sdk/client-ssm";function u(r){if(r==null)return r;if(typeof r=="string")return r.replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi,"[REDACTED]");if(Array.isArray(r))return r.map(u);if(typeof r=="object"){let t=r,e={};for(let n of Object.keys(t))/password|secret|token|ssn|dob|email/i.test(n)?e[n]="[REDACTED]":e[n]=u(t[n]);return e}return r}function l(r,t,e){let n={level:r,msg:t,timestamp:new Date().toISOString(),pii:!1,...e},o=n.pii?{...n,msg:"[REDACTED]",pii:!1}:{...n},a=u(o),d=JSON.stringify(a);switch(r){case"debug":console.debug(d);break;case"info":console.info(d);break;case"warn":console.warn(d);break;case"error":console.error(d);break}}var i={debug:(r,t)=>l("debug",r,t),info:(r,t)=>l("info",r,t),warn:(r,t)=>l("warn",r,t),error:(r,t)=>l("error",r,t)};import f from"stripe";var I=process.env.ENABLE_STRIPE==="true",S=process.env.STRIPE_SECRET_PARAM||"",w=process.env.STRIPE_SECRET||"",h=new T({});async function C(){if(w)return w;if(!S)throw new Error("FatalProviderError");try{let t=(await h.send(new b({Name:S,WithDecryption:!0}))).Parameter?.Value;if(!t)throw new Error("MissingStripeSecret");return t}catch{throw new Error("TransientProviderError")}}async function R(r){let{correlationId:t,idempotencyKey:e,amount:n}=r||{},o=r.currency||"usd";if(!t||!e||!Number.isFinite(n))throw i.error("stripe_payment_validation_error",{correlationId:t,step:"payment",state:"error",errorType:"ValidationError"}),new Error("ValidationError");let a=new y;i.info("stripe_payment_attempt",{correlationId:t,step:"payment",state:"attempt",idempotencyKey:e,amount:n,currency:o});try{await a.recordPaymentAttempt(e,t,n)}catch(s){if(!String(s).includes("ConditionalCheckFailed"))throw i.warn("stripe_payment_attempt_record_failed",{correlationId:t,step:"payment",state:"record",errorType:"TransientProviderError"}),new Error("TransientProviderError")}if(!I){let s=`pi_stub_${Math.random().toString(36).slice(2,12)}`;try{await a.markPaymentCompleted(e,s)}catch{throw i.warn("stripe_payment_mark_complete_failed",{correlationId:t,step:"payment",state:"record",errorType:"TransientProviderError"}),new Error("TransientProviderError")}return i.info("stripe_payment_success_stub",{correlationId:t,step:"payment",state:"success",idempotencyKey:e}),{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:s,amount:n,currency:o,stub:!0}}let d=await C(),p=new f(d,{apiVersion:"2024-06-20"});try{let s=await p.paymentIntents.create({amount:n,currency:o,confirmation_method:"automatic",confirm:!0},{idempotencyKey:e});if(s.status!=="succeeded"&&s.status!=="requires_capture"&&s.status!=="processing")throw i.warn("stripe_unexpected_status",{correlationId:t,step:"payment",state:"unexpected_status",errorType:"TransientProviderError",status:s.status}),new Error("TransientProviderError");try{await a.markPaymentCompleted(e,s.id)}catch{throw i.warn("stripe_payment_mark_complete_failed",{correlationId:t,step:"payment",state:"record",errorType:"TransientProviderError"}),new Error("TransientProviderError")}return i.info("stripe_payment_success",{correlationId:t,step:"payment",state:"success",idempotencyKey:e}),{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:s.id,amount:n,currency:o,status:s.status}}catch(s){let c=s?.code||s?.type||"";throw c.includes("api_connection")||c.includes("rate_limit")||c.includes("api_error")||c.includes("idempotency")?(i.warn("stripe_transient_error",{correlationId:t,step:"payment",state:"error",errorType:"TransientProviderError",errorCode:c}),new Error("TransientProviderError")):c.includes("card_error")||c.includes("invalid_request")?(i.error("stripe_fatal_error",{correlationId:t,step:"payment",state:"error",errorType:"FatalProviderError",errorCode:c}),new Error("FatalProviderError")):(i.warn("stripe_unknown_error",{correlationId:t,step:"payment",state:"error",errorType:"TransientProviderError"}),new Error("TransientProviderError"))}}export{R as handler};
