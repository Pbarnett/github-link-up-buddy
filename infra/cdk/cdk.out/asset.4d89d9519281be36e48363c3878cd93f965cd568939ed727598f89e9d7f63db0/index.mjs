import{DynamoDBClient as S,PutItemCommand as i,UpdateItemCommand as m,QueryCommand as b}from"@aws-sdk/client-dynamodb";var c=class{ddb;paymentsTable;sagaTable;constructor(t,n,r){this.ddb=new S({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||n||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||r||"saga-transactions"}async recordPaymentAttempt(t,n,r,o=24*60*60){let s=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new i({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:n},amount:{N:r.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,n){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:n},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,n,r,o=24*60*60){let s=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new i({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:n},amount:{N:r.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,n){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:n},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,n,r,o,s,a=7){let l=Math.floor(Date.now()/1e3)+a*24*60*60;await this.ddb.send(new i({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:n},correlationId:{S:r},action:{S:o},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:l.toString()}}}))}async recordSagaStepOnce(t,n,r,o,s,a=7){let l=Math.floor(Date.now()/1e3)+a*24*60*60;await this.ddb.send(new i({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:n},correlationId:{S:r},action:{S:o},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:l.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new b({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};function p(e){if(e==null)return e;if(typeof e=="string")return e.replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi,"[REDACTED]");if(Array.isArray(e))return e.map(p);if(typeof e=="object"){let t=e,n={};for(let r of Object.keys(t))/password|secret|token|ssn|dob|email/i.test(r)?n[r]="[REDACTED]":n[r]=p(t[r]);return n}return e}function d(e,t,n){let r={level:e,msg:t,timestamp:new Date().toISOString(),pii:!1,...n},o=r.pii?{...r,msg:"[REDACTED]",pii:!1}:{...r},s=p(o),a=JSON.stringify(s);switch(e){case"debug":console.debug(a);break;case"info":console.info(a);break;case"warn":console.warn(a);break;case"error":console.error(a);break}}var g={debug:(e,t)=>d("debug",e,t),info:(e,t)=>d("info",e,t),warn:(e,t)=>d("warn",e,t),error:(e,t)=>d("error",e,t)};async function T(e){let t=e?.correlationId;if(!t)throw g.error("cancel_validation_error",{correlationId:t,step:"cancel_booking",state:"error",errorType:"ValidationError"}),new Error("ValidationError");let n=new c;try{await n.recordSagaStepOnce(t,"cancel_booking",t,"cancel_booking","completed")}catch(r){if(!String(r).includes("ConditionalCheckFailed"))throw g.warn("cancel_record_failed",{correlationId:t,step:"cancel_booking",state:"record",errorType:"TransientProviderError"}),new Error("TransientProviderError")}return g.info("cancel_success",{correlationId:t,step:"cancel_booking",state:"success"}),{ok:!0,correlationId:t,action:"cancel_booking"}}export{T as handler};
