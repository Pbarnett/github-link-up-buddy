"use strict";var l=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var u=(e,t)=>{for(var r in t)l(e,r,{get:t[r],enumerable:!0})},w=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of b(t))!y.call(e,o)&&o!==r&&l(e,o,{get:()=>t[o],enumerable:!(n=S(t,o))||n.enumerable});return e};var f=e=>w(l({},"__esModule",{value:!0}),e);var I={};u(I,{handler:()=>_});module.exports=f(I);var a=require("@aws-sdk/client-dynamodb"),c=class{ddb;paymentsTable;sagaTable;constructor(t,r,n){this.ddb=new a.DynamoDBClient({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||r||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||n||"saga-transactions"}async recordPaymentAttempt(t,r,n,o=24*60*60){let s=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new a.PutItemCommand({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:r},amount:{N:n.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,r){await this.ddb.send(new a.UpdateItemCommand({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:r},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,r,n,o=24*60*60){let s=Math.floor(Date.now()/1e3)+o;await this.ddb.send(new a.PutItemCommand({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:r},amount:{N:n.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,r){await this.ddb.send(new a.UpdateItemCommand({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:r},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,r,n,o,s,i=7){let p=Math.floor(Date.now()/1e3)+i*24*60*60;await this.ddb.send(new a.PutItemCommand({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:r},correlationId:{S:n},action:{S:o},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:p.toString()}}}))}async recordSagaStepOnce(t,r,n,o,s,i=7){let p=Math.floor(Date.now()/1e3)+i*24*60*60;await this.ddb.send(new a.PutItemCommand({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:r},correlationId:{S:n},action:{S:o},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:p.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new a.QueryCommand({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};function m(e){if(e==null)return e;if(typeof e=="string")return e.replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi,"[REDACTED]");if(Array.isArray(e))return e.map(m);if(typeof e=="object"){let t=e,r={};for(let n of Object.keys(t))/password|secret|token|ssn|dob|email/i.test(n)?r[n]="[REDACTED]":r[n]=m(t[n]);return r}return e}function g(e,t,r){let n={level:e,msg:t,timestamp:new Date().toISOString(),pii:!1,...r},o=n.pii?{...n,msg:"[REDACTED]",pii:!1}:{...n},s=m(o),i=JSON.stringify(s);switch(e){case"debug":console.debug(i);break;case"info":console.info(i);break;case"warn":console.warn(i);break;case"error":console.error(i);break}}var d={debug:(e,t)=>g("debug",e,t),info:(e,t)=>g("info",e,t),warn:(e,t)=>g("warn",e,t),error:(e,t)=>g("error",e,t)};async function _(e){let t=e.correlationId||"unknown-correlation";d.info("process_booking_start",{correlationId:t,step:"process_booking",state:"started"});try{await new c().recordSagaStep(t,"process_booking_started",t,"process_booking","completed")}catch{d.warn("saga_record_failed",{correlationId:t,step:"process_booking",state:"record",errorType:"SagaWriteFailed"})}let r=e.bookingData&&e.bookingData.simulate||process.env.PROCESS_SIMULATE;if(r==="transient")throw d.warn("simulate_transient_error",{correlationId:t,step:"process_booking",state:"simulated",errorType:"TransientProviderError"}),new Error("TransientProviderError");if(r==="fatal")throw d.error("simulate_fatal_error",{correlationId:t,step:"process_booking",state:"simulated",errorType:"FatalProviderError"}),new Error("FatalProviderError");let o={statusCode:200,bookingId:`bk_${Math.random().toString(36).slice(2,10)}`,status:"SUCCEEDED",correlationId:t};d.info("process_booking_success",{correlationId:t,step:"process_booking",state:"success"});try{await new c().recordSagaStep(t,"process_booking_succeeded",t,"process_booking","completed")}catch{d.warn("saga_record_failed",{correlationId:t,step:"process_booking",state:"record",errorType:"SagaWriteFailed"})}return o}0&&(module.exports={handler});
