import{DynamoDBClient as y,PutItemCommand as m,UpdateItemCommand as S,QueryCommand as E}from"@aws-sdk/client-dynamodb";var p=class{ddb;paymentsTable;sagaTable;constructor(t,e,r){this.ddb=new y({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||e||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||r||"saga-transactions"}async recordPaymentAttempt(t,e,r,s=24*60*60){let i=Math.floor(Date.now()/1e3)+s;await this.ddb.send(new m({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:r.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:i.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,e){await this.ddb.send(new S({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,e,r,s=24*60*60){let i=Math.floor(Date.now()/1e3)+s;await this.ddb.send(new m({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:e},amount:{N:r.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:i.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,e){await this.ddb.send(new S({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:e},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,e,r,s,i,d=7){let c=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new m({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:r},action:{S:s},status:{S:i},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}}}))}async recordSagaStepOnce(t,e,r,s,i,d=7){let c=Math.floor(Date.now()/1e3)+d*24*60*60;await this.ddb.send(new m({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:e},correlationId:{S:r},action:{S:s},status:{S:i},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new E({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};import{SSMClient as g,GetParameterCommand as w}from"@aws-sdk/client-ssm";import I from"stripe";var T=process.env.ENABLE_STRIPE==="true",l=process.env.STRIPE_SECRET_PARAM||"",u=process.env.STRIPE_SECRET||"",b=new g({});async function h(){if(u)return u;if(!l)throw new Error("FatalProviderError");try{let t=(await b.send(new w({Name:l,WithDecryption:!0}))).Parameter?.Value;if(!t)throw new Error("MissingStripeSecret");return t}catch{throw new Error("TransientProviderError")}}async function C(o){let{correlationId:t,idempotencyKey:e,amount:r}=o||{},s=o.currency||"usd";if(!t||!e||!Number.isFinite(r))throw new Error("ValidationError");let i=new p;try{await i.recordPaymentAttempt(e,t,r)}catch(n){if(!String(n).includes("ConditionalCheckFailed"))throw new Error("TransientProviderError")}if(!T){let n=`pi_stub_${Math.random().toString(36).slice(2,12)}`;try{await i.markPaymentCompleted(e,n)}catch{throw new Error("TransientProviderError")}return{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:n,amount:r,currency:s,stub:!0}}let d=await h(),c=new I(d,{apiVersion:"2024-06-20"});try{let n=await c.paymentIntents.create({amount:r,currency:s,confirmation_method:"automatic",confirm:!0},{idempotencyKey:e});if(n.status!=="succeeded"&&n.status!=="requires_capture"&&n.status!=="processing")throw new Error("TransientProviderError");try{await i.markPaymentCompleted(e,n.id)}catch{throw new Error("TransientProviderError")}return{ok:!0,correlationId:t,idempotencyKey:e,paymentIntentId:n.id,amount:r,currency:s,status:n.status}}catch(n){let a=n?.code||n?.type||"";throw a.includes("api_connection")||a.includes("rate_limit")||a.includes("api_error")||a.includes("idempotency")?new Error("TransientProviderError"):a.includes("card_error")||a.includes("invalid_request")?new Error("FatalProviderError"):new Error("TransientProviderError")}}export{C as handler};
