import{DynamoDBClient as f,GetItemCommand as w,DeleteItemCommand as I}from"@aws-sdk/client-dynamodb";import{SFNClient as h,SendTaskSuccessCommand as k,SendTaskFailureCommand as T}from"@aws-sdk/client-sfn";import{DynamoDBClient as b,PutItemCommand as l,UpdateItemCommand as m,QueryCommand as u}from"@aws-sdk/client-dynamodb";var d=class{ddb;paymentsTable;sagaTable;constructor(t,a,e){this.ddb=new b({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||a||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||e||"saga-transactions"}async recordPaymentAttempt(t,a,e,n=24*60*60){let r=Math.floor(Date.now()/1e3)+n;await this.ddb.send(new l({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:a},amount:{N:e.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:r.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,a){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:a},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,a,e,n=24*60*60){let r=Math.floor(Date.now()/1e3)+n;await this.ddb.send(new l({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:a},amount:{N:e.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:r.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,a){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:a},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,a,e,n,r,i=7){let c=Math.floor(Date.now()/1e3)+i*24*60*60;await this.ddb.send(new l({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:a},correlationId:{S:e},action:{S:n},status:{S:r},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}}}))}async recordSagaStepOnce(t,a,e,n,r,i=7){let c=Math.floor(Date.now()/1e3)+i*24*60*60;await this.ddb.send(new l({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:a},correlationId:{S:e},action:{S:n},status:{S:r},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new u({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};var p=new f({}),S=new h({}),g=process.env.CALLBACK_TABLE||"pending-callbacks",y=process.env.WEBHOOK_SECRET||"";async function x(o){let t=!!o&&(typeof o.headers=="object"||typeof o.body=="string"),a="";if(t&&o.headers){let s=o.headers;a=s["X-Webhook-Secret"]||s["x-webhook-secret"]||s["x-webhook-secret".toLowerCase()]||""}let e=o.correlationId,n=o.status;if(t&&o.body)try{let s=JSON.parse(o.body);e=e||s.correlationId,n=n||s.status}catch{}if(t&&(!y||!a||a!==y))return{statusCode:401,body:JSON.stringify({ok:!1,error:"Unauthorized"})};if(!e||n!=="confirmed"&&n!=="rejected")return t?{statusCode:400,body:JSON.stringify({ok:!1,error:"Invalid payload"})}:{ok:!1};try{await new d().recordSagaStep(e,"webhook_received",e,"provider_webhook","completed")}catch(s){console.warn("Failed to record saga step (webhook_received):",s)}let i=(await p.send(new w({TableName:g,Key:{correlationId:{S:e}}}))).Item?.taskToken?.S;if(!i)return console.error("No task token found for correlationId",e),t?{statusCode:404,body:JSON.stringify({ok:!1})}:{ok:!1};try{if(n==="confirmed"){await S.send(new k({taskToken:i,output:JSON.stringify({status:"confirmed",correlationId:e})}));try{await new d().recordSagaStep(e,"callback_confirmed",e,"send_task_success","completed")}catch(s){console.warn("Failed to record saga step (callback_confirmed):",s)}}else{await S.send(new T({taskToken:i,error:"BookingRejected",cause:"Provider rejected booking"}));try{await new d().recordSagaStep(e,"callback_rejected",e,"send_task_failure","failed")}catch(s){console.warn("Failed to record saga step (callback_rejected):",s)}}}finally{await p.send(new I({TableName:g,Key:{correlationId:{S:e}}}))}return t?{statusCode:200,body:JSON.stringify({ok:!0})}:{ok:!0}}export{x as handler};
