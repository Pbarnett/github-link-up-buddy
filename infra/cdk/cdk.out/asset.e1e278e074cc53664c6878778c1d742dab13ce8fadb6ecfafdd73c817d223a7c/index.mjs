import{DynamoDBClient as u,GetItemCommand as w,DeleteItemCommand as k}from"@aws-sdk/client-dynamodb";import{SFNClient as h,SendTaskSuccessCommand as I,SendTaskFailureCommand as C}from"@aws-sdk/client-sfn";import{DynamoDBClient as S,PutItemCommand as l,UpdateItemCommand as b,QueryCommand as f}from"@aws-sdk/client-dynamodb";var n=class{ddb;paymentsTable;sagaTable;constructor(a,s="payments-idempotency",e="saga-transactions"){this.ddb=new S({region:a}),this.paymentsTable=s,this.sagaTable=e}async recordPaymentAttempt(a,s,e,r=24*60*60){let d=Math.floor(Date.now()/1e3)+r;await this.ddb.send(new l({TableName:this.paymentsTable,Item:{idempotencyKey:{S:a},correlationId:{S:s},amount:{N:e.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:d.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(a,s){await this.ddb.send(new b({TableName:this.paymentsTable,Key:{idempotencyKey:{S:a}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:s},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(a,s,e,r,d,i=7){let c=Math.floor(Date.now()/1e3)+i*24*60*60;await this.ddb.send(new l({TableName:this.sagaTable,Item:{transactionId:{S:a},stepId:{S:s},correlationId:{S:e},action:{S:r},status:{S:d},timestamp:{S:new Date().toISOString()},ttl:{N:c.toString()}}}))}async getSagaStepsByCorrelation(a){return(await this.ddb.send(new f({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:a}}}))).Items||[]}};var m=new u({}),p=new h({}),y=process.env.CALLBACK_TABLE||"pending-callbacks",g=process.env.WEBHOOK_SECRET||"";async function O(o){let a=!!o&&(typeof o.headers=="object"||typeof o.body=="string"),s="";if(a&&o.headers){let t=o.headers;s=t["X-Webhook-Secret"]||t["x-webhook-secret"]||t["x-webhook-secret".toLowerCase()]||""}let e=o.correlationId,r=o.status;if(a&&o.body)try{let t=JSON.parse(o.body);e=e||t.correlationId,r=r||t.status}catch{}if(a&&(!g||!s||s!==g))return{statusCode:401,body:JSON.stringify({ok:!1,error:"Unauthorized"})};if(!e||r!=="confirmed"&&r!=="rejected")return a?{statusCode:400,body:JSON.stringify({ok:!1,error:"Invalid payload"})}:{ok:!1};try{await new n().recordSagaStep(e,"webhook_received",e,"provider_webhook","completed")}catch(t){console.warn("Failed to record saga step (webhook_received):",t)}let i=(await m.send(new w({TableName:y,Key:{correlationId:{S:e}}}))).Item?.taskToken?.S;if(!i)return console.error("No task token found for correlationId",e),a?{statusCode:404,body:JSON.stringify({ok:!1})}:{ok:!1};try{if(r==="confirmed"){await p.send(new I({taskToken:i,output:JSON.stringify({status:"confirmed",correlationId:e})}));try{await new n().recordSagaStep(e,"callback_confirmed",e,"send_task_success","completed")}catch(t){console.warn("Failed to record saga step (callback_confirmed):",t)}}else{await p.send(new C({taskToken:i,error:"BookingRejected",cause:"Provider rejected booking"}));try{await new n().recordSagaStep(e,"callback_rejected",e,"send_task_failure","failed")}catch(t){console.warn("Failed to record saga step (callback_rejected):",t)}}}finally{await m.send(new k({TableName:y,Key:{correlationId:{S:e}}}))}return a?{statusCode:200,body:JSON.stringify({ok:!0})}:{ok:!0}}export{O as handler};
