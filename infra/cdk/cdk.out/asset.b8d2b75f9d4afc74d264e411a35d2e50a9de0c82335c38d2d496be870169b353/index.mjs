import{DynamoDBClient as b,PutItemCommand as u}from"@aws-sdk/client-dynamodb";import{DynamoDBClient as S,PutItemCommand as d,UpdateItemCommand as m,QueryCommand as y}from"@aws-sdk/client-dynamodb";var c=class{ddb;paymentsTable;sagaTable;constructor(t,n,r){this.ddb=new S({region:t}),this.paymentsTable=process.env.PAYMENTS_IDEMPOTENCY_TABLE||n||"payments-idempotency",this.sagaTable=process.env.SAGA_TRANSACTIONS_TABLE||r||"saga-transactions"}async recordPaymentAttempt(t,n,r,a=24*60*60){let s=Math.floor(Date.now()/1e3)+a;await this.ddb.send(new d({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:n},amount:{N:r.toString()},status:{S:"pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markPaymentCompleted(t,n){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, paymentIntentId = :pid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"completed"},":pid":{S:n},":ts":{S:new Date().toISOString()}}}))}async recordRefundAttempt(t,n,r,a=24*60*60){let s=Math.floor(Date.now()/1e3)+a;await this.ddb.send(new d({TableName:this.paymentsTable,Item:{idempotencyKey:{S:t},correlationId:{S:n},amount:{N:r.toString()},status:{S:"refund_pending"},createdAt:{S:new Date().toISOString()},ttl:{N:s.toString()}},ConditionExpression:"attribute_not_exists(idempotencyKey)"}))}async markRefundCompleted(t,n){await this.ddb.send(new m({TableName:this.paymentsTable,Key:{idempotencyKey:{S:t}},UpdateExpression:"SET #s = :s, refundId = :rid, completedAt = :ts",ExpressionAttributeNames:{"#s":"status"},ExpressionAttributeValues:{":s":{S:"refund_completed"},":rid":{S:n},":ts":{S:new Date().toISOString()}}}))}async recordSagaStep(t,n,r,a,s,o=7){let p=Math.floor(Date.now()/1e3)+o*24*60*60;await this.ddb.send(new d({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:n},correlationId:{S:r},action:{S:a},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:p.toString()}}}))}async recordSagaStepOnce(t,n,r,a,s,o=7){let p=Math.floor(Date.now()/1e3)+o*24*60*60;await this.ddb.send(new d({TableName:this.sagaTable,Item:{transactionId:{S:t},stepId:{S:n},correlationId:{S:r},action:{S:a},status:{S:s},timestamp:{S:new Date().toISOString()},ttl:{N:p.toString()}},ConditionExpression:"attribute_not_exists(transactionId) AND attribute_not_exists(stepId)"}))}async getSagaStepsByCorrelation(t){return(await this.ddb.send(new y({TableName:this.sagaTable,IndexName:"CorrelationIdIndex",KeyConditionExpression:"correlationId = :c",ExpressionAttributeValues:{":c":{S:t}}}))).Items||[]}};function g(e){if(e==null)return e;if(typeof e=="string")return e.replace(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi,"[REDACTED]");if(Array.isArray(e))return e.map(g);if(typeof e=="object"){let t=e,n={};for(let r of Object.keys(t))/password|secret|token|ssn|dob|email/i.test(r)?n[r]="[REDACTED]":n[r]=g(t[r]);return n}return e}function l(e,t,n){let r={level:e,msg:t,timestamp:new Date().toISOString(),pii:!1,...n},a=r.pii?{...r,msg:"[REDACTED]",pii:!1}:{...r},s=g(a),o=JSON.stringify(s);switch(e){case"debug":console.debug(o);break;case"info":console.info(o);break;case"warn":console.warn(o);break;case"error":console.error(o);break}}var i={debug:(e,t)=>l("debug",e,t),info:(e,t)=>l("info",e,t),warn:(e,t)=>l("warn",e,t),error:(e,t)=>l("error",e,t)};var w=new b({}),T=process.env.CALLBACK_TABLE||"pending-callbacks";async function C(e){let{correlationId:t,TaskToken:n}=e;i.info("callback_initiate_store_token",{correlationId:t,step:"callback_initiate",state:"storing_token"});let r=e.payload&&e.payload.simulate||process.env.CALLBACK_SIMULATE;try{await w.send(new u({TableName:T,Item:{correlationId:{S:t},taskToken:{S:n},createdAt:{S:new Date().toISOString()}}}))}catch{throw i.error("callback_token_store_failed",{correlationId:t,step:"callback_initiate",state:"error",errorType:"DynamoDBWriteFailed"}),new Error("TransientProviderError")}try{await new c().recordSagaStep(t,"callback_token_stored",t,"store_task_token","completed")}catch{i.warn("saga_record_failed",{correlationId:t,step:"callback_initiate",state:"record",errorType:"SagaWriteFailed"})}if(r==="transient")throw i.warn("simulate_transient_error",{correlationId:t,step:"callback_initiate",state:"simulated",errorType:"TransientProviderError"}),new Error("TransientProviderError");return{ok:!0}}export{C as handler};
