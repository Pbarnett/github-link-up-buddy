AWSTemplateFormatVersion: '2010-09-09'
Description: 'Enterprise-grade AWS Security Standards - MFA Enforcement, CloudTrail, and IAM Best Practices'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment
  
  AlertEmail:
    Type: String
    Description: Email address for security alerts
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
  
  OrganizationName:
    Type: String
    Default: Parker-Flight
    Description: Organization name for resource naming
  
  EnablePCIDSS:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable PCI DSS compliance features
  
  DeploymentTimestamp:
    Type: String
    Default: ''
    Description: Timestamp suffix for unique resource naming

Conditions:
  IsPCICompliant: !Equals [!Ref EnablePCIDSS, 'true']
  HasTimestamp: !Not [!Equals [!Ref DeploymentTimestamp, '']]

Resources:
  # CloudTrail S3 Bucket
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 
        - '${OrganizationName}-cloudtrail-${Environment}${Suffix}'
        - Suffix: !If [HasTimestamp, !Sub '-${DeploymentTimestamp}', '']
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref CloudTrailKMSKey
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: CloudTrailLogRetention
            Status: Enabled
            ExpirationInDays: 2555  # 7 years for compliance
            NoncurrentVersionExpirationInDays: 30
      VersioningConfiguration:
        Status: Enabled
      # NotificationConfiguration removed - S3 to CloudWatch integration handled by CloudTrail
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: CloudTrail-Logs
        - Key: Compliance
          Value: SOX-GDPR

  # CloudTrail KMS Key
  CloudTrailKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'CloudTrail encryption key for ${OrganizationName} ${Environment}'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${OrganizationName}-security-trail'
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
      EnableKeyRotation: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: CloudTrail-Encryption

  CloudTrailKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${OrganizationName}-cloudtrail-${Environment}'
      TargetKeyId: !Ref CloudTrailKMSKey

  # CloudTrail S3 Bucket Policy
  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt CloudTrailBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${OrganizationName}-security-trail'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${CloudTrailBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                'AWS:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${OrganizationName}-security-trail'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt CloudTrailBucket.Arn
              - !Sub '${CloudTrailBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # CloudWatch Log Group for CloudTrail
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cloudtrail/${OrganizationName}-${Environment}'
      RetentionInDays: 90
      KmsKeyId: !GetAtt CloudTrailKMSKey.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: CloudTrail-Logs

  # CloudTrail Log Group Role
  CloudTrailLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${OrganizationName}-CloudTrailLogRole-${Environment}${Suffix}'
        - Suffix: !If [HasTimestamp, !Sub '-${DeploymentTimestamp}', '']
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudTrailLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: !GetAtt CloudTrailLogGroup.Arn

  # Main CloudTrail
  SecurityCloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailBucketPolicy
    Properties:
      TrailName: !Sub '${OrganizationName}-security-trail'
      S3BucketName: !Ref CloudTrailBucket
      S3KeyPrefix: 'cloudtrail-logs'
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      KMSKeyId: !GetAtt CloudTrailKMSKey.Arn
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailLogRole.Arn
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: 'AWS::S3::Object'
              Values: ['arn:aws:s3:::*/*']
            - Type: 'AWS::Lambda::Function'
              Values: ['*']
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Compliance
          Value: SOX-GDPR-HIPAA

  # MFA Enforcement Policy
  MFAEnforcementPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 
        - '${OrganizationName}-MFA-Enforcement-${Environment}${Suffix}'
        - Suffix: !If [HasTimestamp, !Sub '-${DeploymentTimestamp}', '']
      Description: 'Enforce MFA for all IAM actions except MFA management'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowViewAccountInfo
            Effect: Allow
            Action:
              - iam:GetAccountPasswordPolicy
              - iam:GetAccountSummary
              - iam:ListVirtualMFADevices
            Resource: '*'
          - Sid: AllowManageOwnPasswords
            Effect: Allow
            Action:
              - iam:ChangePassword
              - iam:GetUser
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
          - Sid: AllowManageOwnMFA
            Effect: Allow
            Action:
              - iam:CreateVirtualMFADevice
              - iam:DeleteVirtualMFADevice
              - iam:ListMFADevices
              - iam:EnableMFADevice
              - iam:ResyncMFADevice
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:mfa/*'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
          - Sid: DenyAllExceptUnlessSignedInWithMFA
            Effect: Deny
            NotAction:
              - iam:CreateVirtualMFADevice
              - iam:EnableMFADevice
              - iam:GetUser
              - iam:ListMFADevices
              - iam:ListVirtualMFADevices
              - iam:ResyncMFADevice
              - sts:GetSessionToken
            Resource: '*'
            Condition:
              BoolIfExists:
                'aws:MultiFactorAuthPresent': 'false'

  # MFA Enforced Users Group
  MFAEnforcedGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub 
        - '${OrganizationName}-MFA-Required-Users-${Environment}${Suffix}'
        - Suffix: !If [HasTimestamp, !Sub '-${DeploymentTimestamp}', '']
      ManagedPolicyArns:
        - !Ref MFAEnforcementPolicy

  # Break Glass Emergency Role
  BreakGlassRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - '${OrganizationName}-BreakGlass-${Environment}${Suffix}'
        - Suffix: !If [HasTimestamp, !Sub '-${DeploymentTimestamp}', '']
      Description: 'Emergency access role - use only in critical situations'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:PrincipalTag/EmergencyAccess': 'true'
              IpAddress:
                'aws:SourceIp': 
                  - '0.0.0.0/0'  # Replace with your office IPs in production
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: Emergency-Access

  # SNS Topic for Security Alerts
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 
        - '${OrganizationName}-Security-Alerts-${Environment}${Suffix}'
        - Suffix: !If [HasTimestamp, !Sub '-${DeploymentTimestamp}', '']
      DisplayName: 'Security Alerts'
      KmsMasterKeyId: !Ref CloudTrailKMSKey

  SecurityAlertsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SecurityAlertsTopic
      Endpoint: !Ref AlertEmail

  # CloudWatch Metric Filter for Root Usage
  RootUsageMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      MetricTransformations:
        - MetricNamespace: SecurityMetrics
          MetricName: RootAccountUsage
          MetricValue: '1'

  # CloudWatch Alarm for Root Usage
  RootUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${OrganizationName}-Root-Account-Usage-${Environment}'
      AlarmDescription: 'Alarm when root account is used'
      MetricName: RootAccountUsage
      Namespace: SecurityMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SecurityAlertsTopic
      TreatMissingData: notBreaching

  # MFA Delete Alarm
  MFADeleteMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{ ($.eventName = DeleteVirtualMFADevice) || ($.eventName = DeactivateMFADevice) || ($.eventName = DetachUserPolicy) || ($.eventName = DetachGroupPolicy) || ($.eventName = DetachRolePolicy) || ($.eventName = PutGroupPolicy) || ($.eventName = PutRolePolicy) || ($.eventName = PutUserPolicy) || ($.eventName = CreatePolicy) || ($.eventName = DeletePolicy) || ($.eventName = CreatePolicyVersion) || ($.eventName = DeletePolicyVersion) || ($.eventName = AttachRolePolicy) || ($.eventName = DetachRolePolicy) }'
      MetricTransformations:
        - MetricNamespace: SecurityMetrics
          MetricName: IAMPolicyChanges
          MetricValue: '1'

  IAMPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${OrganizationName}-IAM-Policy-Changes-${Environment}'
      AlarmDescription: 'Alarm when IAM policies are changed'
      MetricName: IAMPolicyChanges
      Namespace: SecurityMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SecurityAlertsTopic

  # Console Sign-in Failures
  ConsoleSigninFailureMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage EXISTS) }'
      MetricTransformations:
        - MetricNamespace: SecurityMetrics
          MetricName: ConsoleSigninFailureCount
          MetricValue: '1'

  ConsoleSigninFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${OrganizationName}-Console-Signin-Failures-${Environment}'
      AlarmDescription: 'Alarm when there are console sign-in failures'
      MetricName: ConsoleSigninFailureCount
      Namespace: SecurityMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SecurityAlertsTopic

  # GuardDuty (if supported in region)
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true
      FindingPublishingFrequency: FIFTEEN_MINUTES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Security-Monitoring

  # Config Service Role
  ConfigRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: config.amazonaws.com
      Description: 'Service-linked role for AWS Config'

  # Config Delivery Channel
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: !Sub '${OrganizationName}-config-delivery-${Environment}'
      S3BucketName: !Ref CloudTrailBucket
      S3KeyPrefix: 'config-logs'

  # Config Configuration Recorder
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: !Sub '${OrganizationName}-config-recorder-${Environment}'
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig'
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true

  # Security Hub (Enable if supported)
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Properties:
      Tags:
        Environment: !Ref Environment

Outputs:
  CloudTrailArn:
    Description: 'ARN of the CloudTrail'
    Value: !GetAtt SecurityCloudTrail.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrail-Arn'

  CloudTrailBucket:
    Description: 'S3 Bucket for CloudTrail logs'
    Value: !Ref CloudTrailBucket
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrail-Bucket'

  SecurityAlertsTopic:
    Description: 'SNS Topic for security alerts'
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-Security-Alerts-Topic'

  MFAEnforcementPolicy:
    Description: 'ARN of MFA Enforcement Policy'
    Value: !Ref MFAEnforcementPolicy
    Export:
      Name: !Sub '${AWS::StackName}-MFA-Policy-Arn'

  BreakGlassRoleArn:
    Description: 'ARN of Break Glass Emergency Role'
    Value: !GetAtt BreakGlassRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BreakGlass-Role-Arn'

  GuardDutyDetector:
    Description: 'GuardDuty Detector ID'
    Value: !Ref GuardDutyDetector
    Export:
      Name: !Sub '${AWS::StackName}-GuardDuty-Detector'
