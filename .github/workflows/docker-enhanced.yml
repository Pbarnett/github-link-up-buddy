name: Enhanced Docker CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 20

jobs:
  # Build Matrix for Multiple Variants
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +%Y%m%d-%H%M%S)-${{ github.sha:0:7 }}" >> $GITHUB_OUTPUT
          fi

      - name: Set build matrix
        id: set-matrix
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event_name }}" == "release" ]]; then
            # Production builds - all variants
            echo 'matrix={"variant":["main","secure","backend"],"dockerfile":["Dockerfile","Dockerfile.secure","Dockerfile.backend"],"include":[{"variant":"main","dockerfile":"Dockerfile","platforms":"linux/amd64,linux/arm64"},{"variant":"secure","dockerfile":"Dockerfile.secure","platforms":"linux/amd64,linux/arm64"},{"variant":"backend","dockerfile":"Dockerfile.backend","platforms":"linux/amd64"}]}' >> $GITHUB_OUTPUT
          else
            # Development builds - main variant only
            echo 'matrix={"variant":["main"],"dockerfile":["Dockerfile"],"include":[{"variant":"main","dockerfile":"Dockerfile","platforms":"linux/amd64"}]}' >> $GITHUB_OUTPUT
          fi

  # Enhanced Build Job
  build-and-push:
    runs-on: ubuntu-latest
    needs: build-matrix
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
      fail-fast: false
    
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platforms || 'linux/amd64,linux/arm64' }}
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/parker-flight-${{ matrix.variant }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build-matrix.outputs.version }}
          labels: |
            org.opencontainers.image.title=Parker Flight (${{ matrix.variant }})
            org.opencontainers.image.description=Automated Flight Booking Platform - ${{ matrix.variant }} variant
            org.opencontainers.image.vendor=Parker Flight
            org.opencontainers.image.version=${{ needs.build-matrix.outputs.version }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms || 'linux/amd64,linux/arm64' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.variant }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}:buildcache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.variant }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}:buildcache,mode=max
          provenance: true
          sbom: true
          build-args: |
            VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}
            VITE_FLAG_FS_V2=true
            BUILD_VERSION=${{ needs.build-matrix.outputs.version }}
            BUILD_DATE={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            BUILD_REVISION=${{ github.sha }}

      - name: Generate SBOM
        if: matrix.variant == 'main'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}:${{ github.sha }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.variant }}.cyclonedx.json

      - name: Upload SBOM artifact
        if: matrix.variant == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.variant }}-${{ github.sha }}
          path: sbom-${{ matrix.variant }}.cyclonedx.json
          retention-days: 30

      - name: Image digest output
        run: |
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Metadata: ${{ steps.build.outputs.metadata }}"

  # Enhanced Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-and-push]
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
      fail-fast: false
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'
          category: 'trivy-${{ matrix.variant }}'

      - name: Run Docker Scout
        if: matrix.variant == 'main'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.variant }}:${{ github.sha }}
          format: sarif
          output: scout-results.sarif
          only-severities: critical,high

      - name: Upload Docker Scout results
        if: matrix.variant == 'main' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'scout-results.sarif'
          category: 'docker-scout'

  # Performance and Quality Tests
  performance-test:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-and-push]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run container performance test
        run: |
          docker run --rm --name perf-test \
            -e NODE_ENV=production \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-main:${{ github.sha }} &
          
          sleep 30
          
          # Basic performance metrics
          docker stats --no-stream perf-test || true
          
          # Health check test
          curl -f http://localhost/health || true
          
          docker stop perf-test || true

  # Deployment Jobs
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-and-push, security-scan]
    if: |
      (github.ref == 'refs/heads/develop' || 
       github.event.inputs.environment == 'staging') &&
      github.event_name != 'pull_request'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-main:${{ github.sha }}"
          
          # Create deployment script
          cat > deploy-staging.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Stopping existing containers..."
          docker compose -f docker-compose.staging.yml down || true
          
          echo "Pulling latest images..."
          docker compose -f docker-compose.staging.yml pull
          
          echo "Starting updated containers..."
          export PARKER_FLIGHT_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-main:${{ github.sha }}
          docker compose -f docker-compose.staging.yml up -d
          
          echo "Waiting for containers to be healthy..."
          sleep 30
          docker compose -f docker-compose.staging.yml ps
          
          echo "Running health checks..."
          curl -f http://localhost:3001/health || exit 1
          
          echo "Staging deployment completed successfully!"
          EOF
          
          chmod +x deploy-staging.sh
          # ./deploy-staging.sh

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-and-push, security-scan, performance-test]
    if: |
      (github.ref == 'refs/heads/main' || 
       github.event_name == 'release' || 
       github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-main:${{ github.sha }}"
          
          # Create production deployment script
          cat > deploy-production.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Creating backup of current deployment..."
          docker tag $(docker ps --filter "name=parker-flight-app" --format "{{.Image}}") \
            parker-flight:backup-$(date +%Y%m%d-%H%M%S) || true
          
          echo "Rolling update for production..."
          export PARKER_FLIGHT_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-main:${{ github.sha }}
          
          # Blue-green deployment simulation
          docker compose -f docker-compose.production.yml up -d --scale parker-flight=2
          sleep 60
          docker compose -f docker-compose.production.yml up -d --scale parker-flight=1
          
          echo "Verifying production deployment..."
          curl -f http://localhost/health || exit 1
          
          echo "Production deployment completed successfully!"
          EOF
          
          chmod +x deploy-production.sh
          # ./deploy-production.sh

  # Cleanup and Notifications
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Cleanup old images
        run: |
          # Clean up old development images
          docker images --filter "reference=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-*" \
            --filter "before=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-main:${{ github.sha }}" \
            --format "{{.Repository}}:{{.Tag}}" | head -n 10 | \
            xargs -r docker rmi || true

      - name: Notify deployment status
        if: github.ref == 'refs/heads/main' || github.event_name == 'release'
        run: |
          echo "🚀 Deployment Summary:"
          echo "- Version: ${{ needs.build-matrix.outputs.version }}"
          echo "- SHA: ${{ github.sha }}"
          echo "- Images built: $(echo '${{ needs.build-matrix.outputs.matrix }}' | jq -r '.variant | join(", ")')"
          echo "- Status: ${{ job.status }}"
