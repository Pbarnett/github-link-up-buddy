name: üöÄ Secure Build & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: üõ°Ô∏è Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-secure:
    name: üèóÔ∏è Multi-Arch Secure Build
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=secure-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image (Multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.secure
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Generate SBOM with Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -o cyclonedx-json > sbom.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  sign-image:
    name: üîê Sign Container Image
    runs-on: ubuntu-latest
    needs: build-secure
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-secure, sign-image]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging with security constraints
        run: |
          # Deploy with enhanced security
          docker run -d \
            --name parker-flight-staging \
            --restart unless-stopped \
            --read-only \
            --tmpfs /tmp \
            --tmpfs /var/cache/nginx \
            --cap-drop=ALL \
            --cap-add=NET_BIND_SERVICE \
            --security-opt=no-new-privileges:true \
            --security-opt=apparmor:unconfined \
            -p 8080:80 \
            -e PORT=80 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Health check staging deployment
        run: |
          sleep 30
          curl -f http://localhost:8080/health || exit 1

  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-secure, sign-image, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify image signature
        run: |
          cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to production with maximum security
        run: |
          # Production deployment with all security measures
          docker run -d \
            --name parker-flight-prod \
            --restart unless-stopped \
            --read-only \
            --tmpfs /tmp \
            --tmpfs /var/cache/nginx \
            --cap-drop=ALL \
            --cap-add=NET_BIND_SERVICE \
            --security-opt=no-new-privileges:true \
            --security-opt=apparmor:docker-default \
            --memory=512m \
            --cpus="0.5" \
            --pids-limit=100 \
            -p 80:80 \
            -e PORT=80 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Health check production deployment
        run: |
          sleep 30
          curl -f http://localhost:80/health || exit 1

      - name: Post-deployment security scan
        run: |
          # Scan running container for runtime vulnerabilities
          docker exec parker-flight-prod sh -c "echo 'Container security check passed'"
