name: Main CI Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Core testing pipeline for main branches
  build-and-test:
    name: Build & Core Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

      - name: Install Deno for Edge Function tests
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.38.x

      - name: Install stripe-mock
        run: |
          curl -L https://github.com/stripe/stripe-mock/releases/download/v0.162.0/stripe-mock_0.162.0_linux_amd64.tar.gz | tar -xz
          sudo mv stripe-mock /usr/local/bin/
          stripe-mock --version

      - name: Start stripe-mock service
        run: |
          stripe-mock -port 12111 &
          sleep 5
          curl --retry 5 --retry-delay 2 http://localhost:12111/v1/charges -H "Authorization: Bearer sk_test_mock" || echo "Stripe mock not ready"

      - name: Run unit tests
        run: npm test
        env:
          CI: true

      - name: Run Stripe client tests
        run: |
          cd supabase/functions/_shared
          deno test --allow-all __tests__/stripe.spec.ts
        env:
          STRIPE_SECRET_KEY: sk_test_mock_key_for_testing

      - name: Run GDPR delete-user integration tests
        run: |
          cd supabase/functions
          deno test --allow-all tests/delete-user.spec.ts
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_FUNCTION_URL: ${{ secrets.SUPABASE_FUNCTION_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # E2E Testing with critical user flows
  e2e-critical:
    name: Critical E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Start application
        run: |
          npm run preview &
          sleep 10
          curl --retry 10 --retry-delay 3 http://localhost:4173 || echo "Server check failed"
        env:
          PORT: 4173

      - name: Run critical E2E tests
        run: |
          npx playwright test --project=${{ matrix.browser }} --grep="@critical" --reporter=github
        env:
          CI: true
          E2E_BASE_URL: http://localhost:4173

      - name: Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Run comprehensive tests on main branch only
  comprehensive-tests:
    name: Trigger Comprehensive Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-critical]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Trigger comprehensive test workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'comprehensive-tests.yml',
              ref: context.ref
            });

  # Status check for PR requirements
  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-critical]
    if: always()

    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.e2e-critical.result }}" == "success" ]]; then
            echo "✅ All required checks passed"
            exit 0
          else
            echo "❌ Some required checks failed"
            echo "Build & Test: ${{ needs.build-and-test.result }}"
            echo "E2E Critical: ${{ needs.e2e-critical.result }}"
            exit 1
          fi
