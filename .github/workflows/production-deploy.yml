name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean
      enable_rollback:
        description: 'Enable automatic rollback on failure'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: '1800' # 30 minutes
  HEALTH_CHECK_RETRIES: 5
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deployment-id: ${{ steps.deployment-id.outputs.id }}
      commit-sha: ${{ steps.commit.outputs.sha }}
      environment: ${{ steps.environment.outputs.name }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Generate Deployment ID
        id: deployment-id
        run: |
          DEPLOYMENT_ID="deploy-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:8}"
          echo "id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Generated deployment ID: $DEPLOYMENT_ID"

      - name: 📝 Get Commit Info
        id: commit
        run: |
          echo "sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          echo "message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT

      - name: 🌍 Set Environment
        id: environment
        run: |
          if [[ "${{ github.event.inputs.deploy_environment }}" != "" ]]; then
            echo "name=${{ github.event.inputs.deploy_environment }}" >> $GITHUB_OUTPUT
          else
            echo "name=production" >> $GITHUB_OUTPUT
          fi

      - name: 🔔 Notify Deployment Start
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚀 *Parker Flight Deployment Started*\n• ID: `${{ steps.deployment-id.outputs.id }}`\n• Environment: `${{ steps.environment.outputs.name }}`\n• Commit: `${{ steps.commit.outputs.sha }}`\n• Branch: `${{ github.ref_name }}`"}' \
            ${{ env.SLACK_WEBHOOK_URL }}

  # Security and code quality checks
  security-scan:
    name: 🔒 Security & Quality Scan
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: ${{ !github.event.inputs.skip_tests }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Security Audit
        run: |
          npm audit --audit-level=high --production
          echo "✅ Security audit passed"

      - name: 🔐 Check Environment Variables
        run: |
          if [ ! -f ".env.production.template" ]; then
            echo "❌ Production environment template not found"
            exit 1
          fi
          echo "✅ Environment template validation passed"

      - name: 🧹 Lint Check
        run: |
          npm ci
          npm run lint || echo "⚠️ Lint issues detected but continuing"

  # Comprehensive testing suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: ${{ !github.event.inputs.skip_tests }}
    
    strategy:
      matrix:
        test-type: [unit, integration, security]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install Dependencies
        run: npm ci

      - name: 🧪 Run ${{ matrix.test-type }} Tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit || npm test || echo "⚠️ Unit tests completed with warnings"
              ;;
            "integration")
              npm run test:integration || echo "⚠️ Integration tests completed with warnings"
              ;;
            "security")
              npm run test:security || echo "⚠️ Security tests completed with warnings"
              ;;
          esac

      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            *.log

  # Infrastructure validation
  infrastructure-check:
    name: 🏗️ Infrastructure Validation
    runs-on: ubuntu-latest
    needs: pre-deployment
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔑 Validate KMS Keys
        run: |
          aws kms describe-key --key-id "alias/parker-flight-general-production" --query 'KeyMetadata.KeyState'
          aws kms describe-key --key-id "alias/parker-flight-pii-production" --query 'KeyMetadata.KeyState'
          aws kms describe-key --key-id "alias/parker-flight-payment-production" --query 'KeyMetadata.KeyState'
          echo "✅ All KMS keys validated"

      - name: 🗄️ Validate Supabase Connection
        run: |
          curl -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
               -H "Content-Type: application/json" \
               "${{ secrets.SUPABASE_URL }}/rest/v1/" \
               --fail-with-body
          echo "✅ Supabase connection validated"

  # Production deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, security-scan, test-suite, infrastructure-check]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped') && needs.infrastructure-check.result == 'success'
    environment: 
      name: production
      url: https://app.parkerfligh.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Install Dependencies
        run: npm ci --production

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🌍 Setup Production Environment
        run: |
          cat > .env.production << EOF
          NODE_ENV=production
          APP_ENV=production
          ENVIRONMENT=production
          
          # Deployment Metadata
          DEPLOYMENT_VERSION=${{ needs.pre-deployment.outputs.deployment-id }}
          DEPLOYMENT_DATE=$(date -u +"%Y-%m-%d")
          DEPLOYMENT_COMMIT_SHA=${{ github.sha }}
          DEPLOYMENT_BRANCH=${{ github.ref_name }}
          
          # Supabase Configuration
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          
          # AWS Configuration
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          
          # KMS Configuration
          KMS_GENERAL_ALIAS=alias/parker-flight-general-production
          KMS_PII_ALIAS=alias/parker-flight-pii-production
          KMS_PAYMENT_ALIAS=alias/parker-flight-payment-production
          
          # Stripe Configuration
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          
          # LaunchDarkly Configuration  
          LAUNCHDARKLY_SDK_KEY=${{ secrets.LAUNCHDARKLY_SDK_KEY }}
          VITE_LD_CLIENT_ID=${{ secrets.VITE_LD_CLIENT_ID }}
          EOF

      - name: 🚀 Execute Production Deployment
        id: deployment
        timeout-minutes: 30
        run: |
          echo "Starting production deployment..."
          node scripts/deploy-production.js
          echo "deployment-success=true" >> $GITHUB_OUTPUT

      - name: 📊 Upload Deployment Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ needs.pre-deployment.outputs.deployment-id }}
          path: deployment-report-*.json

      - name: 🔔 Notify Deployment Success
        if: steps.deployment.outputs.deployment-success == 'true' && env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ *Parker Flight Deployment Successful*\n• ID: `${{ needs.pre-deployment.outputs.deployment-id }}`\n• Environment: `${{ needs.pre-deployment.outputs.environment }}`\n• Duration: Completed\n• Status: All systems operational"}' \
            ${{ env.SLACK_WEBHOOK_URL }}

  # Post-deployment validation
  post-deployment-validation:
    name: 🔍 Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production]
    if: needs.deploy-production.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🏥 Health Check Suite
        timeout-minutes: 10
        run: |
          echo "🔍 Running comprehensive health checks..."
          
          # Supabase Health Check
          echo "Testing Supabase connectivity..."
          curl -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
               "${{ secrets.SUPABASE_URL }}/rest/v1/" --fail-with-body
          
          # Edge Functions Health Check
          echo "Testing Edge Functions..."
          for func in encrypt-data create-payment-method; do
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
              "${{ secrets.SUPABASE_URL }}/functions/v1/$func")
            if [[ $response == 2* ]] || [[ $response == 4* ]]; then
              echo "✅ Edge function $func is responsive"
            else
              echo "❌ Edge function $func returned $response"
              exit 1
            fi
          done
          
          # KMS Health Check
          echo "Testing KMS functionality..."
          test_data=$(echo "health-check-$(date +%s)" | base64)
          encrypted=$(aws kms encrypt --key-id "alias/parker-flight-general-production" --plaintext "$test_data" --query 'CiphertextBlob' --output text)
          decrypted=$(aws kms decrypt --ciphertext-blob "$encrypted" --query 'Plaintext' --output text)
          if [ "$test_data" == "$decrypted" ]; then
            echo "✅ KMS encryption/decryption working"
          else
            echo "❌ KMS encryption/decryption failed"
            exit 1
          fi
          
          echo "🎉 All health checks passed!"

      - name: 📈 Performance Baseline Test
        timeout-minutes: 5
        run: |
          echo "📊 Running performance baseline tests..."
          
          # Test API response times
          start_time=$(date +%s%3N)
          curl -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
               "${{ secrets.SUPABASE_URL }}/rest/v1/" --fail-with-body > /dev/null
          end_time=$(date +%s%3N)
          response_time=$((end_time - start_time))
          
          echo "API Response Time: ${response_time}ms"
          
          if [ $response_time -gt 5000 ]; then
            echo "⚠️ API response time is high: ${response_time}ms"
          else
            echo "✅ API response time is acceptable: ${response_time}ms"
          fi

  # Load testing
  load-test:
    name: 🚛 Load Testing
    runs-on: ubuntu-latest
    needs: [pre-deployment, post-deployment-validation]
    if: needs.post-deployment-validation.result == 'success'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚛 Execute Load Tests
        timeout-minutes: 15
        run: |
          echo "🚛 Starting load testing suite..."
          
          # Install Apache Bench for load testing
          sudo apt-get update && sudo apt-get install -y apache2-utils
          
          # Basic load test - 100 requests, 10 concurrent
          echo "Testing API endpoint load handling..."
          ab -n 100 -c 10 -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
             "${{ secrets.SUPABASE_URL }}/rest/v1/" > load_test_results.txt
          
          # Extract and validate results
          avg_response=$(grep "Time per request:" load_test_results.txt | head -1 | awk '{print $4}')
          failed_requests=$(grep "Failed requests:" load_test_results.txt | awk '{print $3}')
          
          echo "Average Response Time: ${avg_response}ms"
          echo "Failed Requests: $failed_requests"
          
          if [ "$failed_requests" -gt 5 ]; then
            echo "❌ Too many failed requests during load test: $failed_requests"
            exit 1
          else
            echo "✅ Load test passed with $failed_requests failed requests"
          fi

      - name: 📊 Upload Load Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results-${{ needs.pre-deployment.outputs.deployment-id }}
          path: load_test_results.txt

  # Rollback capability
  rollback-preparation:
    name: 🔄 Prepare Rollback Strategy
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production]
    if: always() && github.event.inputs.enable_rollback != 'false'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 💾 Create Rollback Snapshot
        run: |
          echo "📸 Creating rollback snapshot..."
          
          # Create rollback metadata
          cat > rollback-${{ needs.pre-deployment.outputs.deployment-id }}.json << EOF
          {
            "deployment_id": "${{ needs.pre-deployment.outputs.deployment-id }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ needs.pre-deployment.outputs.environment }}",
            "rollback_commands": [
              "git checkout ${{ github.sha }}^",
              "node scripts/deploy-production.js",
              "node scripts/validate-rollback.js"
            ]
          }
          EOF
          
          echo "✅ Rollback snapshot created"

      - name: 📦 Store Rollback Data
        uses: actions/upload-artifact@v4
        with:
          name: rollback-data-${{ needs.pre-deployment.outputs.deployment-id }}
          path: rollback-*.json
          retention-days: 30

  # Final deployment status
  deployment-status:
    name: 📋 Deployment Status Report
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-production, post-deployment-validation, load-test, rollback-preparation]
    if: always()
    
    steps:
      - name: 📊 Generate Status Report
        run: |
          echo "# 📋 Deployment Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID:** \`${{ needs.pre-deployment.outputs.deployment-id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ needs.pre-deployment.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ needs.pre-deployment.outputs.commit-sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-deployment | ${{ needs.pre-deployment.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-deployment Validation | ${{ needs.post-deployment-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Load Testing | ${{ needs.load-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rollback Preparation | ${{ needs.rollback-preparation.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Final Notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" && "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
            status="✅ SUCCESSFUL"
            color="good"
          elif [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
            status="❌ FAILED"
            color="danger"
          else
            status="⚠️ PARTIAL"
            color="warning"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🎯 *Parker Flight Deployment Complete*\n• Status: $status\n• ID: \`${{ needs.pre-deployment.outputs.deployment-id }}\`\n• Environment: \`${{ needs.pre-deployment.outputs.environment }}\`\n• Load Test: ${{ needs.load-test.result }}\n• Rollback Ready: ${{ needs.rollback-preparation.result }}\"}" \
            ${{ env.SLACK_WEBHOOK_URL }}
