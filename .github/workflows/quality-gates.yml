name: Quality Gates

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  schedule:
    # Run quality gates daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  quality-gates:
    name: Professional Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Organization Check
        run: npm run org:check
        
      - name: Run Comprehensive Quality Gates
        run: npm run quality:check
        env:
          CI: true

      - name: Upload Quality Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates-report
          path: |
            quality-gates-report.json
            coverage-report.json
          retention-days: 30

      - name: Comment PR with Quality Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('quality-gates-report.json', 'utf8'));
              
              const body = `
            ## 🏗️ Quality Gates Report
            
            **Overall Status:** ${report.summary.overall === 'PASS' ? '✅ PASS' : '❌ FAIL'}
            
            **Summary:**
            - ✅ Passed: ${report.summary.passed}
            - ❌ Failed: ${report.summary.failed}  
            - ⚠️ Warnings: ${report.summary.warnings}
            
            ${report.summary.failed > 0 ? `
            **Failed Checks:**
            ${report.details.failed.map(f => `- ❌ ${f}`).join('\n')}
            ` : ''}
            
            ${report.summary.warnings > 0 ? `
            **Warnings:**
            ${report.details.warnings.map(w => `- ⚠️ ${w}`).join('\n')}
            ` : ''}
            
            **Metrics:**
            ${Object.entries(report.metrics).map(([key, value]) => 
              `- **${key}:** ${JSON.stringify(value)}`
            ).join('\n')}
            
            <details>
            <summary>View Full Report</summary>
            
            \`\`\`json
            ${JSON.stringify(report, null, 2)}
            \`\`\`
            
            </details>
            `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not post quality report comment:', error.message);
            }

  security-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: .lighthouseci/
          retention-days: 30
