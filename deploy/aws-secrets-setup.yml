# AWS Secrets Manager Setup for Production Deployment
# CloudFormation template for provisioning all required secrets

AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Secrets Manager setup for Flight Booking Platform'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment
  
  Region:
    Type: String
    Default: us-west-2
    Description: AWS region for deployment

Resources:
  # Stripe API Secrets
  StripeCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/stripe/credentials'
      Description: 'Stripe API credentials for payment processing'
      SecretString: !Sub |
        {
          "publishable_key": "pk_live_REPLACE_WITH_ACTUAL_KEY",
          "secret_key": "sk_live_REPLACE_WITH_ACTUAL_KEY",
          "webhook_secret": "whsec_REPLACE_WITH_ACTUAL_SECRET"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: payment
        - Key: Provider
          Value: stripe

  # Supabase Credentials
  SupabaseCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/supabase/credentials'
      Description: 'Supabase database and auth credentials'
      SecretString: !Sub |
        {
          "supabase_url": "https://REPLACE_WITH_PROJECT_ID.supabase.co",
          "supabase_anon_key": "REPLACE_WITH_ANON_KEY",
          "supabase_service_key": "REPLACE_WITH_SERVICE_KEY",
          "supabase_jwt_secret": "REPLACE_WITH_JWT_SECRET",
          "database_url": "postgresql://REPLACE_WITH_DB_URL"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: database
        - Key: Provider
          Value: supabase

  # OAuth Provider Secrets
  GoogleOAuthCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/oauth/google-credentials'
      Description: 'Google OAuth 2.0 credentials'
      SecretString: !Sub |
        {
          "client_id": "REPLACE_WITH_GOOGLE_CLIENT_ID",
          "client_secret": "REPLACE_WITH_GOOGLE_CLIENT_SECRET",
          "redirect_uris": ["https://yourdomain.com/auth/callback/google"]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth
        - Key: Provider
          Value: google

  GitHubOAuthCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/oauth/github-credentials'
      Description: 'GitHub OAuth credentials'
      SecretString: !Sub |
        {
          "client_id": "REPLACE_WITH_GITHUB_CLIENT_ID",
          "client_secret": "REPLACE_WITH_GITHUB_CLIENT_SECRET",
          "redirect_uris": ["https://yourdomain.com/auth/callback/github"]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth
        - Key: Provider
          Value: github

  DiscordOAuthCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/oauth/discord-credentials'
      Description: 'Discord OAuth credentials'
      SecretString: !Sub |
        {
          "client_id": "REPLACE_WITH_DISCORD_CLIENT_ID",
          "client_secret": "REPLACE_WITH_DISCORD_CLIENT_SECRET",
          "redirect_uris": ["https://yourdomain.com/auth/callback/discord"]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: auth
        - Key: Provider
          Value: discord

  # Flight API Secrets
  AmadeusAPICredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/flight-apis/amadeus-credentials'
      Description: 'Amadeus Flight API credentials'
      SecretString: !Sub |
        {
          "client_id": "REPLACE_WITH_AMADEUS_CLIENT_ID",
          "client_secret": "REPLACE_WITH_AMADEUS_CLIENT_SECRET",
          "api_url": "https://api.amadeus.com",
          "test_mode": false
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: flights
        - Key: Provider
          Value: amadeus

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-flight-booking-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref StripeCredentials
                  - !Ref SupabaseCredentials
                  - !Ref GoogleOAuthCredentials
                  - !Ref GitHubOAuthCredentials
                  - !Ref DiscordOAuthCredentials
                  - !Ref AmadeusAPICredentials
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'
                Condition:
                  StringEquals:
                    'kms:ViaService': !Sub 'secretsmanager.${AWS::Region}.amazonaws.com'

  # Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-flight-booking-alb-sg'
      GroupDescription: 'Security group for Application Load Balancer'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: load-balancer

Outputs:
  StripeSecretsArn:
    Description: 'ARN of Stripe credentials secret'
    Value: !Ref StripeCredentials
    Export:
      Name: !Sub '${Environment}-stripe-secrets-arn'

  SupabaseSecretsArn:
    Description: 'ARN of Supabase credentials secret'
    Value: !Ref SupabaseCredentials
    Export:
      Name: !Sub '${Environment}-supabase-secrets-arn'

  LambdaExecutionRoleArn:
    Description: 'ARN of Lambda execution role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${Environment}-lambda-role-arn'

  SecurityGroupId:
    Description: 'ID of ALB security group'
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${Environment}-alb-sg-id'
