#!/usr/bin/env node

/**
 * Setup script to create a test payment method for development/testing
 * 
 * This script:
 * 1. Connects to Stripe and Supabase
 * 2. Creates a test customer in Stripe
 * 3. Creates a test payment method in Stripe
 * 4. Saves the payment method in the database
 * 5. Sets it as the default payment method for the test user
 * 
 * The script is idempotent - it will check if the setup already exists and
 * will not create duplicates.
 * 
 * Usage:
 * node scripts/setup-test-payment-method.js
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import Stripe from 'stripe';

// Load environment variables from .env.local
config({ path: '.env.local' });

// Debug environment variables
console.log('Environment variables:');
console.log('- SUPABASE_PROJECT_URL:', process.env.SUPABASE_PROJECT_URL ? 'Found (value hidden)' : 'Not found');
console.log('- SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Found (value hidden)' : 'Not found');
console.log('- STRIPE_SECRET_KEY:', process.env.STRIPE_SECRET_KEY ? 'Found (value hidden)' : 'Not found');

// Check for required environment variables
if (!process.env.SUPABASE_PROJECT_URL) {
  throw new Error('SUPABASE_PROJECT_URL environment variable is required');
}
if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
  throw new Error('SUPABASE_SERVICE_ROLE_KEY environment variable is required');
}
if (!process.env.STRIPE_SECRET_KEY) {
  throw new Error('STRIPE_SECRET_KEY environment variable is required');
}

// Configuration
const TEST_USER_EMAIL = 'test.user@example.com';
const TEST_USER_PASSWORD = 'Test123456!'; // Secure test password
const TEST_USER_FIRST_NAME = 'Test';
const TEST_USER_LAST_NAME = 'User';

// Use Stripe test token instead of raw card data
const TEST_CARD_TOKEN = 'tok_visa'; // Predefined Stripe test token for a Visa card

// Connect to Supabase and Stripe
const supabase = createClient(
  process.env.SUPABASE_PROJECT_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: '2023-10-16',
});

/**
 * Main function to set up a test payment method
 */
async function setupTestPaymentMethod() {
  try {
    console.log('Starting setup of test payment method...');
    
    // Look up existing user by email
    console.log(`Looking up user with email: ${TEST_USER_EMAIL}`);
    const { data: existingUsers, error: lookupError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', TEST_USER_EMAIL);
    
    let userProfile = null;
    let userId = null;
    
    // Check if user already exists
    if (!lookupError && existingUsers && existingUsers.length > 0) {
      userProfile = existingUsers[0];
      userId = userProfile.id;
      console.log(`Found existing user: ${userProfile.email} (ID: ${userId})`);
    } else {
      console.log('Test user not found. Creating a new test user...');
      
      try {
        // First, create the auth user
        console.log('Creating auth user...');
        const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
          email: TEST_USER_EMAIL,
          password: TEST_USER_PASSWORD,
          email_confirm: true, // Auto-confirm the email
          user_metadata: {
            first_name: TEST_USER_FIRST_NAME,
            last_name: TEST_USER_LAST_NAME
          }
        });

        if (authError) {
          console.error('Error creating auth user:', authError);
          return;
        } 
        
        // Store the user ID generated by Supabase
        userId = authUser.user.id;
        console.log(`Created auth user with ID: ${userId}`);
        
        // Then create the profile
        console.log('Creating user profile...');
        const { data: newUser, error: createError } = await supabase
          .from('profiles')
          .insert([
            {
              id: userId,
              email: TEST_USER_EMAIL,
              first_name: TEST_USER_FIRST_NAME,
              last_name: TEST_USER_LAST_NAME,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }
          ])
          .select();
        
        if (createError) {
          console.error('Error creating profile:', createError);
          return;
        }
        
        userProfile = newUser[0];
        console.log(`Created new user profile: ${userProfile.email}`);
      } catch (error) {
        console.error('Unexpected error during user creation:', error);
        return;
      }
    }
    
    // 2. Check if payment method already exists
    const { data: existingPaymentMethods } = await supabase
      .from('payment_methods')
      .select('*')
      .eq('user_id', userId);
    
    if (existingPaymentMethods && existingPaymentMethods.length > 0) {
      const defaultMethod = existingPaymentMethods.find(pm => pm.is_default);
      if (defaultMethod) {
        console.log(`Default payment method already exists: ${defaultMethod.stripe_pm_id}`);
        console.log('No action needed. Use this existing payment method for testing.');
        return;
      }
    }
    
    // 3. Create or get Stripe customer
    let customerId;
    
    try {
      console.log('Looking for existing Stripe customer...');
      
      // Try searching by email as a more reliable method
      const customers = await stripe.customers.list({
        email: userProfile.email,
        limit: 1
      });
      
      if (customers && customers.data && customers.data.length > 0) {
        customerId = customers.data[0].id;
        console.log(`Using existing Stripe customer: ${customerId}`);
      } else {
      const customer = await stripe.customers.create({
        email: userProfile.email,
        name: `${userProfile.first_name || 'Test'} ${userProfile.last_name || 'User'}`,
        metadata: {
          user_id: userId,
        },
      });
      customerId = customer.id;
      console.log(`Created new Stripe customer: ${customerId}`);
      }
    } catch (error) {
      console.error('Error interacting with Stripe customer:', error);
      
      // Create a new customer as fallback
      try {
        console.log('Creating new Stripe customer as fallback...');
        const customer = await stripe.customers.create({
          email: userProfile.email,
          name: `${userProfile.first_name || 'Test'} ${userProfile.last_name || 'User'}`,
          metadata: {
            user_id: userId,
          },
        });
        customerId = customer.id;
        console.log(`Created new Stripe customer: ${customerId}`);
      } catch (fallbackError) {
        console.error('Failed to create Stripe customer:', fallbackError);
        return;
      }
    }
    
    // 4. Create payment method using the Stripe test token
    // First, create a payment method with the token
    console.log('Creating payment method with test token...');
    const paymentMethod = await stripe.paymentMethods.create({
      type: 'card',
      card: {
        token: TEST_CARD_TOKEN,
      },
    });
    console.log(`Created payment method: ${paymentMethod.id}`);
    
    // 5. Attach payment method to customer
    await stripe.paymentMethods.attach(paymentMethod.id, {
      customer: customerId,
    });
    console.log(`Attached payment method to customer`);
    
    // 6. Insert payment method into Supabase
    const paymentMethodData = {
      user_id: userId,
      stripe_pm_id: paymentMethod.id,
      stripe_customer_id: customerId,
      brand: paymentMethod.card.brand,
      last4: paymentMethod.card.last4,
      exp_month: paymentMethod.card.exp_month,
      exp_year: paymentMethod.card.exp_year,
      is_default: true,
    };
    
    // 7. First unset any existing default payment methods
    await supabase
      .from('payment_methods')
      .update({ is_default: false })
      .eq('user_id', userId);
    
    // 8. Then insert the new payment method
    const { data: insertedPm, error: insertError } = await supabase
      .from('payment_methods')
      .insert([paymentMethodData])
      .select();
    
    if (insertError) {
      console.error('Error inserting payment method:', insertError);
      return;
    }
    
    console.log(`Successfully created and set default payment method:`);
    console.log(`- Payment Method ID: ${paymentMethod.id}`);
    console.log(`- Customer ID: ${customerId}`);
    console.log(`- Card: ${paymentMethod.card.brand} ending in ${paymentMethod.card.last4}`);
    console.log(`- Expiration: ${paymentMethod.card.exp_month}/${paymentMethod.card.exp_year}`);
    console.log('\nYou can now use auto-booking with this test payment method');
    
  } catch (error) {
    console.error('Error setting up test payment method:', error);
  }
}

// Run the setup
setupTestPaymentMethod()
  .then(() => console.log('Setup script completed.'))
  .catch(err => console.error('Setup script failed:', err));

