#!/bin/bash

# Google OAuth Migration Script
# Transitions from deprecated gapi.auth2 to modern Google Identity Services

set -e

echo "üöÄ Google OAuth Migration to Modern Identity Services"
echo "====================================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Phase 1: Pre-Migration Analysis${NC}"
echo "--------------------------------"
echo ""

# Check if using deprecated gapi.auth2
if grep -r "gapi.auth2" src/ 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Deprecated gapi.auth2 usage detected:${NC}"
    grep -r "gapi.auth2" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | head -10
    echo ""
fi

# Check for old Google Sign-In script
if grep -r "apis.google.com/js/platform.js" . 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Old Google Platform Library detected:${NC}"
    grep -r "apis.google.com/js/platform.js" . | head -5
    echo ""
fi

# Check OAuth client status
echo -e "${BLUE}Checking OAuth Client Status...${NC}"
if [ -f ".env" ]; then
    if grep -q "SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID" .env; then
        CLIENT_ID=$(grep "SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID" .env | cut -d'=' -f2)
        echo "Current Client ID: $CLIENT_ID"
        
        # Test current OAuth client
        echo "Testing current OAuth client..."
        node test-oauth-config.cjs 2>/dev/null || echo -e "${RED}‚ùå Current OAuth client has issues${NC}"
    else
        echo -e "${RED}‚ùå Google OAuth client not configured in .env${NC}"
    fi
else
    echo -e "${RED}‚ùå .env file not found${NC}"
fi

echo ""
echo -e "${BLUE}Phase 2: Migration Steps${NC}"
echo "------------------------"
echo ""

read -p "Do you want to proceed with the migration? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Migration cancelled."
    exit 1
fi

# Step 1: Create backup
echo -e "${BLUE}Step 1: Creating Backup${NC}"
echo "Creating backup of current authentication files..."

BACKUP_DIR="backup/pre-oauth-migration-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup authentication files
if [ -f "src/pages/Login.tsx" ]; then
    cp "src/pages/Login.tsx" "$BACKUP_DIR/"
    echo "‚úÖ Backed up Login.tsx"
fi

if [ -f "src/components/AuthGuard.tsx" ]; then
    cp "src/components/AuthGuard.tsx" "$BACKUP_DIR/"
    echo "‚úÖ Backed up AuthGuard.tsx"
fi

if [ -f ".env" ]; then
    cp ".env" "$BACKUP_DIR/"
    echo "‚úÖ Backed up .env"
fi

echo -e "${GREEN}‚úÖ Backup created in $BACKUP_DIR${NC}"
echo ""

# Step 2: Install/Update Dependencies
echo -e "${BLUE}Step 2: Updating Dependencies${NC}"

# Check if package.json has Google-related dependencies that need updating
if grep -q "@google/identity" package.json 2>/dev/null; then
    echo "Google Identity Services already in package.json"
else
    echo "Adding Google Identity Services types..."
    # Note: Google Identity Services is loaded via script tag, no package installation needed
    echo "‚úÖ No additional package installation required"
fi

echo ""

# Step 3: Update Login Component
echo -e "${BLUE}Step 3: Updating Login Component${NC}"

if [ -f "src/pages/Login.tsx" ]; then
    echo "Updating Login.tsx to use modern authentication..."
    
    # Create a new modern login component
    if [ -f "src/pages/LoginModern.tsx" ]; then
        echo "Replacing Login.tsx with modern version..."
        cp "src/pages/LoginModern.tsx" "src/pages/Login.tsx"
        echo "‚úÖ Updated Login.tsx with modern Google OAuth"
    else
        echo -e "${RED}‚ùå LoginModern.tsx not found. Please ensure modern components exist.${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Login.tsx not found, skipping component update${NC}"
fi

echo ""

# Step 4: Update Route Imports
echo -e "${BLUE}Step 4: Updating Route Imports${NC}"

# Check if routes need updating
if grep -r "from.*Login" src/ --include="*.tsx" --include="*.ts" 2>/dev/null; then
    echo "Checking route imports..."
    
    # Update any imports that might need changing
    find src/ -name "*.tsx" -o -name "*.ts" | xargs grep -l "from.*Login" | while read file; do
        echo "Checking $file for Login imports..."
        # Routes should automatically pick up the new Login.tsx
    done
fi

echo ""

# Step 5: Update Environment Configuration
echo -e "${BLUE}Step 5: Environment Configuration Check${NC}"

echo "Checking environment variables..."

if [ ! -f ".env" ]; then
    echo -e "${RED}‚ùå .env file missing. Creating template...${NC}"
    cat > .env << 'EOF'
# Google OAuth Configuration (Replace with your actual values)
SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID=your-client-id.apps.googleusercontent.com
SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET=GOCSPX-your-client-secret
VITE_GOOGLE_CLIENT_ID=your-client-id.apps.googleusercontent.com

# Add your other environment variables here
EOF
    echo "‚úÖ Created .env template"
    echo -e "${YELLOW}‚ö†Ô∏è  Please update .env with your actual OAuth credentials${NC}"
else
    echo "‚úÖ .env file exists"
    
    # Check for required variables
    required_vars=("SUPABASE_AUTH_EXTERNAL_GOOGLE_CLIENT_ID" "VITE_GOOGLE_CLIENT_ID")
    for var in "${required_vars[@]}"; do
        if grep -q "$var" .env; then
            echo "‚úÖ $var configured"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $var missing from .env${NC}"
        fi
    done
fi

echo ""

# Step 6: Test Migration
echo -e "${BLUE}Step 6: Testing Migration${NC}"

echo "Running post-migration tests..."

# Test OAuth configuration
echo "Testing OAuth configuration..."
if command -v node >/dev/null 2>&1; then
    if [ -f "test-oauth-config.cjs" ]; then
        echo "Running OAuth configuration test..."
        node test-oauth-config.cjs || echo -e "${YELLOW}‚ö†Ô∏è  OAuth test had issues - may need client credentials update${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  OAuth test script not found${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Node.js not available for testing${NC}"
fi

# Test modern auth service
echo "Testing modern authentication service..."
if [ -f "src/services/modernGoogleAuthService.ts" ]; then
    echo "‚úÖ Modern Google Auth Service available"
    
    # Run TypeScript check if available
    if command -v npx >/dev/null 2>&1; then
        echo "Running TypeScript check..."
        npx tsc --noEmit --skipLibCheck || echo -e "${YELLOW}‚ö†Ô∏è  TypeScript check had warnings${NC}"
    fi
else
    echo -e "${RED}‚ùå Modern Google Auth Service not found${NC}"
fi

echo ""

# Step 7: Security Analysis
echo -e "${BLUE}Step 7: Security Analysis${NC}"

echo "Analyzing security improvements..."

if [ -f "src/services/authSecurityMonitor.ts" ]; then
    echo "‚úÖ Security monitoring enabled"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Security monitoring not available${NC}"
fi

echo "Security features enabled:"
echo "  ‚Ä¢ Enhanced token validation"
echo "  ‚Ä¢ FedCM compliance"
echo "  ‚Ä¢ Privacy mode detection"
echo "  ‚Ä¢ Authentication event logging"
echo "  ‚Ä¢ Cross-browser compatibility"

echo ""

# Step 8: Final Steps
echo -e "${BLUE}Final Steps${NC}"
echo "-----------"
echo ""

echo -e "${GREEN}üéâ Migration Steps Completed!${NC}"
echo ""

echo -e "${YELLOW}Manual Steps Required:${NC}"
echo "1. Update OAuth Client Credentials (if needed):"
echo "   - Run: ./scripts/setup-google-oauth-client.sh"
echo ""
echo "2. Test Authentication Flow:"
echo "   - Start development server: npm run dev"
echo "   - Test sign-in functionality"
echo "   - Check browser console for errors"
echo ""
echo "3. Monitor Security Events:"
echo "   - Check browser console for security logs"
echo "   - Review authentication patterns"
echo ""
echo "4. Production Deployment:"
echo "   - Update production OAuth client URIs"
echo "   - Test in production environment"
echo "   - Monitor authentication success rates"
echo ""

echo -e "${BLUE}What's New:${NC}"
echo "‚Ä¢ Google Identity Services (GIS) replaces deprecated gapi.auth2"
echo "‚Ä¢ FedCM support for enhanced privacy"
echo "‚Ä¢ One Tap authentication for better UX"
echo "‚Ä¢ Comprehensive security monitoring"
echo "‚Ä¢ Cross-browser compatibility improvements"
echo "‚Ä¢ Enhanced error handling and logging"
echo ""

echo -e "${BLUE}Rollback Instructions:${NC}"
echo "If you need to rollback:"
echo "1. Restore files from backup: $BACKUP_DIR"
echo "2. Restart your development server"
echo ""

echo -e "${GREEN}Migration completed successfully! üöÄ${NC}"
echo "Check the documentation for detailed usage instructions."
