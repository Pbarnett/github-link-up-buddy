#!/bin/bash
# Production Credentials Setup Script
# Helps configure LaunchDarkly and Stripe production credentials securely

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to prompt for credentials
prompt_for_credentials() {
    log_info "Setting up production credentials for auto-booking system..."
    echo
    
    # LaunchDarkly Production
    log_info "üöÄ LaunchDarkly Production Setup:"
    echo "1. Visit: https://app.launchdarkly.com"
    echo "2. Go to Account Settings ‚Üí Environments"
    echo "3. Create or select 'Production' environment"
    echo "4. Copy the credentials below:"
    echo
    
    read -p "Enter LaunchDarkly Production SDK Key (sdk-...): " LD_PROD_SDK_KEY
    read -p "Enter LaunchDarkly Production Client ID: " LD_PROD_CLIENT_ID
    
    echo
    log_info "üí≥ Stripe Production Setup:"
    echo "1. Visit: https://dashboard.stripe.com"
    echo "2. Toggle to 'Live' mode (top left)"
    echo "3. Go to Developers ‚Üí API keys"
    echo "4. Copy the credentials below:"
    echo
    
    read -p "Enter Stripe Live Publishable Key (pk_live_...): " STRIPE_LIVE_PK
    read -s -p "Enter Stripe Live Secret Key (sk_live_...): " STRIPE_LIVE_SK
    echo
    read -s -p "Enter Stripe Live Webhook Secret (whsec_...): " STRIPE_WEBHOOK_SECRET
    echo
    
    # Validate inputs
    if [[ ! $LD_PROD_SDK_KEY =~ ^sdk- ]]; then
        log_error "LaunchDarkly SDK Key should start with 'sdk-'"
        exit 1
    fi
    
    if [[ ! $STRIPE_LIVE_SK =~ ^sk_live_ ]]; then
        log_error "Stripe Secret Key should start with 'sk_live_'"
        exit 1
    fi
    
    log_success "Credentials validated!"
    
    # Update .env.production file
    update_production_env
    
    # Update AWS Secrets Manager template
    update_aws_secrets_template
    
    log_success "Production credentials configured!"
    echo
    log_info "Next steps:"
    echo "1. Deploy to AWS: aws cloudformation deploy --template-file deploy/aws-secrets-setup.yml --stack-name flight-booking-secrets-prod --parameter-overrides Environment=production"
    echo "2. Test LaunchDarkly connection: npm run test:feature-flags"
    echo "3. Test Stripe connection: npm run test:payment"
    echo "4. Deploy your application with production environment variables"
}

# Update .env.production file
update_production_env() {
    log_info "Updating .env.production file..."
    
    # Create backup
    cp .env.production .env.production.backup.$(date +%s)
    
    # Update the file
    cat > .env.production << EOF
# Production Environment Configuration
# Auto-generated by setup-production-credentials.sh on $(date)

# LaunchDarkly Production Configuration
LAUNCHDARKLY_SDK_KEY="${LD_PROD_SDK_KEY}"
VITE_LD_CLIENT_ID="${LD_PROD_CLIENT_ID}"
LAUNCHDARKLY_ENV_KEY="production"

# Stripe Production Configuration
STRIPE_SECRET_KEY="${STRIPE_LIVE_SK}"
VITE_STRIPE_PUBLISHABLE_KEY="${STRIPE_LIVE_PK}"
STRIPE_WEBHOOK_SECRET="${STRIPE_WEBHOOK_SECRET}"

# Application Configuration
NODE_ENV="production"
VITE_APP_ENV="production"

# Auto-booking Feature Flags
VITE_FLAG_AUTO_BOOKING="true"
VITE_FLAG_FLIGHT_MONITORING="true"
VITE_FLAG_PAYMENT_PROCESSING="true"

# Redis Configuration (Upstash Production)
REDIS_URL="rediss://default:{{UPSTASH_REDIS_PASSWORD}}@{{UPSTASH_REDIS_HOST}}:6380"

# Supabase Production (update with your production values)
VITE_SUPABASE_URL="{{SUPABASE_PROD_URL}}"
VITE_SUPABASE_ANON_KEY="{{SUPABASE_PROD_ANON_KEY}}"
SUPABASE_SERVICE_KEY="{{SUPABASE_PROD_SERVICE_KEY}}"

# Monitoring
SENTRY_DSN="{{SENTRY_PROD_DSN}}"
SENTRY_ENVIRONMENT="production"

# Security
CORS_ORIGIN="https://your-production-domain.com"
EOF

    log_success ".env.production updated successfully"
}

# Update AWS Secrets Manager CloudFormation template
update_aws_secrets_template() {
    log_info "Updating AWS Secrets Manager template..."
    
    # Create backup
    cp deploy/aws-secrets-setup.yml deploy/aws-secrets-setup.yml.backup.$(date +%s)
    
    # Update Stripe secrets in the template
    sed -i.bak "s/pk_live_REPLACE_WITH_ACTUAL_KEY/${STRIPE_LIVE_PK}/g" deploy/aws-secrets-setup.yml
    sed -i.bak "s/sk_live_REPLACE_WITH_ACTUAL_KEY/${STRIPE_LIVE_SK}/g" deploy/aws-secrets-setup.yml
    sed -i.bak "s/whsec_REPLACE_WITH_ACTUAL_SECRET/${STRIPE_WEBHOOK_SECRET}/g" deploy/aws-secrets-setup.yml
    
    rm deploy/aws-secrets-setup.yml.bak
    
    log_success "AWS Secrets Manager template updated"
}

# Create LaunchDarkly production environment helper
create_ld_production_env() {
    log_info "Creating LaunchDarkly production environment configuration..."
    
    cat > .env.ld-production << EOF
# LaunchDarkly Production Environment Configuration
# Generated on $(date)

LAUNCHDARKLY_SDK_KEY="${LD_PROD_SDK_KEY}"
VITE_LD_CLIENT_ID="${LD_PROD_CLIENT_ID}"
LAUNCHDARKLY_ENV_KEY="production"

# Feature flags for production
VITE_FLAG_AUTO_BOOKING="true"
VITE_FLAG_FLIGHT_MONITORING="true" 
VITE_FLAG_PAYMENT_PROCESSING="true"
VITE_FLAG_CONCURRENCY_CONTROL="true"
EOF

    chmod 600 .env.ld-production
    log_success "LaunchDarkly production environment file created"
}

# Test credentials
test_credentials() {
    log_info "Testing production credentials..."
    
    # Test LaunchDarkly
    log_info "Testing LaunchDarkly connection..."
    if command -v node &> /dev/null; then
        node -e "
            const { LaunchDarkly } = require('@launchdarkly/node-server-sdk');
            const client = LaunchDarkly.init('${LD_PROD_SDK_KEY}');
            client.waitForInitialization().then(() => {
                console.log('‚úÖ LaunchDarkly connection successful');
                client.close();
            }).catch(err => {
                console.log('‚ùå LaunchDarkly connection failed:', err.message);
                client.close();
            });
        " 2>/dev/null || log_warn "Node.js test skipped - install @launchdarkly/node-server-sdk to test"
    fi
    
    # Test Stripe
    log_info "Testing Stripe connection..."
    if command -v curl &> /dev/null; then
        response=$(curl -s -o /dev/null -w "%{http_code}" \
            -u "${STRIPE_LIVE_SK}:" \
            https://api.stripe.com/v1/customers?limit=1)
        
        if [ "$response" = "200" ]; then
            log_success "‚úÖ Stripe connection successful"
        else
            log_error "‚ùå Stripe connection failed (HTTP $response)"
        fi
    fi
}

# Show help
show_help() {
    cat << EOF
Production Credentials Setup Script

Usage: $0 [command]

Commands:
  setup     Interactive setup of production credentials
  test      Test existing production credentials
  backup    Create backup of current configuration
  help      Show this help

This script helps you securely configure:
- LaunchDarkly production environment
- Stripe live payment processing
- AWS Secrets Manager integration

Security Notes:
- All credential files have restricted permissions (600)
- Backups are created before any changes
- Never commit production credentials to git
EOF
}

# Main command handling
case "${1:-setup}" in
    "setup")
        prompt_for_credentials
        create_ld_production_env
        ;;
    "test")
        test_credentials
        ;;
    "backup")
        timestamp=$(date +%s)
        cp .env.production .env.production.backup.$timestamp 2>/dev/null || true
        cp deploy/aws-secrets-setup.yml deploy/aws-secrets-setup.yml.backup.$timestamp 2>/dev/null || true
        log_success "Configuration backed up with timestamp: $timestamp"
        ;;
    "help"|*)
        show_help
        ;;
esac
