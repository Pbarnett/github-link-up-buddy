version: '3.8'

services:
  parker-flight:
    image: parker-flight:latest
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
      target: production
    container_name: parker-flight-app
    restart: unless-stopped
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"
    read_only: true
    
    # Environment configuration
    environment:
      - NODE_ENV=production
      - PORT=${PORT:-80}
      - PUID=1001
      - PGID=1001
    
    # Port configuration
    ports:
      - "${EXTERNAL_PORT:-3000}:${PORT:-80}"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-80}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Volumes for temporary files
    volumes:
      - /tmp
      - /var/cache/nginx
      - /var/run
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "app,version,environment"
    
    # Labels for monitoring
    labels:
      - "app=parker-flight"
      - "version=1.5.0"
      - "environment=production"
      - "maintainer=parker@parkerflight.com"
      - "traefik.enable=true"
      - "traefik.http.routers.parker-flight.rule=Host(`localhost`)"
      - "traefik.http.services.parker-flight.loadbalancer.server.port=${PORT:-80}"
    
    # Network configuration
    networks:
      - parker-flight-network
    
    # Dependencies
    depends_on:
      - redis
      - monitoring
    
    # DNS configuration for better networking
    dns:
      - 1.1.1.1
      - 8.8.8.8

  redis:
    image: redis:7-alpine
    container_name: parker-flight-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    
    security_opt:
      - no-new-privileges:true
    
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    
    networks:
      - parker-flight-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  monitoring:
    image: prom/prometheus:latest
    container_name: parker-flight-monitoring
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - parker-flight-network
    
    security_opt:
      - no-new-privileges:true

  nginx-proxy:
    image: nginx:alpine
    container_name: parker-flight-proxy
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    
    depends_on:
      - parker-flight
    
    networks:
      - parker-flight-network
      - external-network
    
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backup:
    image: alpine:latest
    container_name: parker-flight-backup
    restart: "no"
    
    volumes:
      - redis-data:/backup/redis:ro
      - ./backups:/backup/output
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    command: >
      sh -c "
        echo 'Starting backup process...'
        tar -czf /backup/output/redis-backup-$$(date +%Y%m%d-%H%M%S).tar.gz -C /backup/redis .
        echo 'Backup completed successfully'
        find /backup/output -name 'redis-backup-*.tar.gz' -mtime +7 -delete
      "
    
    networks:
      - parker-flight-network
    
    profiles:
      - backup

networks:
  parker-flight-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: parker-flight-br
  
  external-network:
    external: true
    name: traefik-network

volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  nginx-cache:
    driver: local
  
  nginx-logs:
    driver: local

# Configuration for Docker Swarm mode
x-deploy-labels: &deploy-labels
  - "traefik.enable=true"
  - "traefik.docker.network=traefik-network"
  - "traefik.http.routers.parker-flight-secure.entrypoints=websecure"
  - "traefik.http.routers.parker-flight-secure.rule=Host(`parkerflight.com`)"
  - "traefik.http.routers.parker-flight-secure.tls=true"
  - "traefik.http.routers.parker-flight-secure.tls.certresolver=letsencrypt"
