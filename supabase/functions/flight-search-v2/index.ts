
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

// Define a type for the expected request payload
interface FlightSearchRequest {
  tripRequestId: string;
  // Potentially add other parameters like maxPrice, preferredCabin, etc.
  // For now, keeping it simple as per initial requirements.
  maxPrice?: number;
}

// Define a type for Amadeus API responses (simplified mock)
interface AmadeusFlightOffer {
  id: string; // Amadeus offer ID
  source: string; // e.g., "GDS"
  instantTicketingRequired: boolean;
  nonHomogeneous: boolean;
  oneWay: boolean;
  lastTicketingDate: string;
  numberOfBookableSeats: number;
  itineraries: Array<{
    duration: string;
    segments: Array<{
      departure: { iataCode: string; terminal?: string; at: string };
      arrival: { iataCode: string; terminal?: string; at: string };
      carrierCode: string;
      number: string;
      aircraft: { code: string };
      operating?: { carrierCode: string };
      duration: string;
      id: string;
      numberOfStops: number;
      blacklistedInEU: boolean;
    }>;
  }>;
  price: {
    currency: string;
    total: string; // Amadeus returns price as string
    base: string;
    fees?: Array<{ amount: string; type: string }>;
    grandTotal?: string; // Often same as total
  };
  pricingOptions: {
    fareType: string[];
    includedCheckedBags?: { quantity: number };
    // ... other options
  };
  validatingAirlineCodes: string[];
  travelerPricings: Array<{
    travelerId: string;
    fareOption: string;
    travelerType: string;
    price: { currency: string; total: string; base: string };
    fareDetailsBySegment: Array<{
      segmentId: string;
      cabin: string; // e.g., "ECONOMY", "BUSINESS"
      fareBasis: string;
      brandedFare?: string;
      class: string; // Booking class, e.g., "Y"
      includedCheckedBags?: { quantity: number };
      // ... other details
    }>;
  }>;
}


// Define the structure for flight_offers_v2 table (subset of FlightOfferV2DbRow for insertion)
// Assuming 'id' is auto-generated by DB or we generate it.
// 'created_at' is also typically handled by DB (e.g. with now())
interface FlightOfferV2Insert {
  trip_request_id: string;
  mode: 'AUTO' | 'MANUAL'; // Assuming 'AUTO' for Amadeus sourced offers
  price_total: number;
  price_currency: string; // Added from Amadeus response
  price_carry_on?: number | null; // This might not come directly from Amadeus basic offer
  bags_included: boolean;
  cabin_class: string | null;
  nonstop: boolean;
  origin_iata: string;
  destination_iata: string;
  depart_dt: string;   // ISO
  return_dt?: string | null; // For one-way or multi-city, this might be null or handled differently
  // seat_pref is not typically part of an offer search, but post-booking.
  // external_offer_id to store Amadeus offer ID or similar
  external_offer_id?: string;
  raw_offer_payload?: Record<string, any>; // To store the full Amadeus payload
}


// Placeholder for Amadeus API Client/Fetch logic
// In a real scenario, this would involve actual API calls, error handling, and authentication.
const fetchAmadeusOffers = async (
  tripRequestId: string,
  maxPrice?: number,
  // other filters like origin, destination, dates would come from the tripRequest record in DB
): Promise<AmadeusFlightOffer[]> => {
  console.log(`Mock Amadeus: Searching flights for tripRequestId: ${tripRequestId}, maxPrice: ${maxPrice}`);

  // This is a MOCK implementation.
  // A real implementation would:
  // 1. Fetch trip request details (origin, destination, dates) from Supabase using tripRequestId.
  // 2. Construct an Amadeus API request with these details and filters (nonStop, maxPrice).
  // 3. Call Amadeus API and handle response/errors.

  // Example mock offers:
  const mockApiOffers: AmadeusFlightOffer[] = [
    {
      id: 'amadeus-offer-123',
      source: 'GDS',
      instantTicketingRequired: false,
      nonHomogeneous: false,
      oneWay: false, // Assuming round trip for simplicity here
      lastTicketingDate: '2024-09-01',
      numberOfBookableSeats: 9,
      itineraries: [
        { // Outbound
          duration: 'PT8H30M',
          segments: [
            {
              departure: { iataCode: 'JFK', at: '2024-12-01T10:00:00' },
              arrival: { iataCode: 'LHR', at: '2024-12-01T22:30:00' }, // Example arrival time
              carrierCode: 'BA',
              number: '245',
              aircraft: { code: '777' },
              duration: 'PT8H30M',
              id: 'segment-1',
              numberOfStops: 0, // Non-stop
              blacklistedInEU: false,
            },
          ],
        },
        { // Inbound (optional, for round trips)
          duration: 'PT8H50M',
          segments: [
            {
              departure: { iataCode: 'LHR', at: '2024-12-10T12:00:00' },
              arrival: { iataCode: 'JFK', at: '2024-12-10T16:50:00' },
              carrierCode: 'BA',
              number: '244',
              aircraft: { code: '777' },
              duration: 'PT8H50M',
              id: 'segment-2',
              numberOfStops: 0, // Non-stop
              blacklistedInEU: false,
            },
          ],
        },
      ],
      price: { currency: 'USD', total: '650.00', base: '500.00' },
      pricingOptions: { fareType: ['PUBLISHED'], includedCheckedBags: { quantity: 1 } },
      validatingAirlineCodes: ['BA'],
      travelerPricings: [
        {
          travelerId: '1',
          fareOption: 'STANDARD',
          travelerType: 'ADULT',
          price: { currency: 'USD', total: '650.00', base: '500.00' },
          fareDetailsBySegment: [
            { segmentId: 'segment-1', cabin: 'ECONOMY', fareBasis: 'Y', class: 'Y', includedCheckedBags: { quantity: 1 } },
            { segmentId: 'segment-2', cabin: 'ECONOMY', fareBasis: 'Y', class: 'Y', includedCheckedBags: { quantity: 1 } },
          ],
        },
      ],
    },
    // Another offer that might be filtered out by maxPrice
    {
      id: 'amadeus-offer-456',
      source: 'GDS',
      instantTicketingRequired: false,
      nonHomogeneous: false,
      oneWay: false,
      lastTicketingDate: '2024-09-01',
      numberOfBookableSeats: 5,
      itineraries: [ { duration: 'PT2H', segments: [{ departure: { iataCode: 'LAX', at: '2024-11-15T14:00:00' }, arrival: { iataCode: 'SFO', at: '2024-11-15T16:00:00' }, carrierCode: 'UA', number: '500', aircraft: { code: '737' }, duration: 'PT2H', id: 'segment-3', numberOfStops: 0, blacklistedInEU: false }] } ],
      price: { currency: 'USD', total: '1200.00', base: '1000.00' }, // Higher price
      pricingOptions: { fareType: ['PUBLISHED'], includedCheckedBags: { quantity: 0 } }, // No bags
      validatingAirlineCodes: ['UA'],
      travelerPricings: [{ travelerId: '1', fareOption: 'STANDARD', travelerType: 'ADULT', price: { currency: 'USD', total: '1200.00', base: '1000.00' }, fareDetailsBySegment: [{ segmentId: 'segment-3', cabin: 'BUSINESS', fareBasis: 'J', class: 'J' }] }],
    }
  ];

  let filteredOffers = mockApiOffers;

  // Apply non-stop filter (Amadeus API would ideally handle this via request params)
  filteredOffers = filteredOffers.filter(offer =>
    offer.itineraries.every(itinerary =>
      itinerary.segments.every(segment => segment.numberOfStops === 0)
    )
  );

  // Apply maxPrice filter
  if (maxPrice !== undefined) {
    filteredOffers = filteredOffers.filter(offer => parseFloat(offer.price.total) <= maxPrice);
  }

  return Promise.resolve(filteredOffers);
};

// Function to map Amadeus offer to our DB schema
const mapAmadeusToDbSchema = (offer: AmadeusFlightOffer, tripRequestId: string): FlightOfferV2Insert => {
  const firstItinerary = offer.itineraries[0];
  const lastItinerary = offer.itineraries.length > 1 ? offer.itineraries[offer.itineraries.length - 1] : null;

  const firstSegment = firstItinerary.segments[0];
  const lastSegmentOfFirstItinerary = firstItinerary.segments[firstItinerary.segments.length - 1];

  let returnDt = null;
  if (lastItinerary && !offer.oneWay) {
    const firstSegmentOfLastItinerary = lastItinerary.segments[0];
    returnDt = new Date(firstSegmentOfLastItinerary.departure.at).toISOString();
  }

  const travelerPricing = offer.travelerPricings[0]; // Assuming single adult traveler for simplicity
  const fareDetails = travelerPricing.fareDetailsBySegment[0];

  return {
    trip_request_id: tripRequestId,
    mode: 'AUTO',
    price_total: parseFloat(offer.price.total),
    price_currency: offer.price.currency,
    bags_included: !!(fareDetails.includedCheckedBags && fareDetails.includedCheckedBags.quantity > 0),
    cabin_class: fareDetails.cabin || null,
    nonstop: offer.itineraries.every(it => it.segments.every(s => s.numberOfStops === 0)),
    origin_iata: firstSegment.departure.iataCode,
    destination_iata: lastSegmentOfFirstItinerary.arrival.iataCode, // For one-way or first leg of round-trip
    depart_dt: new Date(firstSegment.departure.at).toISOString(),
    return_dt: returnDt,
    external_offer_id: offer.id,
    raw_offer_payload: offer as Record<string, any>, // Store the whole Amadeus offer
  };
};


serve(async (req: Request) => {
  // Ensure CORS headers are set for all responses, including errors
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*', // Or specific origins
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS', // Specify methods
  };

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );

    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'Method not allowed' }), {
        status: 405,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const payload: FlightSearchRequest = await req.json();
    const { tripRequestId, maxPrice } = payload;

    if (!tripRequestId) {
      return new Response(JSON.stringify({ error: 'tripRequestId is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // In a real app, you'd fetch trip details (origin, dest, dates) from your DB using tripRequestId
    // For now, we pass tripRequestId and maxPrice to the mock Amadeus fetcher.
    const amadeusOffers = await fetchAmadeusOffers(tripRequestId, maxPrice);

    if (amadeusOffers.length === 0) {
      return new Response(JSON.stringify({ inserted: 0, message: 'No flight offers found from Amadeus matching criteria.' }), {
        status: 200, // Or 404 if preferred for "not found"
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const offersToInsert = amadeusOffers.map(offer => mapAmadeusToDbSchema(offer, tripRequestId));

    // Insert into Supabase
    const { data, error, count } = await supabaseClient
      .from('flight_offers_v2')
      .insert(offersToInsert)
      .select(); // .select() is important to get the count of inserted rows correctly

    if (error) {
      console.error('Supabase insert error:', error);
      throw error; // Will be caught by the outer try/catch
    }

    const insertedCount = count ?? 0;

    return new Response(
      JSON.stringify({ inserted: insertedCount, message: `Successfully inserted ${insertedCount} flight offers.` }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );
  } catch (error) {
    console.error('Edge function error:', error);
    return new Response(JSON.stringify({ message: `Error: ${error.message}` }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

/*
Test Plan (Conceptual - to be implemented in a separate test file if Deno test runner is used)

1. Mock Supabase client (`createClient`)
   - Mock `from().insert().select()` to simulate successful insertion and return a count.
   - Mock it to simulate an error during insertion.
2. Mock `fetchAmadeusOffers`
   - Mock it to return a list of Amadeus-like offers.
   - Mock it to return an empty list.
   - Mock it to throw an error.
3. Test scenarios:
   - Successful request: valid tripRequestId, Amadeus returns offers, Supabase insert succeeds.
     - Verify: Correct response ({ inserted: N, message: ... }), status 200.
     - Verify: `fetchAmadeusOffers` called with correct params.
     - Verify: Supabase client `insert` called with correctly mapped offers.
   - Amadeus returns no offers:
     - Verify: Response { inserted: 0, message: "No flight offers..." }, status 200.
   - Missing tripRequestId in payload:
     - Verify: Response { error: "tripRequestId is required" }, status 400.
   - Non-POST request method:
     - Verify: Response { error: "Method not allowed" }, status 405.
   - Amadeus API error:
     - Verify: Response { message: "Error: ..." }, status 500.
   - Supabase insert error:
     - Verify: Response { message: "Error: ..." }, status 500.
   - CORS preflight (OPTIONS request):
     - Verify: Status 200, correct CORS headers.

Supabase Table `flight_offers_v2` schema assumption (matches FlightOfferV2Insert + DB auto-fields):
  - id: uuid (primary key, default: gen_random_uuid())
  - trip_request_id: uuid (foreign key to trip_requests.id)
  - mode: text (e.g., 'AUTO', 'MANUAL')
  - price_total: numeric
  - price_currency: text (e.g., 'USD')
  - price_carry_on: numeric (nullable)
  - bags_included: boolean
  - cabin_class: text (nullable)
  - nonstop: boolean
  - origin_iata: text
  - destination_iata: text
  - depart_dt: timestamptz
  - return_dt: timestamptz (nullable)
  - external_offer_id: text (nullable, for Amadeus offer ID)
  - raw_offer_payload: jsonb (nullable, to store full Amadeus response)
  - created_at: timestamptz (default: now())

Environment Variables needed for the function:
  - SUPABASE_URL
  - SUPABASE_ANON_KEY
  (And potentially AMADEUS_CLIENT_ID, AMADEUS_CLIENT_SECRET for a real Amadeus client)
*/

