
 RUN  v3.2.4 /Users/parkerbarnett/github-link-up-buddy

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > renders all form fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:01.202Z[39m,
    latestReturn: [35m2025-07-21T06:50:01.202Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:01.202Z[39m,
    latestReturn: [35m2025-07-21T06:50:01.202Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'J'[39m ],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    origin: {
      message: [32m'At least one departure airport must be selected'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should render the form with basic elements
[INFO] [PaymentMethodsKMS] Fetching payment methods

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    origin: {
      message: [32m'At least one departure airport must be selected'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    origin: {
      message: [32m'At least one departure airport must be selected'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [],
    destination: [32m'L'[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    origin: {
      message: [32m'At least one departure airport must be selected'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    },
    destination: {
      message: [32m'Please provide a destination'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > displays validation errors for empty required fields
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    origin: {
      message: [32m'At least one departure airport must be selected'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    },
    destination: {
      message: [32m'Please provide a destination'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:03.413Z[39m,
    latestReturn: [35m2025-07-21T06:50:03.413Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > submits form with valid data
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:04.911Z[39m,
    latestReturn: [35m2025-07-21T06:50:04.911Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:04.911Z[39m,
    latestReturn: [35m2025-07-21T06:50:04.911Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mtrue[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:04.911Z[39m,
    latestReturn: [35m2025-07-21T06:50:04.911Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > submits form with valid data
Form submitted with data: {
  origin: [ [32m'JFK'[39m ],
  destination: [32m'LAX'[39m,
  earliestOutbound: [35m2025-07-15T06:50:04.911Z[39m,
  latestReturn: [35m2025-07-21T06:50:04.911Z[39m,
  cabinClass: [32m'economy'[39m,
  budget: [33m800[39m,
  autoBookEnabled: [33mfalse[39m
}
Form is valid: [33mfalse[39m
Form errors: {}
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mtrue[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:04.911Z[39m,
    latestReturn: [35m2025-07-21T06:50:04.911Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > submits form with valid data
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:04.911Z[39m,
    latestReturn: [35m2025-07-21T06:50:04.911Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates return date is after outbound date
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.348Z[39m,
    latestReturn: [35m2025-07-14T06:50:05.349Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.348Z[39m,
    latestReturn: [35m2025-07-14T06:50:05.349Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates return date is after outbound date
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    latestReturn: {
      message: [32m'Latest return date must be after earliest outbound date'[39m,
      type: [32m'custom'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.348Z[39m,
    latestReturn: [35m2025-07-14T06:50:05.349Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > allows selection of different cabin classes
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.664Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.664Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.664Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.664Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > allows selection of different cabin classes
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.664Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.664Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > allows selection of different cabin classes
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.664Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.664Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m800[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should render form input fields
[INFO] [PaymentMethodsKMS] Fetching payment methods

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'J'[39m ],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'L'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    budget: {
      message: [32m'Budget must be at least $100'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m50[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    budget: {
      message: [32m'Budget must be at least $100'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m50[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > validates budget is within acceptable range
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    budget: {
      message: [32m'Budget must be at least $100'[39m,
      type: [32m'too_small'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2025-07-15T06:50:05.972Z[39m,
    latestReturn: [35m2025-07-21T06:50:05.972Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m50[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should allow selecting cabin class
[INFO] [PaymentMethodsKMS] Fetching payment methods

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > populates form with default values correctly
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m, [32m'LGA'[39m ],
    destination: [32m'SFO'[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.037Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.037Z[39m,
    cabinClass: [32m'business'[39m,
    budget: [33m2000[39m,
    autoBookEnabled: [33mtrue[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [ [32m'JFK'[39m, [32m'LGA'[39m ],
    destination: [32m'SFO'[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.037Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.037Z[39m,
    cabinClass: [32m'business'[39m,
    budget: [33m2000[39m,
    autoBookEnabled: [33mtrue[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > handles auto-booking enabled state
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.397Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.397Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mtrue[39m,
    paymentMethodId: [32m'pm_test_123'[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.397Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.397Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mtrue[39m,
    paymentMethodId: [32m'pm_test_123'[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.514Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.514Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mfalse[39m,
  values: {
    origin: [],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.514Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'J'[39m ],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.514Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m''[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.514Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'L'[39m,
    earliestOutbound: [35m2025-07-15T06:50:07.514Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mtrue[39m,
  errors: {},
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2020-01-01T00:00:00.000Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    earliestOutbound: {
      message: [32m'Earliest outbound date must be in the future'[39m,
      type: [32m'custom'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2020-01-01T00:00:00.000Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    earliestOutbound: {
      message: [32m'Earliest outbound date must be in the future'[39m,
      type: [32m'custom'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2020-01-01T00:00:00.000Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

stdout | src/components/forms/FlightRuleForm.test.tsx > FlightRuleForm > prevents submission with dates in the past
Form validation state: {
  isValid: [33mfalse[39m,
  errors: {
    earliestOutbound: {
      message: [32m'Earliest outbound date must be in the future'[39m,
      type: [32m'custom'[39m,
      ref: [36m[Object][39m
    }
  },
  isSubmitting: [33mfalse[39m,
  isDirty: [33mtrue[39m,
  values: {
    origin: [ [32m'JFK'[39m ],
    destination: [32m'LAX'[39m,
    earliestOutbound: [35m2020-01-01T00:00:00.000Z[39m,
    latestReturn: [35m2025-07-21T06:50:07.514Z[39m,
    cabinClass: [32m'economy'[39m,
    budget: [33m500[39m,
    autoBookEnabled: [33mfalse[39m
  }
}

 ✓ src/components/forms/FlightRuleForm.test.tsx (9 tests) 7551ms
   ✓ FlightRuleForm > renders all form fields  2243ms
   ✓ FlightRuleForm > displays validation errors for empty required fields  1585ms
   ✓ FlightRuleForm > submits form with valid data  436ms
   ✓ FlightRuleForm > validates return date is after outbound date  316ms
   ✓ FlightRuleForm > allows selection of different cabin classes  307ms
   ✓ FlightRuleForm > validates budget is within acceptable range  1065ms
   ✓ FlightRuleForm > populates form with default values correctly  361ms
   ✓ FlightRuleForm > prevents submission with dates in the past  1090ms
stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should have submit button disabled initially
[INFO] [PaymentMethodsKMS] Fetching payment methods

stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should render date input fields
[INFO] [PaymentMethodsKMS] Fetching payment methods

stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should allow filling out basic form fields
[INFO] [PaymentMethodsKMS] Fetching payment methods

stdout | src/tests/components/TripRequestForm.simple.test.tsx > TripRequestForm - Basic Functionality > should render form sections
[INFO] [PaymentMethodsKMS] Fetching payment methods

 ✓ src/tests/components/TripRequestForm.simple.test.tsx (7 tests) 10034ms
   ✓ TripRequestForm - Basic Functionality > should render the form with basic elements  2542ms
   ✓ TripRequestForm - Basic Functionality > should render form input fields  1612ms
   ✓ TripRequestForm - Basic Functionality > should allow selecting cabin class  1207ms
   ✓ TripRequestForm - Basic Functionality > should have submit button disabled initially  1678ms
   ✓ TripRequestForm - Basic Functionality > should render date input fields  712ms
   ✓ TripRequestForm - Basic Functionality > should allow filling out basic form fields  1150ms
   ✓ TripRequestForm - Basic Functionality > should render form sections  1124ms
stdout | src/tests/components/TripRequestForm.best-practices.test.tsx > TripRequestForm - Best Practices Implementation > Form Submission with Mocked Dates (Best Practice) > should submit successfully with programmatically set dates
✅ Simulating date setting without calendar interaction

 ✓ tests/unit/components/CampaignForm.test.tsx (12 tests) 5393ms
   ✓ CampaignForm Analytics Integration > should initialize analytics with correct form configuration  1022ms
   ✓ CampaignForm Analytics Integration > should track field interactions on input changes  612ms
   ✓ CampaignForm Analytics Integration > should track field errors for invalid business rule values  1060ms
   ✓ CampaignForm Analytics Integration > should track form submission with correct data  544ms
   ✓ CampaignForm Analytics Integration > should only show cabin classes allowed by configuration  541ms
   ✓ CampaignForm Business Rules Validation > should enforce config-driven minimum price  342ms
stdout | src/tests/components/TripRequestForm.best-practices.test.tsx > TripRequestForm - Best Practices Implementation > Auto-booking Validation (Business Logic Focus) > should validate auto-booking requires payment method
✅ Simulating date setting without calendar interaction

stdout | src/tests/pages/Dashboard.test.tsx > Dashboard Page > 2. Renders "Active Watches" tab by default when authenticated
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mfalse[39m,
    interactionType: [32m'static'[39m,
    abTestVariant: [90mundefined[39m,
    isPersonalized: [90mundefined[39m
  },
  timestamp: [35m2025-07-14T06:50:20.282Z[39m,
  userId: [32m'user-123'[39m
}

stdout | src/tests/pages/Dashboard.test.tsx > Dashboard Page > 3. Switches to "My Trips" tab, renders TripHistory component with userId
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mfalse[39m,
    interactionType: [32m'static'[39m,
    abTestVariant: [90mundefined[39m,
    isPersonalized: [90mundefined[39m
  },
  timestamp: [35m2025-07-14T06:50:20.883Z[39m,
  userId: [32m'user-123'[39m
}

stdout | src/tests/pages/Dashboard.test.tsx > Dashboard Page > 4. Switches back to "Active Watches" tab
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mfalse[39m,
    interactionType: [32m'static'[39m,
    abTestVariant: [90mundefined[39m,
    isPersonalized: [90mundefined[39m
  },
  timestamp: [35m2025-07-14T06:50:21.683Z[39m,
  userId: [32m'user-123'[39m
}

 ✓ src/tests/pages/Dashboard.test.tsx (5 tests) 3429ms
   ✓ Dashboard Page > 1. Renders loading state initially  391ms
   ✓ Dashboard Page > 2. Renders "Active Watches" tab by default when authenticated  1451ms
   ✓ Dashboard Page > 3. Switches to "My Trips" tab, renders TripHistory component with userId  768ms
   ✓ Dashboard Page > 4. Switches back to "Active Watches" tab  794ms
 ✓ src/components/filtering/__tests__/frontend-integration.test.tsx (22 tests) 3813ms
   ✓ Phase 3: Frontend Integration Tests > AdvancedFilterControls Component > should render filter controls correctly  1208ms
   ✓ Phase 3: Frontend Integration Tests > AdvancedFilterControls Component > should call onFiltersChange when budget slider changes  455ms
   ✓ Phase 3: Frontend Integration Tests > AdvancedFilterControls Component > should call onFiltersChange when nonstop switch is toggled  378ms
   ✓ Phase 3: Frontend Integration Tests > AdvancedFilterControls Component > should call onFiltersChange when pipeline type changes  341ms
   ✓ Phase 3: Frontend Integration Tests > Performance and UX > should debounce filter updates to prevent excessive API calls  494ms
 ✓ src/tests/components/TripRequestForm.mode.final.test.tsx (5 tests) 5804ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI by default  3110ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI when mode=manual  930ms
   ✓ TripRequestForm Mode Handling > should show auto mode UI when mode=auto  466ms
   ✓ TripRequestForm Mode Handling > should show step indicator in auto mode  729ms
   ✓ TripRequestForm Mode Handling > should show different sections in auto mode step 1  564ms
 ✓ src/tests/components/TripRequestForm.mode.fixed.test.tsx (5 tests) 5811ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI by default  3040ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI when mode=manual  885ms
   ✓ TripRequestForm Mode Handling > should show auto mode UI when mode=auto  640ms
   ✓ TripRequestForm Mode Handling > should show step indicator in auto mode  675ms
   ✓ TripRequestForm Mode Handling > should show different sections in auto mode step 1  567ms
 ✓ tests/unit/components/TripRequestForm.test.tsx (5 tests) 6523ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI by default  2959ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI when mode=manual  972ms
   ✓ TripRequestForm Mode Handling > should show auto mode UI when mode=auto  575ms
   ✓ TripRequestForm Mode Handling > should show step indicator in auto mode  760ms
   ✓ TripRequestForm Mode Handling > should show different sections in auto mode step 1  1162ms
stdout | src/tests/components/TripRequestForm.best-practices.test.tsx > TripRequestForm - Best Practices Implementation > Date Range Validation (Programmatic Testing) > should accept valid future date ranges
✅ Simulating date setting without calendar interaction

stdout | src/tests/components/TripRequestForm.working-demo.test.tsx > Calendar Testing Solution - Working Demo > should demonstrate filter toggle testing (simple UI testing)
✅ Focus on business logic validation rather than complex UI interactions!

stdout | src/tests/components/TripRequestForm.working-demo.test.tsx > Calendar Testing Solution - Working Demo > should demonstrate filter toggle testing (simple UI testing)
✅ Simple UI interactions (like switches) remain testable and reliable.

 ✓ src/tests/components/TripRequestForm.mode.test.tsx (5 tests) 8008ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI by default  4103ms
   ✓ TripRequestForm Mode Handling > should show manual mode UI when mode=manual  1599ms
   ✓ TripRequestForm Mode Handling > should show auto mode UI when mode=auto  775ms
   ✓ TripRequestForm Mode Handling > should show step indicator in auto mode  803ms
   ✓ TripRequestForm Mode Handling > should show different sections in auto mode step 1  725ms
stdout | src/tests/components/TripRequestForm.working-demo.test.tsx > Calendar Testing Solution - Working Demo > should focus on business logic validation rather than UI implementation
✅ Focus on testing business logic (validation rules) rather than UI implementation details.

 ❯ src/tests/components/TripRequestForm.working-demo.test.tsx (4 tests | 1 failed) 8969ms
   × Calendar Testing Solution - Working Demo > should successfully test form logic without complex UI interactions 5174ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ Calendar Testing Solution - Working Demo > should demonstrate filter toggle testing (simple UI testing)  2585ms
   ✓ Calendar Testing Solution - Working Demo > should focus on business logic validation rather than UI implementation  1204ms
   ✓ Migration Strategy Summary > should document the complete solution approach 1ms
stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Submission Logic > should populate destination_location_code from destination_airport if omitted
[TEST] Filling form fields: MVY, SFO, $1200

stdout | src/tests/components/TripRequestForm.isolated.test.tsx > TripRequestForm - Isolated Core Tests > should fill destination using direct input approach
Destination selection failed, which is expected in this test context

stdout | src/tests/components/TripRequestForm.best-practices.test.tsx > TripRequestForm - Best Practices Implementation > Filter Toggle Logic (UI State Testing) > should toggle nonstop flights filter
✅ Simulating date setting without calendar interaction

 ✓ src/tests/components/TripRequestForm.isolated.test.tsx (6 tests) 13859ms
   ✓ TripRequestForm - Isolated Core Tests > should render the form with basic elements  3231ms
   ✓ TripRequestForm - Isolated Core Tests > should enable auto-booking toggle and show payment method selection  2905ms
   ✓ TripRequestForm - Isolated Core Tests > should fill destination using direct input approach  4145ms
   ✓ TripRequestForm - Isolated Core Tests > should show filter toggles section when expanded  1024ms
   ✓ TripRequestForm - Isolated Core Tests > should find form input fields  837ms
   ✓ TripRequestForm - Isolated Core Tests > should handle form field changes  1687ms
stdout | tests/unit/pages/Dashboard.test.tsx > Dashboard Page > 2. Renders "Active Watches" tab by default when authenticated
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mtrue[39m,
    interactionType: [32m'static'[39m,
    abTestVariant: [32m'treatment'[39m,
    isPersonalized: [33mtrue[39m
  },
  timestamp: [35m2025-07-14T06:50:35.812Z[39m,
  userId: [32m'user-123'[39m
}

stdout | tests/unit/pages/Dashboard.test.tsx > Dashboard Page > 3. Switches to "My Trips" tab, renders TripHistory component with userId
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mtrue[39m,
    interactionType: [32m'static'[39m,
    abTestVariant: [32m'treatment'[39m,
    isPersonalized: [33mtrue[39m
  },
  timestamp: [35m2025-07-14T06:50:36.533Z[39m,
  userId: [32m'user-123'[39m
}

stdout | tests/unit/pages/Dashboard.test.tsx > Dashboard Page > 4. Switches back to "Active Watches" tab
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mtrue[39m,
    interactionType: [32m'static'[39m,
    abTestVariant: [32m'treatment'[39m,
    isPersonalized: [33mtrue[39m
  },
  timestamp: [35m2025-07-14T06:50:37.172Z[39m,
  userId: [32m'user-123'[39m
}

 ✓ tests/unit/pages/Dashboard.test.tsx (5 tests) 3594ms
   ✓ Dashboard Page > 1. Renders loading state initially  397ms
   ✓ Dashboard Page > 2. Renders "Active Watches" tab by default when authenticated  1594ms
   ✓ Dashboard Page > 3. Switches to "My Trips" tab, renders TripHistory component with userId  870ms
   ✓ Dashboard Page > 4. Switches back to "Active Watches" tab  628ms
 ✓ src/tests/components/dashboard/TripHistory.test.tsx (5 tests) 2451ms
   ✓ TripHistory Component > 4. Renders booking history in a table with correct data and links  1936ms
stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should display FlagDisabledPlaceholder when feature is not enabled
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mfalse[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should display loading skeleton when isLoading is true and feature is enabled
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mtrue[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should show payment method selection when auto-booking is enabled and prerequisites are met
[TEST] Form fields filled successfully

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should display error message and retry button when error occurs and feature is enabled
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mfalse[39m,
  error: [32m'Failed to fetch offers'[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should display "No Offers Found Yet" empty state card when no offers and not loading/error, and feature is enabled
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

 ✓ tests/unit/components/dashboard/TripHistory.test.tsx (5 tests) 2403ms
   ✓ TripHistory Component > 1. Shows loading state initially  495ms
   ✓ TripHistory Component > 4. Renders booking history in a table with correct data and links  1678ms
stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should display flight offers cards when offers are available and feature is enabled
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m2[39m,
  offersData: [
    {
      id: [32m'offer-1'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'AUTO'[39m,
      priceTotal: [33m199.99[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m25[39m,
      bagsIncluded: [33mtrue[39m,
      cabinClass: [32m'ECONOMY'[39m,
      nonstop: [33mtrue[39m,
      originIata: [32m'JFK'[39m,
      destinationIata: [32m'LAX'[39m,
      departDt: [32m'2024-12-01T10:00:00Z'[39m,
      returnDt: [32m'2024-12-03T15:00:00Z'[39m,
      seatPref: [32m'AISLE'[39m,
      createdAt: [32m'2024-07-01T00:00:00Z'[39m
    },
    {
      id: [32m'offer-2'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'MANUAL'[39m,
      priceTotal: [33m299.5[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m0[39m,
      bagsIncluded: [33mfalse[39m,
      cabinClass: [32m'BUSINESS'[39m,
      nonstop: [33mfalse[39m,
      originIata: [32m'SFO'[39m,
      destinationIata: [32m'MIA'[39m,
      departDt: [32m'2024-12-05T12:30:00Z'[39m,
      returnDt: [32m'2024-12-10T15:00:00Z'[39m,
      seatPref: [1mnull[22m,
      createdAt: [32m'2024-07-02T00:00:00Z'[39m
    }
  ],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should format currency correctly (e.g., EUR)
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m1[39m,
  offersData: [
    {
      id: [32m'offer-1'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'AUTO'[39m,
      priceTotal: [33m150[39m,
      priceCurrency: [32m'EUR'[39m,
      priceCarryOn: [33m25[39m,
      bagsIncluded: [33mtrue[39m,
      cabinClass: [32m'ECONOMY'[39m,
      nonstop: [33mtrue[39m,
      originIata: [32m'JFK'[39m,
      destinationIata: [32m'LAX'[39m,
      departDt: [32m'2024-12-01T10:00:00Z'[39m,
      returnDt: [32m'2024-12-03T15:00:00Z'[39m,
      seatPref: [32m'AISLE'[39m,
      createdAt: [32m'2024-07-01T00:00:00Z'[39m
    }
  ],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should format dates correctly, including return date if present, and handle invalid dates gracefully
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m3[39m,
  offersData: [
    {
      id: [32m'offer-valid-no-return'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'AUTO'[39m,
      priceTotal: [33m199.99[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m25[39m,
      bagsIncluded: [33mtrue[39m,
      cabinClass: [32m'ECONOMY'[39m,
      nonstop: [33mtrue[39m,
      originIata: [32m'DT1'[39m,
      destinationIata: [32m'LAX'[39m,
      departDt: [32m'2024-12-01T10:00:00Z'[39m,
      returnDt: [32m'2024-12-03T15:00:00Z'[39m,
      seatPref: [32m'AISLE'[39m,
      createdAt: [32m'2024-07-01T00:00:00Z'[39m
    },
    {
      id: [32m'offer-valid-with-return'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'MANUAL'[39m,
      priceTotal: [33m299.5[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m0[39m,
      bagsIncluded: [33mfalse[39m,
      cabinClass: [32m'BUSINESS'[39m,
      nonstop: [33mfalse[39m,
      originIata: [32m'DT2'[39m,
      destinationIata: [32m'MIA'[39m,
      departDt: [32m'2024-12-05T12:30:00Z'[39m,
      returnDt: [32m'2024-12-10T15:00:00Z'[39m,
      seatPref: [1mnull[22m,
      createdAt: [32m'2024-07-02T00:00:00Z'[39m
    },
    {
      id: [32m'offer-invalid-date'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'AUTO'[39m,
      priceTotal: [33m199.99[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m25[39m,
      bagsIncluded: [33mtrue[39m,
      cabinClass: [32m'ECONOMY'[39m,
      nonstop: [33mtrue[39m,
      originIata: [32m'INV'[39m,
      destinationIata: [32m'LID'[39m,
      departDt: [32m'invalid-date-string'[39m,
      returnDt: [32m'2024-12-05T15:00:00Z'[39m,
      seatPref: [32m'AISLE'[39m,
      createdAt: [32m'2024-07-01T00:00:00Z'[39m
    }
  ],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should call refetch when the main "Refresh Offers" button (data state) is clicked
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m2[39m,
  offersData: [
    {
      id: [32m'offer-1'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'AUTO'[39m,
      priceTotal: [33m199.99[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m25[39m,
      bagsIncluded: [33mtrue[39m,
      cabinClass: [32m'ECONOMY'[39m,
      nonstop: [33mtrue[39m,
      originIata: [32m'JFK'[39m,
      destinationIata: [32m'LAX'[39m,
      departDt: [32m'2024-12-01T10:00:00Z'[39m,
      returnDt: [32m'2024-12-03T15:00:00Z'[39m,
      seatPref: [32m'AISLE'[39m,
      createdAt: [32m'2024-07-01T00:00:00Z'[39m
    },
    {
      id: [32m'offer-2'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'MANUAL'[39m,
      priceTotal: [33m299.5[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m0[39m,
      bagsIncluded: [33mfalse[39m,
      cabinClass: [32m'BUSINESS'[39m,
      nonstop: [33mfalse[39m,
      originIata: [32m'SFO'[39m,
      destinationIata: [32m'MIA'[39m,
      departDt: [32m'2024-12-05T12:30:00Z'[39m,
      returnDt: [32m'2024-12-10T15:00:00Z'[39m,
      seatPref: [1mnull[22m,
      createdAt: [32m'2024-07-02T00:00:00Z'[39m
    }
  ],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should call refetch when "Refresh Offers" button (empty state) is clicked
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should show loading skeleton, then data (simulating data fetch lifecycle)
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mtrue[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m2[39m,
  offersData: [
    {
      id: [32m'offer-1'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'AUTO'[39m,
      priceTotal: [33m199.99[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m25[39m,
      bagsIncluded: [33mtrue[39m,
      cabinClass: [32m'ECONOMY'[39m,
      nonstop: [33mtrue[39m,
      originIata: [32m'JFK'[39m,
      destinationIata: [32m'LAX'[39m,
      departDt: [32m'2024-12-01T10:00:00Z'[39m,
      returnDt: [32m'2024-12-03T15:00:00Z'[39m,
      seatPref: [32m'AISLE'[39m,
      createdAt: [32m'2024-07-01T00:00:00Z'[39m
    },
    {
      id: [32m'offer-2'[39m,
      tripRequestId: [32m'trip-1'[39m,
      mode: [32m'MANUAL'[39m,
      priceTotal: [33m299.5[39m,
      priceCurrency: [32m'USD'[39m,
      priceCarryOn: [33m0[39m,
      bagsIncluded: [33mfalse[39m,
      cabinClass: [32m'BUSINESS'[39m,
      nonstop: [33mfalse[39m,
      originIata: [32m'SFO'[39m,
      destinationIata: [32m'MIA'[39m,
      departDt: [32m'2024-12-05T12:30:00Z'[39m,
      returnDt: [32m'2024-12-10T15:00:00Z'[39m,
      seatPref: [1mnull[22m,
      createdAt: [32m'2024-07-02T00:00:00Z'[39m
    }
  ],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

stdout | src/pages/TripOffersV2.test.tsx > TripOffersV2 Component > should show loading skeleton, then empty state (simulating empty data fetch lifecycle)
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mtrue[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}
[TripOffersV2] Debug info: {
  tripId: [32m'test-trip-id'[39m,
  offers: [33m0[39m,
  offersData: [],
  isLoading: [33mfalse[39m,
  error: [90mundefined[39m,
  isFeatureEnabled: [33mtrue[39m
}

 ✓ src/pages/TripOffersV2.test.tsx (11 tests) 1965ms
   ✓ TripOffersV2 Component > should display FlagDisabledPlaceholder when feature is not enabled  398ms
   ✓ TripOffersV2 Component > should display error message and retry button when error occurs and feature is enabled  754ms
 ✓ src/tests/components/ConstraintChips.refactored.test.tsx (12 tests) 2048ms
   ✓ ConstraintChips (Refactored) > Component rendering with semantic elements > should render all chips with proper accessibility roles  501ms
   ✓ ConstraintChips (Refactored) > User interactions > should call onToggleNonStop when non-stop button is clicked  707ms
 ❯ src/tests/components/TripRequestForm.best-practices.test.tsx (9 tests | 5 failed) 38367ms
   ✓ TripRequestForm - Best Practices Implementation > Form Validation Logic (Recommended Focus) > should validate that required date fields enable form submission  3382ms
   ✓ TripRequestForm - Best Practices Implementation > Form Validation Logic (Recommended Focus) > should prevent submission when dates are missing  4768ms
   × TripRequestForm - Best Practices Implementation > Form Submission with Mocked Dates (Best Practice) > should submit successfully with programmatically set dates 5206ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Best Practices Implementation > Auto-booking Validation (Business Logic Focus) > should validate auto-booking requires payment method 5274ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Best Practices Implementation > Auto-booking Validation (Business Logic Focus) > should submit successfully with auto-booking when all requirements are met 5838ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Best Practices Implementation > Date Range Validation (Programmatic Testing) > should accept valid future date ranges 5131ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Best Practices Implementation > Filter Toggle Logic (UI State Testing) > should toggle nonstop flights filter 4473ms
     → Unable to find role="switch" and name `/nonstop flights only/i`

Ignored nodes: comments, script, style
[36m<body[39m
  [33mstyle[39m=[32m""[39m
[36m>[39m
  [36m<div>[39m
    [36m<div[39m
      [33mclass[39m=[32m"min-h-screen bg-gray-50 p-4"[39m
    [36m>[39m
      [36m<div[39m
        [33mclass[39m=[32m"container mx-auto py-8 space-y-6"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"mb-8"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"text-center max-w-2xl mx-auto"[39m
          [36m>[39m
            [36m<h1[39m
              [33mclass[39m=[32m"text-4xl font-bold text-gray-900 mb-3"[39m
            [36m>[39m
              [0mSearch Live Flights[0m
            [36m</h1>[39m
            [36m<p[39m
              [33mclass[39m=[32m"text-lg text-gray-600 leading-relaxed"[39m
            [36m>[39m
              [0mSearch real-time flight availability (Amadeus-powered)[0m
            [36m</p>[39m
          [36m</div>[39m
        [36m</div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"grid gap-6 grid-cols-1"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"col-span-1"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"bg-white rounded-xl border border-gray-200 shadow-lg"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"p-8"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200"[39m
                [36m>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"flex items-start gap-3"[39m
                  [36m>[39m
                    [36m<svg[39m
                      [33mclass[39m=[32m"lucide lucide-search h-5 w-5 text-blue-600 mt-0.5"[39m
                      [33mfill[39m=[32m"none"[39m
                      [33mheight[39m=[32m"24"[39m
                      [33mstroke[39m=[32m"currentColor"[39m
                      [33mstroke-linecap[39m=[32m"round"[39m
                      [33mstroke-linejoin[39m=[32m"round"[39m
                      [33mstroke-width[39m=[32m"2"[39m
                      [33mviewBox[39m=[32m"0 0 24 24"[39m
                      [33mwidth[39m=[32m"24"[39m
                      [33mxmlns[39m=[32m"http://www.w3.org/2000/svg"[39m
                    [36m>[39m
                      [36m<circle[39m
                        [33mcx[39m=[32m"11"[39m
                        [33mcy[39m=[32m"11"[39m
                        [33mr[39m=[32m"8"[39m
                      [36m/>[39m
                      [36m<path[39m
                        [33md[39m=[32m"m21 21-4.3-4.3"[39m
                      [36m/>[39m
                    [36m</svg>[39m
                    [36m<div>[39m
                      [36m<h3[39m
                        [33mclass[39m=[32m"font-medium text-blue-900"[39m
                      [36m>[39m
                        [0mLive Flight Search[0m
                      [36m</h3>[39m
                      [36m<p[39m
                        [33mclass[39m=[32m"text-sm text-blue-700 mt-1"[39m
                      [36m>[39m
                        [0mWe'll search real-time flight availability using Amadeus and show you current prices and booking options.[0m
                      [36m</p>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
                [36m<form[39m
                  [33mclass[39m=[32m"space-y-6"[39m
                [36m>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"space-y-6 mb-8"[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"grid grid-cols-1 lg:grid-cols-2 gap-6"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"bg-blue-50/30 rounded-lg p-4 border border-blue-100"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"space-y-4"[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"space-y-2"[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"flex items-center gap-2"[39m
                            [36m>[39m
                              [36m<label[39m
                                [33mclass[39m=[32m"peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-base lg:text-lg font-bold text-gray-900"[39m
                                [33mfor[39m=[32m":rao:-form-item"[39m
                              [36m>[39m
                                [0mDestination[0m
                              [36m</label>[39m
                              [36m<svg[39m
                                [33mclass[39m=[32m"lucide lucide-circle-help h-4 w-4 text-gray-400 hover:text-gray-600 cursor-help"[39m
                                [33mdata-state[39m=[32m"closed"[39m
                                [33mfill[39m=[32m"none"[39m
                                [33mheight[39m=[32m"24"[39m
                                [33mstroke[39m=[32m"currentColor"[39m
                                [33mstroke-linecap[39m=[32m"round"[39m
                                [33mstroke-linejoin[39m=[32m"round"[39m
                                [33mstroke-width[39m=[32m"2"[39m
                                [33mviewBox[39m=[32m"0 0 24 24"[39m
                                [33mwidth[39m=[32m"24"[39m
                                [33mxmlns[39m=[32m"http://www.w3.org/2000/svg"[39m
                              [36m>[39m
                                [36m<circle[39m
                                  [33mcx[39m=[32m"12"[39m
                                  [33mcy[39m=[32m"12"[39m
                                  [33mr[39m=[32m"10"[39m
                                [36m/>[39m
                                [36m<path[39m
                                  [33md[39m=[32m"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"[39m
                                [36m/>[39m
                                [36m<path[39m
                                  [33md[39m=[32m"M12 17h.01"[39m
                                [36m/>[39m
                              [36m</svg>[39m
                            [36m</div>[39m
                            [36m<button[39m
                              [33maria-autocomplete[39m=[32m"none"[39m
                              [33maria-controls[39m=[32m"radix-:raq:"[39m
                              [33maria-describedby[39m=[32m":rao:-form-item-description"[39m
                              [33maria-expanded[39m...

Ignored nodes: comments, script, style
[36m<html>[39m
  [36m<head />[39m
  [36m<body[39m
    [33mstyle[39m=[32m""[39m
  [36m>[39m
    [36m<div>[39m
      [36m<div[39m
        [33mclass[39m=[32m"min-h-screen bg-gray-50 p-4"[39m
      [36m>[39m
        [36m<div[39m
          [33mclass[39m=[32m"container mx-auto py-8 space-y-6"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"mb-8"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"text-center max-w-2xl mx-auto"[39m
            [36m>[39m
              [36m<h1[39m
                [33mclass[39m=[32m"text-4xl font-bold text-gray-900 mb-3"[39m
              [36m>[39m
                [0mSearch Live Flights[0m
              [36m</h1>[39m
              [36m<p[39m
                [33mclass[39m=[32m"text-lg text-gray-600 leading-relaxed"[39m
              [36m>[39m
                [0mSearch real-time flight availability (Amadeus-powered)[0m
              [36m</p>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"grid gap-6 grid-cols-1"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"col-span-1"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"bg-white rounded-xl border border-gray-200 shadow-lg"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"p-8"[39m
                [36m>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200"[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"flex items-start gap-3"[39m
                    [36m>[39m
                      [36m<svg[39m
                        [33mclass[39m=[32m"lucide lucide-search h-5 w-5 text-blue-600 mt-0.5"[39m
                        [33mfill[39m=[32m"none"[39m
                        [33mheight[39m=[32m"24"[39m
                        [33mstroke[39m=[32m"currentColor"[39m
                        [33mstroke-linecap[39m=[32m"round"[39m
                        [33mstroke-linejoin[39m=[32m"round"[39m
                        [33mstroke-width[39m=[32m"2"[39m
                        [33mviewBox[39m=[32m"0 0 24 24"[39m
                        [33mwidth[39m=[32m"24"[39m
                        [33mxmlns[39m=[32m"http://www.w3.org/2000/svg"[39m
                      [36m>[39m
                        [36m<circle[39m
                          [33mcx[39m=[32m"11"[39m
                          [33mcy[39m=[32m"11"[39m
                          [33mr[39m=[32m"8"[39m
                        [36m/>[39m
                        [36m<path[39m
                          [33md[39m=[32m"m21 21-4.3-4.3"[39m
                        [36m/>[39m
                      [36m</svg>[39m
                      [36m<div>[39m
                        [36m<h3[39m
                          [33mclass[39m=[32m"font-medium text-blue-900"[39m
                        [36m>[39m
                          [0mLive Flight Search[0m
                        [36m</h3>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"text-sm text-blue-700 mt-1"[39m
                        [36m>[39m
                          [0mWe'll search real-time flight availability using Amadeus and show you current prices and booking options.[0m
                        [36m</p>[39m
                      [36m</div>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                  [36m<form[39m
                    [33mclass[39m=[32m"space-y-6"[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"space-y-6 mb-8"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"grid grid-cols-1 lg:grid-cols-2 gap-6"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"bg-blue-50/30 rounded-lg p-4 border border-blue-100"[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"space-y-4"[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"space-y-2"[39m
                            [36m>[39m
                              [36m<div[39m
                                [33mclass[39m=[32m"flex items-center gap-2"[39m
                              [36m>[39m
                                [36m<label[39m
                                  [33mclass[39m=[32m"peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-base lg:text-lg font-bold text-gray-900"[39m
                                  [33mfor[39m=[32m":rao:-form-item"[39m
                                [36m>[39m
                                  [0mDestination[0m
                                [36m</label>[39m
                                [36m<svg[39m
                                  [33mclass[39m=[32m"lucide lucide-circle-help h-4 w-4 text-gray-400 hover:text-gray-600 cursor-help"[39m
                                  [33mdata-state[39m=[32m"closed"[39m
                                  [33mfill[39m=[32m"none"[39m
                                  [33mheight[39m=[32m"24"[39m
                                  [33mstroke[39m=[32m"currentColor"[39m
                                  [33mstroke-linecap[39m=[32m"round"[39m
                                  [33mstroke-linejoin[39m=[32m"round"[39m
                                  [33mstroke-width[39m=[32m"2"[39m
                                  [33mviewBox[39m=[32m"0 0 24 24"[39m
                                  [33mwidth[39m=[32m"24"[39m
                                  [33mxmlns[39m=[32m"http://www.w3.org/2000/svg"[39m
                                [36m>[39m
                                  [36m<circle[39m
                                    [33mcx[39m=[32m"12"[39m
                                    [33mcy[39m=[32m"12"[39m
                                    [33mr[39m=[32m"10"[39m
                                  [36m/>[39m
                                  [36m<path[39m
                                    [33md[39m=[32m"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"[39m
                                  [36m/>[39m
                                  [36m<path[39m
                                    [33md[39m=[32m"M12 17h.01"[39m
                                  [36m/>[39m
                                [36m</svg>[39m
                              [36m</div>[39m
                              [36m<button...
   ✓ TripRequestForm - Best Practices Implementation > Filter Toggle Logic (UI State Testing) > should toggle baggage filter  4288ms
   ✓ Migration Notes for Existing Tests > should serve as a migration example 1ms
stdout | src/tests/components/PoolOfferControls.test.tsx > PoolOfferControls > calls bumpBudget and shows toast when budget button is clicked
[ANALYTICS] BUDGET_BUMPED { tripId: [32m'test-trip'[39m, bumpsUsed: [33m1[39m, newBudget: [33m1000[39m, maxBudget: [33m3000[39m }

 ✓ src/tests/components/PoolOfferControls.test.tsx (7 tests) 1008ms
   ✓ PoolOfferControls > renders ConstraintChips with correct dateRange  573ms
 ✓ tests/unit/components/ConstraintChips.refactored.test.tsx (12 tests) 2686ms
   ✓ ConstraintChips (Refactored) > Component rendering with semantic elements > should render all chips with proper accessibility roles  529ms
   ✓ ConstraintChips (Refactored) > User interactions > should call onToggleNonStop when non-stop button is clicked  1038ms
stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should fail submission if auto-booking is enabled, max_price is set, but no payment method is selected
[TEST] Filling form fields: Martha, SFO, $1200

 ✓ tests/unit/featureFlag.test.ts (24 tests) 1123ms
   ✓ Feature Flag System > 5% Canary Rollout Simulation > maintains consistency across multiple checks  1023ms
stdout | tests/unit/components/PoolOfferControls.test.tsx > PoolOfferControls > calls bumpBudget and shows toast when budget button is clicked
[ANALYTICS] BUDGET_BUMPED { tripId: [32m'test-trip'[39m, bumpsUsed: [33m1[39m, newBudget: [33m1000[39m, maxBudget: [33m3000[39m }

 ✓ tests/unit/components/PoolOfferControls.test.tsx (7 tests) 1115ms
   ✓ PoolOfferControls > renders ConstraintChips with correct dateRange  800ms
 ✓ src/components/trip/Pools/__tests__/PoolLayout.test.tsx (3 tests) 1148ms
   ✓ PoolLayout > renders three pool sections  1042ms
stdout | src/tests/components/TripRequestForm.debug.test.tsx > TripRequestForm Debug > debug: check what renders in auto mode
Container HTML length: [33m23095[39m
H1 count: [33m1[39m
H2 count: [33m0[39m
Contains Trip Basics: [33mtrue[39m
Contains Plan Your Trip: [33mfalse[39m
Contains Where & When: [33mfalse[39m
Contains Travel Details: [33mfalse[39m
Text content length: [33m932[39m
H1 0: Trip Basics

stdout | src/tests/components/TripRequestForm.debug.test.tsx > TripRequestForm Debug > debug: check manual mode
Manual mode - Contains Plan Your Trip: [33mfalse[39m
Manual mode - Text length: [33m1224[39m

 ✓ src/tests/components/TripRequestForm.debug.test.tsx (2 tests) 2674ms
   ✓ TripRequestForm Debug > debug: check what renders in auto mode  1858ms
   ✓ TripRequestForm Debug > debug: check manual mode  810ms
stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Initial loading > should initialize with loading state when tripId is provided
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Initial loading > should use initialTripDetails when provided
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

 ✓ src/components/trip/Pools/__tests__/PoolSection.test.tsx (3 tests) 1494ms
   ✓ PoolSection > renders children when count > 0 and section is expanded  1132ms
stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should load offers and apply duration filter by default
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should show toast when duration filter is applied
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should load all offers when ignoreFilter is true
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should load all offers when ignoreFilter is true
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] BYPASSING duration filter (overrideFilterArg=true). Using all 2 offers.

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Refresh functionality > should refresh offers when refreshOffers is called
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/pages/TripConfirm.test.tsx > TripConfirm Page > should display auto-booking banner if tripRequest.auto_book_enabled is true
[TripConfirm] Component mounted with location: ?id=offer-for-auto-book&airline=AA&flight_number=123&price=500&departure_date=2024-01-01&departure_time=10:00&return_date=2024-01-05&return_time=12:00&duration=PT2H
[TripConfirm] Parsed offer: {
  id: [32m'offer-for-auto-book'[39m,
  airline: [32m'AA'[39m,
  flight_number: [32m'123'[39m,
  price: [33m500[39m,
  departure_date: [32m'2024-01-01'[39m,
  departure_time: [32m'10:00'[39m,
  return_date: [32m'2024-01-05'[39m,
  return_time: [32m'12:00'[39m,
  duration: [32m'PT2H'[39m
}
[TripConfirm] Component mounted with location: ?id=offer-for-auto-book&airline=AA&flight_number=123&price=500&departure_date=2024-01-01&departure_time=10:00&return_date=2024-01-05&return_time=12:00&duration=PT2H
[TripConfirm] Parsed offer: {
  id: [32m'offer-for-auto-book'[39m,
  airline: [32m'AA'[39m,
  flight_number: [32m'123'[39m,
  price: [33m500[39m,
  departure_date: [32m'2024-01-01'[39m,
  departure_time: [32m'10:00'[39m,
  return_date: [32m'2024-01-05'[39m,
  return_time: [32m'12:00'[39m,
  duration: [32m'PT2H'[39m
}

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Relaxed criteria search > should handle relaxed criteria search
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Relaxed criteria search > should handle relaxed criteria search
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should fail submission if auto-booking is enabled, payment method is set, but max_price is missing
[TEST] Filling form fields: Martha, SFO, $1200

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Caching > should use cached results for repeated requests
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Duration validation > should filter out offers with invalid dates
🔍 [OFFERS-DEBUG] All 3 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  },
  {
    id: [32m'offer-3'[39m,
    airline: [32m'Invalid Airlines'[39m,
    departure_date: [32m'invalid-date'[39m,
    return_date: [32m'also-invalid'[39m,
    duration: [32m'unknown'[39m,
    price: [33m600[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗
🔍 [DURATION-FILTER-DEBUG] Offer 3: Invalid Airlines - Duration: NaN days - Valid: ✗

stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > Duration validation > should show appropriate message when no offers match duration
🔍 [OFFERS-DEBUG] All 1 offers before filtering: [
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Another Airlines - Duration: 10 days - Valid: ✗

 ✓ src/tests/components/ConstraintChips.test.tsx (5 tests) 1436ms
   ✓ ConstraintChips > renders carry-on included chip  615ms
   ✓ ConstraintChips > shows different styling when nonStopOnly is true  576ms
 ✓ tests/unit/components/ConstraintChips.test.tsx (5 tests) 1385ms
   ✓ ConstraintChips > renders carry-on included chip  514ms
   ✓ ConstraintChips > shows different styling when nonStopOnly is true  588ms
stdout | tests/unit/hooks/useTripOffers.test.ts > useTripOffers > No offers scenarios > should handle when no offers are found
🔍 [OFFERS-DEBUG] All 0 offers before filtering: []

 ✓ tests/unit/hooks/useTripOffers.test.ts (17 tests) 1254ms
stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should fail submission if auto-booking is enabled, payment method is set, but max_price is missing
[TEST] Form fields filled successfully

stdout | src/tests/pages/TripConfirm.test.tsx > TripConfirm Page > should display auto-booking banner if tripRequest.auto_book_enabled is true
[TripConfirm] Component mounted with location: ?id=offer-for-auto-book&airline=AA&flight_number=123&price=500&departure_date=2024-01-01&departure_time=10:00&return_date=2024-01-05&return_time=12:00&duration=PT2H
[TripConfirm] Parsed offer: {
  id: [32m'offer-for-auto-book'[39m,
  airline: [32m'AA'[39m,
  flight_number: [32m'123'[39m,
  price: [33m500[39m,
  departure_date: [32m'2024-01-01'[39m,
  departure_time: [32m'10:00'[39m,
  return_date: [32m'2024-01-05'[39m,
  return_time: [32m'12:00'[39m,
  duration: [32m'PT2H'[39m
}

stdout | src/tests/pages/TripConfirm.test.tsx > TripConfirm Page > should display "Book Now" button if tripRequest.auto_book_enabled is false
[TripConfirm] Component mounted with location: ?id=offer-for-manual-book&airline=BB&flight_number=456&price=600&departure_date=2024-02-01&departure_time=11:00&return_date=2024-02-05&return_time=13:00&duration=PT3H
[TripConfirm] Parsed offer: {
  id: [32m'offer-for-manual-book'[39m,
  airline: [32m'BB'[39m,
  flight_number: [32m'456'[39m,
  price: [33m600[39m,
  departure_date: [32m'2024-02-01'[39m,
  departure_time: [32m'11:00'[39m,
  return_date: [32m'2024-02-05'[39m,
  return_time: [32m'13:00'[39m,
  duration: [32m'PT3H'[39m
}
[TripConfirm] Component mounted with location: ?id=offer-for-manual-book&airline=BB&flight_number=456&price=600&departure_date=2024-02-01&departure_time=11:00&return_date=2024-02-05&return_time=13:00&duration=PT3H
[TripConfirm] Parsed offer: {
  id: [32m'offer-for-manual-book'[39m,
  airline: [32m'BB'[39m,
  flight_number: [32m'456'[39m,
  price: [33m600[39m,
  departure_date: [32m'2024-02-01'[39m,
  departure_time: [32m'11:00'[39m,
  return_date: [32m'2024-02-05'[39m,
  return_time: [32m'13:00'[39m,
  duration: [32m'PT3H'[39m
}

stdout | src/tests/components/personalization/GreetingBanner.test.tsx > GreetingBanner > should track exposure event on render
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mtrue[39m,
    interactionType: [32m'clickable'[39m,
    abTestVariant: [32m'treatment'[39m,
    isPersonalized: [33mtrue[39m
  },
  timestamp: [35m2025-07-14T06:50:50.814Z[39m,
  userId: [32m'test-user'[39m
}

stdout | src/tests/components/personalization/GreetingBanner.test.tsx > GreetingBanner > should handle click event and track engagement
📊 Greeting shown: {
  type: [32m'greeting_shown'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mtrue[39m,
    interactionType: [32m'clickable'[39m,
    abTestVariant: [32m'treatment'[39m,
    isPersonalized: [33mtrue[39m
  },
  timestamp: [35m2025-07-14T06:50:50.894Z[39m,
  userId: [32m'test-user'[39m
}
🖱️ Greeting clicked: {
  type: [32m'greeting_clicked'[39m,
  context: [32m'dashboard'[39m,
  data: {
    variant: [32m'default'[39m,
    hasPersonalData: [33mtrue[39m,
    abTestVariant: [32m'treatment'[39m
  },
  timestamp: [35m2025-07-14T06:50:50.953Z[39m,
  userId: [32m'test-user'[39m
}

 ✓ src/tests/components/personalization/GreetingBanner.test.tsx (3 tests) 848ms
   ✓ GreetingBanner > should render without crashing  688ms
stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should cache tokens and reuse them
[lib/amadeus] Fetching new access token

stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should cache tokens and reuse them
[lib/amadeus] Token cached, expires in 1799 seconds

stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should cache tokens and reuse them
[lib/amadeus] Using cached access token

stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should refresh expired tokens
[lib/amadeus] Fetching new access token

stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should refresh expired tokens
[lib/amadeus] Token cached, expires in 1 seconds

stdout | src/tests/pages/TripConfirm.test.tsx > TripConfirm Page > should display "Book Now" button if tripRequest.auto_book_enabled is false
[TripConfirm] Component mounted with location: ?id=offer-for-manual-book&airline=BB&flight_number=456&price=600&departure_date=2024-02-01&departure_time=11:00&return_date=2024-02-05&return_time=13:00&duration=PT3H
[TripConfirm] Parsed offer: {
  id: [32m'offer-for-manual-book'[39m,
  airline: [32m'BB'[39m,
  flight_number: [32m'456'[39m,
  price: [33m600[39m,
  departure_date: [32m'2024-02-01'[39m,
  departure_time: [32m'11:00'[39m,
  return_date: [32m'2024-02-05'[39m,
  return_time: [32m'13:00'[39m,
  duration: [32m'PT3H'[39m
}

 ✓ src/tests/pages/TripConfirm.test.tsx (3 tests | 1 skipped) 1988ms
   ✓ TripConfirm Page > should display auto-booking banner if tripRequest.auto_book_enabled is true  1203ms
   ✓ TripConfirm Page > should display "Book Now" button if tripRequest.auto_book_enabled is false  782ms
stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should refresh expired tokens
[lib/amadeus] Fetching new access token

stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should refresh expired tokens
[lib/amadeus] Token cached, expires in 1 seconds

stdout | supabase/functions/tests/amadeusToken.test.ts > Amadeus Token Caching > should handle API errors
[lib/amadeus] Fetching new access token

 ✓ supabase/functions/tests/amadeusToken.test.ts (4 tests) 1309ms
   ✓ Amadeus Token Caching > should refresh expired tokens  1125ms
stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should submit successfully with auto-booking ON, payment method, and max_price
[TEST] Filling form fields: MVY, SFO, $2000

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Initial loading > should initialize with loading state when tripId is provided
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Initial loading > should use initialTripDetails when provided
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

 ✓ src/tests/components/personalization/PersonalizedGreeting.test.tsx (8 tests) 677ms
   ✓ PersonalizedGreeting > renders loading state initially  304ms
stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should load offers and apply duration filter by default
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should show toast when duration filter is applied
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should submit successfully with auto-booking ON, payment method, and max_price
[TEST] Form fields filled successfully

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should load all offers when ignoreFilter is true
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Loading offers successfully > should load all offers when ignoreFilter is true
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] BYPASSING duration filter (overrideFilterArg=true). Using all 2 offers.

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Refresh functionality > should refresh offers when refreshOffers is called
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Relaxed criteria search > should handle relaxed criteria search
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Relaxed criteria search > should handle relaxed criteria search
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Caching > should use cached results for repeated requests
🔍 [OFFERS-DEBUG] All 2 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Duration validation > should filter out offers with invalid dates
🔍 [OFFERS-DEBUG] All 3 offers before filtering: [
  {
    id: [32m'offer-1'[39m,
    airline: [32m'Test Airlines'[39m,
    departure_date: [32m'2024-07-15'[39m,
    return_date: [32m'2024-07-18'[39m,
    duration: [32m'3 days'[39m,
    price: [33m500[39m
  },
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  },
  {
    id: [32m'offer-3'[39m,
    airline: [32m'Invalid Airlines'[39m,
    departure_date: [32m'invalid-date'[39m,
    return_date: [32m'also-invalid'[39m,
    duration: [32m'unknown'[39m,
    price: [33m600[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Test Airlines - Duration: 3 days - Valid: ✓
🔍 [DURATION-FILTER-DEBUG] Offer 2: Another Airlines - Duration: 10 days - Valid: ✗
🔍 [DURATION-FILTER-DEBUG] Offer 3: Invalid Airlines - Duration: NaN days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > Duration validation > should show appropriate message when no offers match duration
🔍 [OFFERS-DEBUG] All 1 offers before filtering: [
  {
    id: [32m'offer-2'[39m,
    airline: [32m'Another Airlines'[39m,
    departure_date: [32m'2024-07-20'[39m,
    return_date: [32m'2024-07-30'[39m,
    duration: [32m'10 days'[39m,
    price: [33m750[39m
  }
]
🔍 [DURATION-FILTER-DEBUG] Applying duration filter: 3-7 days
🔍 [DURATION-FILTER-DEBUG] Offer 1: Another Airlines - Duration: 10 days - Valid: ✗

stdout | src/tests/hooks/useTripOffers.test.ts > useTripOffers > No offers scenarios > should handle when no offers are found
🔍 [OFFERS-DEBUG] All 0 offers before filtering: []

 ✓ src/tests/hooks/useTripOffers.test.ts (17 tests) 1290ms
 ✓ supabase/functions/tests/cancel-booking.test.ts (13 tests) 294ms
 ✓ src/tests/components/profile/SimpleProfileStatus.test.tsx (12 tests) 1082ms
   ✓ SimpleProfileStatus > Profile completion status display > renders completion percentage correctly  534ms
 ✓ tests/unit/components/profile/SimpleProfileStatus.test.tsx (12 tests) 1118ms
   ✓ SimpleProfileStatus > Profile completion status display > renders completion percentage correctly  570ms
stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > FilterFactory > Pipeline Creation > should create a standard pipeline with all filters
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > FilterFactory > Pipeline Creation > should create a budget pipeline with limited filters
[FilterFactory] Creating budget-focused pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > FilterFactory > Pipeline Creation > should create a fast pipeline with essential filters only
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > FilterFactory > Context Creation > should create proper filter context from search parameters
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mtrue[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > FilterFactory > Context Creation > should handle alternative parameter names
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mtrue[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > RoundTripFilter > should filter out one-way offers for round-trip searches
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > RoundTripFilter > should filter out one-way offers for round-trip searches
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] Filtered out offer without 2 itineraries: ow1 (has 1)
[RoundTripFilter] Filtered out offer without 2 itineraries: ow2 (has 1)
[RoundTripFilter] After itinerary count filter: 4 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 4 → 2 offers (removed 2)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > RoundTripFilter > should validate round-trip routing
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > RoundTripFilter > should validate round-trip routing
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] Offer rt2: Invalid routing - expected JFK→LAX→JFK, got JFK→LAX→ORD
[RoundTripFilter] After routing validation: 2 → 1 offers
[RoundTripFilter] After provider-specific validation: 1 → 1 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 1 offers (removed 1)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > RoundTripFilter > should handle one-way searches properly
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > RoundTripFilter > should handle one-way searches properly
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: rt1
[RoundTripFilter] One-way filtering: 2 → 1 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should filter offers exceeding budget
[FilterFactory] Created filter context: {
  budget: [33m400[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should filter offers exceeding budget
[BudgetFilter] Starting budget filtering with budget: 400 USD
[BudgetFilter] Effective budget (with tolerance): 450 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should filter offers exceeding budget
[BudgetFilter] Filtered out offer expensive: 500 USD > 450 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should filter offers exceeding budget
[BudgetFilter] Filtered out offer very-expensive: 600 USD > 450 USD
[BudgetFilter] Budget filtering complete: 4 → 2 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should apply budget tolerance
[FilterFactory] Created filter context: {
  budget: [33m400[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should apply budget tolerance
[BudgetFilter] Starting budget filtering with budget: 400 USD
[BudgetFilter] Effective budget (with tolerance): 450 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should apply budget tolerance
[BudgetFilter] Filtered out offer beyond-tolerance: 460 USD > 450 USD
[BudgetFilter] Budget filtering complete: 2 → 1 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should handle currency conversion
[FilterFactory] Created filter context: {
  budget: [33m400[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should handle currency conversion
[BudgetFilter] Starting budget filtering with budget: 400 USD
[BudgetFilter] Effective budget (with tolerance): 450 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should handle currency conversion
[BudgetFilter] Currency conversion: 350 EUR → 433.65 USD (with 5% buffer)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > BudgetFilter > should handle currency conversion
[BudgetFilter] Performed 1 currency conversions
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > NonstopFilter > should filter out flights with stops when nonstop required
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mtrue[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > NonstopFilter > should filter out flights with stops when nonstop required
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Filtering for nonstop flights only (app requirement)
[NonstopFilter] Offer with-stops1: Contains itinerary with stops
[NonstopFilter] Offer with-stops2: Contains itinerary with stops
[NonstopFilter] Nonstop filtering complete: 4 → 2 offers (removed 2 with stops)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > NonstopFilter > should return all offers when nonstop not required
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mtrue[39m
}

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > NonstopFilter > should return all offers when nonstop not required
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterFactory] Created filter context: {
  budget: [33m400[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mtrue[39m
}
[FilterPipeline] Starting execution with 5 offers
[FilterPipeline] Executing filter: RoundTripFilter (5 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] Filtered out offer without 2 itineraries: one-way (has 1)
[RoundTripFilter] After itinerary count filter: 5 → 4 offers
[RoundTripFilter] After routing validation: 4 → 4 offers
[RoundTripFilter] After provider-specific validation: 4 → 4 offers
[RoundTripFilter] Round-trip filtering complete: 5 → 4 offers (removed 1)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[PerformanceLogger] RoundTripFilter: 5→4 (1ms)
[FilterPipeline] Filter RoundTripFilter completed: 5 → 4 (removed 1)
[FilterPipeline] Executing filter: BudgetFilter (4 offers)
[BudgetFilter] Starting budget filtering with budget: 400 USD
[BudgetFilter] Effective budget (with tolerance): 450 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[BudgetFilter] Filtered out offer expensive: 500 USD > 450 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[BudgetFilter] Budget filtering complete: 4 → 3 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[PerformanceLogger] BudgetFilter: 4→3 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 4 → 3 (removed 1)
[FilterPipeline] Executing filter: CarryOnFilter (3 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 3 → 3 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[PerformanceLogger] CarryOnFilter: 3→3 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 3 → 3 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (3 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Filtering for nonstop flights only (app requirement)
[NonstopFilter] Offer with-stops: Contains itinerary with stops
[NonstopFilter] Nonstop filtering complete: 3 → 2 offers (removed 1 with stops)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[PerformanceLogger] NonstopFilter: 3→2 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 3 → 2 (removed 1)
[FilterPipeline] Executing filter: AirlineFilter (2 offers)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should apply multiple filters in correct order
[PerformanceLogger] AirlineFilter: 2→2 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 5 → 2 (3ms)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should handle errors gracefully
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterFactory] Created filter context: {
  budget: [33m-100[39m,
  currency: [32m'USD'[39m,
  route: [32m' → '[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: -100 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should handle errors gracefully
[PerformanceLogger] BudgetFilter: 1→1 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (1 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 1 → 1 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should handle errors gracefully
[PerformanceLogger] CarryOnFilter: 1→1 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (1 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should handle errors gracefully
[PerformanceLogger] NonstopFilter: 1→1 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Integration Tests > should handle errors gracefully
[PerformanceLogger] AirlineFilter: 1→1 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 1 → 1 (2ms)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Legacy Adapter > should migrate old round-trip filtering to new system
[LegacyFilterAdapter] Migrating old round-trip filtering to new system
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 0 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Legacy Adapter > should migrate old round-trip filtering to new system
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (0ms)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Legacy Adapter > should migrate old round-trip filtering to new system
[LegacyFilterAdapter] Legacy filtering migration complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterPipeline] Starting execution with 1000 offers
[FilterPipeline] Executing filter: BudgetFilter (500 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-251: 551 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-252: 552 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-253: 553 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-254: 554 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-255: 555 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-256: 556 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-257: 557 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-258: 558 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-259: 559 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-260: 560 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-261: 561 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-262: 562 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-263: 563 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-264: 564 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-265: 565 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-266: 566 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-267: 567 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-268: 568 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-269: 569 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-270: 570 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-271: 571 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-272: 572 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-273: 573 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-274: 574 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-275: 575 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-276: 576 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-277: 577 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-278: 578 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-279: 579 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-280: 580 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-281: 581 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-282: 582 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-283: 583 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-284: 584 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-285: 585 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-286: 586 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-287: 587 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-288: 588 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-289: 589 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-290: 590 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-291: 591 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-292: 592 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-293: 593 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-294: 594 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-295: 595 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-296: 596 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-297: 597 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-298: 598 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Filtered out offer offer-299: 599 USD > 550 USD

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[BudgetFilter] Budget filtering complete: 500 → 451 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should handle large numbers of offers efficiently
[FilterPipeline] Filter BudgetFilter completed: 500 → 451 (removed 49)
[FilterPipeline] Execution completed: 1000 → 451 (127ms)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should respect maxOffersToProcess limit
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterPipeline] Starting execution with 100 offers
[FilterPipeline] Executing filter: RoundTripFilter (10 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-0
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-1
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-2
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-3
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-4
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-5
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-6
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-7
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-8
[RoundTripFilter] Filtered out multi-itinerary offer for one-way search: offer-9
[RoundTripFilter] One-way filtering: 10 → 0 offers

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Performance Tests > should respect maxOffersToProcess limit
[FilterPipeline] Filter RoundTripFilter completed: 10 → 0 (removed 10)
[FilterPipeline] Execution completed: 100 → 0 (0ms)

stdout | src/lib/filtering/__tests__/FilteringSystem.test.ts > Error Handling > should continue processing after individual filter errors
[FilterPipeline] Added filter: ErrorFilter (priority: 1)
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterFactory] Created filter context: {
  budget: [33m0[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: ErrorFilter (1 offers)
[FilterPipeline] Execution completed: 1 → 1 (76ms)

 ✓ src/lib/filtering/__tests__/FilteringSystem.test.ts (23 tests) 527ms
stdout | src/tests/contexts/PersonalizationContext.test.tsx > PersonalizationContext > should provide personalization data when enabled
🎯 Personalization data loaded from edge function: {
  hasFirstName: [33mtrue[39m,
  hasNextTrip: [33mtrue[39m,
  userId: [32m'test-use'[39m,
  functionResponse: { personalizationEnabled: [33mtrue[39m }
}

stdout | src/tests/contexts/PersonalizationContext.test.tsx > PersonalizationContext > should handle loading state
🎯 Personalization data loaded from edge function: {
  hasFirstName: [33mtrue[39m,
  hasNextTrip: [33mtrue[39m,
  userId: [32m'test-use'[39m,
  functionResponse: { personalizationEnabled: [33mtrue[39m }
}

 ✓ src/tests/contexts/PersonalizationContext.test.tsx (3 tests) 514ms
   ✓ PersonalizationContext > should provide personalization data when enabled  429ms
 ✓ src/flightSearchV2/useFlightOffers.test.ts (8 tests) 735ms
stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[🔍 SERVICE] Fetching trip offers for tripRequestId: test-trip-id
[🔍 SERVICE] Filter options: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  pipelineType: [32m'standard'[39m
}

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[🔍 SERVICE] Trip request is round-trip

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[🔍 SERVICE] Found 2 raw offers in flight_offers_v2 table
[🔍 SERVICE] Retrieved 2 raw offers from V2 table
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[🔍 SERVICE] Created filter context: {
  tripType: [32m'roundtrip'[39m,
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  offerCount: [33m2[39m
}
[🔍 SERVICE] Normalized 2 offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[🔍 SERVICE] Executing standard filtering pipeline with 5 filters
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 2 offers (removed 0)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[PerformanceLogger] RoundTripFilter: 2→2 (65ms)
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[PerformanceLogger] BudgetFilter: 2→2 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (2 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 2 → 2 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[PerformanceLogger] CarryOnFilter: 2→2 (3ms)
[FilterPipeline] Filter CarryOnFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (2 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[PerformanceLogger] NonstopFilter: 2→2 (1ms)
[FilterPipeline] Filter NonstopFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (2 offers)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[PerformanceLogger] AirlineFilter: 2→2 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (96ms)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should fetch and filter trip offers using new architecture
[🔍 SERVICE] Filtering completed: 2 → 2 offers
[🔍 SERVICE] Successfully processed 2 filtered offers
[🔍 SERVICE] Sample filtered offers: [
  { id: [32m'offer-1'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mfalse[39m },
  { id: [32m'offer-2'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mtrue[39m }
]

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[🔍 SERVICE] Fetching trip offers for tripRequestId: test-trip-id
[🔍 SERVICE] Filter options: [90mundefined[39m

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[🔍 SERVICE] Trip request is round-trip

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[🔍 SERVICE] Found 2 raw offers in flight_offers_v2 table
[🔍 SERVICE] Retrieved 2 raw offers from V2 table
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[🔍 SERVICE] Created filter context: {
  tripType: [32m'roundtrip'[39m,
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  offerCount: [33m2[39m
}
[🔍 SERVICE] Normalized 2 offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[🔍 SERVICE] Executing standard filtering pipeline with 5 filters
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 2 offers (removed 0)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[PerformanceLogger] RoundTripFilter: 2→2 (1ms)
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[PerformanceLogger] BudgetFilter: 2→2 (0ms)
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (2 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 2 → 2 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[PerformanceLogger] CarryOnFilter: 2→2 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (2 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[PerformanceLogger] NonstopFilter: 2→2 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (2 offers)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[PerformanceLogger] AirlineFilter: 2→2 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (2ms)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should apply round-trip filtering correctly
[🔍 SERVICE] Filtering completed: 2 → 2 offers
[🔍 SERVICE] Successfully processed 2 filtered offers
[🔍 SERVICE] Sample filtered offers: [
  { id: [32m'offer-1'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mfalse[39m },
  { id: [32m'offer-2'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mtrue[39m }
]

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Fetching trip offers for tripRequestId: test-trip-id
[🔍 SERVICE] Filter options: { pipelineType: [32m'budget'[39m, budget: [33m500[39m }

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Trip request is round-trip

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Found 2 raw offers in flight_offers_v2 table
[🔍 SERVICE] Retrieved 2 raw offers from V2 table
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[🔍 SERVICE] Created filter context: {
  tripType: [32m'roundtrip'[39m,
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  offerCount: [33m2[39m
}
[🔍 SERVICE] Normalized 2 offers
[FilterFactory] Creating budget-focused pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[🔍 SERVICE] Executing budget filtering pipeline with 2 filters
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 2 offers (removed 0)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (23ms)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Filtering completed: 2 → 2 offers
[🔍 SERVICE] Successfully processed 2 filtered offers
[🔍 SERVICE] Sample filtered offers: [
  { id: [32m'offer-1'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mfalse[39m },
  { id: [32m'offer-2'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mtrue[39m }
]

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Fetching trip offers for tripRequestId: test-trip-id
[🔍 SERVICE] Filter options: { pipelineType: [32m'fast'[39m, budget: [33m500[39m }

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Trip request is round-trip

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Found 2 raw offers in flight_offers_v2 table
[🔍 SERVICE] Retrieved 2 raw offers from V2 table
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[🔍 SERVICE] Created filter context: {
  tripType: [32m'roundtrip'[39m,
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  offerCount: [33m2[39m
}
[🔍 SERVICE] Normalized 2 offers
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[🔍 SERVICE] Executing fast filtering pipeline with 2 filters
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 2 offers (removed 0)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (8ms)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Filtering completed: 2 → 2 offers
[🔍 SERVICE] Successfully processed 2 filtered offers
[🔍 SERVICE] Sample filtered offers: [
  { id: [32m'offer-1'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mfalse[39m },
  { id: [32m'offer-2'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mtrue[39m }
]

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Fetching trip offers for tripRequestId: test-trip-id
[🔍 SERVICE] Filter options: { pipelineType: [32m'standard'[39m, budget: [33m500[39m }

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Trip request is round-trip

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Found 2 raw offers in flight_offers_v2 table
[🔍 SERVICE] Retrieved 2 raw offers from V2 table
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[🔍 SERVICE] Created filter context: {
  tripType: [32m'roundtrip'[39m,
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  offerCount: [33m2[39m
}
[🔍 SERVICE] Normalized 2 offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[🔍 SERVICE] Executing standard filtering pipeline with 5 filters
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 2 offers (removed 0)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[PerformanceLogger] RoundTripFilter: 2→2 (1ms)
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[PerformanceLogger] BudgetFilter: 2→2 (0ms)
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (2 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 2 → 2 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[PerformanceLogger] CarryOnFilter: 2→2 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (2 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[PerformanceLogger] NonstopFilter: 2→2 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (2 offers)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[PerformanceLogger] AirlineFilter: 2→2 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (1ms)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Service Layer Integration > should handle different pipeline types
[🔍 SERVICE] Filtering completed: 2 → 2 offers
[🔍 SERVICE] Successfully processed 2 filtered offers
[🔍 SERVICE] Sample filtered offers: [
  { id: [32m'offer-1'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mfalse[39m },
  { id: [32m'offer-2'[39m, price: [33m0[39m, airline: [32m'LAX-JFK'[39m, nonstop: [33mtrue[39m }
]

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Filter Factory Integration > should create different pipeline types with correct filters
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterFactory] Creating budget-focused pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Filter Factory Integration > should create filter context from API parameters
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Offer Normalization > should normalize V2 offers correctly
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Offer Normalization > should normalize legacy offers correctly
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Error Handling > should fallback gracefully when filtering fails
[🔍 SERVICE] Fetching trip offers for tripRequestId: test-trip-id
[🔍 SERVICE] Filter options: [90mundefined[39m

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Error Handling > should fallback gracefully when filtering fails
[🔍 SERVICE] Trip request is round-trip

stdout | src/lib/filtering/__tests__/integration.test.ts > Phase 2 Integration: New Filtering Architecture > Error Handling > should fallback gracefully when filtering fails
[🔍 SERVICE] Found 2 raw offers in flight_offers_v2 table
[🔍 SERVICE] Retrieved 2 raw offers from V2 table
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[🔍 SERVICE] Created filter context: {
  tripType: [32m'roundtrip'[39m,
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  nonstop: [33mfalse[39m,
  offerCount: [33m2[39m
}
[🔍 SERVICE] Normalized 2 offers
[🔍 SERVICE] Falling back to raw offers without filtering

 ✓ src/lib/filtering/__tests__/integration.test.ts (10 tests | 2 skipped) 222ms
 ✓ src/hooks/__tests__/useFormAnalytics.test.ts (8 tests) 360ms
stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should submit successfully with auto-booking OFF, not sending auto-booking fields
[TEST] Filling form fields: Martha, SFO, $1200

stdout | src/tests/components/TripRequestForm.test.tsx > TripRequestForm - Auto-Booking Logic > should submit successfully with auto-booking OFF, not sending auto-booking fields
[TEST] Form fields filled successfully

 ✓ src/components/trip/Pools/__tests__/PoolHeader.test.tsx (2 tests) 389ms
   ✓ PoolHeader > renders pool name and count  367ms
stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should successfully create PaymentIntent and booking request for valid campaign
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should successfully create PaymentIntent and booking request for valid campaign
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should successfully create PaymentIntent and booking request for valid campaign
[PREPARE-AUTO-BOOKING-CHARGE] Creating PaymentIntent for 45000 usd

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should successfully create PaymentIntent and booking request for valid campaign
[PREPARE-AUTO-BOOKING-CHARGE] PaymentIntent created: pi_test123, status: succeeded
[PREPARE-AUTO-BOOKING-CHARGE] Payment succeeded, proceeding with booking

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should reject payment when flight price exceeds campaign budget
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should reject payment when flight price exceeds campaign budget
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should reject payment when flight price exceeds campaign budget
[PREPARE-AUTO-BOOKING-CHARGE] Price 600 exceeds budget 500

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should reject payment when card is expired
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should reject payment when card is expired
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle PaymentIntent requiring 3DS authentication
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle PaymentIntent requiring 3DS authentication
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle PaymentIntent requiring 3DS authentication
[PREPARE-AUTO-BOOKING-CHARGE] Creating PaymentIntent for 45000 usd

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle PaymentIntent requiring 3DS authentication
[PREPARE-AUTO-BOOKING-CHARGE] PaymentIntent created: pi_requires_action, status: requires_action
[PREPARE-AUTO-BOOKING-CHARGE] Payment requires action (3DS): pi_requires_action

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle Stripe card declined error gracefully
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle Stripe card declined error gracefully
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle Stripe card declined error gracefully
[PREPARE-AUTO-BOOKING-CHARGE] Creating PaymentIntent for 45000 usd

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle insufficient funds error
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle insufficient funds error
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle insufficient funds error
[PREPARE-AUTO-BOOKING-CHARGE] Creating PaymentIntent for 45000 usd

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should return 404 for inactive campaign
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should return 404 for inactive campaign
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: inactive_campaign, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should return 400 for missing required parameters
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle campaign without payment method
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should handle campaign without payment method
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should use traveler_data from request when provided
[PREPARE-AUTO-BOOKING-CHARGE] Starting auto-booking charge process

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should use traveler_data from request when provided
[PREPARE-AUTO-BOOKING-CHARGE] Processing campaign: campaign_123, offer: offer_789

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should use traveler_data from request when provided
[PREPARE-AUTO-BOOKING-CHARGE] Creating PaymentIntent for 45000 usd

stdout | supabase/functions/tests/prepare-auto-booking-charge.test.ts > prepare-auto-booking-charge > should use traveler_data from request when provided
[PREPARE-AUTO-BOOKING-CHARGE] PaymentIntent created: pi_test123, status: succeeded
[PREPARE-AUTO-BOOKING-CHARGE] Payment succeeded, proceeding with booking

 ✓ supabase/functions/tests/prepare-auto-booking-charge.test.ts (10 tests) 254ms
 ✓ tests/unit/hooks/usePoolsSafe.test.ts (7 tests) 224ms
 ✓ supabase/functions/tests/send-reminder.test.ts (6 tests) 139ms
stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch flight offers successfully from the table (cache miss)
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch flight offers successfully from the table (cache miss)
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch flight offers successfully from the table (cache miss)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch flight offers successfully from the table (cache miss)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should throw an error if fetching from table fails
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should throw an error if fetching from table fails
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should throw an error if fetching from table fails
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should throw an error if fetching from table fails
[ServerAction/getFlightOffers] No V2 data found, falling back to legacy flight_offers table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use cached data for subsequent calls within cache duration
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fetch new data from table if cache is expired
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should invoke flight-search-v2, invalidate cache, then fetch from table
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should invoke flight-search-v2, invalidate cache, then fetch from table
[ServerAction/getFlightOffers] Refresh requested for tripRequestId: test-trip-id-123. Invoking flight-search-v2...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should invoke flight-search-v2, invalidate cache, then fetch from table
[ServerAction/getFlightOffers] Response from 'flight-search-v2' for tripRequestId test-trip-id-123: { inserted: [33m1[39m, message: [32m'Refreshed'[39m }
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should invoke flight-search-v2, invalidate cache, then fetch from table
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should invoke flight-search-v2, invalidate cache, then fetch from table
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should throw error if flight-search-v2 invocation fails during refresh
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > should throw error if flight-search-v2 invocation fails during refresh
[ServerAction/getFlightOffers] Refresh requested for tripRequestId: test-trip-id-123. Invoking flight-search-v2...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > refresh=true should still fetch from table if flight-search-v2 succeeds but finds no new offers (e.g. inserted: 0)
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > refresh=true should still fetch from table if flight-search-v2 succeeds but finds no new offers (e.g. inserted: 0)
[ServerAction/getFlightOffers] Refresh requested for tripRequestId: test-trip-id-123. Invoking flight-search-v2...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > refresh=true should still fetch from table if flight-search-v2 succeeds but finds no new offers (e.g. inserted: 0)
[ServerAction/getFlightOffers] Response from 'flight-search-v2' for tripRequestId test-trip-id-123: { inserted: [33m0[39m, message: [32m'No new offers'[39m }
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > refresh=true should still fetch from table if flight-search-v2 succeeds but finds no new offers (e.g. inserted: 0)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > with refresh = true > refresh=true should still fetch from table if flight-search-v2 succeeds but finds no new offers (e.g. inserted: 0)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-456. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should use different cache entries for different tripRequestIds (table fetch)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Cache cleared.
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > clearGetFlightOffersCache should clear the cache (table fetch)
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fallback to legacy flight_offers table when V2 table is empty
[ServerAction/getFlightOffers] Cache cleared.

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fallback to legacy flight_offers table when V2 table is empty
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: test-trip-id-123. Fetching from flight_offers_v2 table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fallback to legacy flight_offers table when V2 table is empty
[ServerAction/getFlightOffers] Round-trip search detected, filtering out one-way flights

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fallback to legacy flight_offers table when V2 table is empty
[ServerAction/getFlightOffers] No V2 data found, falling back to legacy flight_offers table...

stdout | src/serverActions/getFlightOffers.test.ts > getFlightOffers server action > should fallback to legacy flight_offers table when V2 table is empty
[ServerAction/getFlightOffers] Transformed 1 legacy offers to V2 format

 ✓ src/serverActions/getFlightOffers.test.ts (10 tests) 411ms
stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > FilterFactory Integration > should create different pipeline types with correct filters
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterFactory] Creating budget-focused pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)

 ✓ src/tests/hooks/usePoolsSafe.test.ts (7 tests) 270ms
stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > FilterFactory Integration > should create filter context from API parameters
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mtrue[39m
}
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 3 offers
[FilterPipeline] Executing filter: RoundTripFilter (3 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 3 → 3 offers
[RoundTripFilter] After routing validation: 3 → 3 offers
[RoundTripFilter] After provider-specific validation: 3 → 3 offers
[RoundTripFilter] Round-trip filtering complete: 3 → 3 offers (removed 0)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[PerformanceLogger] RoundTripFilter: 3→3 (1ms)
[FilterPipeline] Filter RoundTripFilter completed: 3 → 3 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (3 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[BudgetFilter] Filtered out offer offer-2: 600 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[BudgetFilter] Budget filtering complete: 3 → 2 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[PerformanceLogger] BudgetFilter: 3→2 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 3 → 2 (removed 1)
[FilterPipeline] Executing filter: CarryOnFilter (2 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 2 → 2 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[PerformanceLogger] CarryOnFilter: 2→2 (1ms)
[FilterPipeline] Filter CarryOnFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (2 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Filtering for nonstop flights only (app requirement)
[NonstopFilter] Offer offer-3: Contains itinerary with stops
[NonstopFilter] Nonstop filtering complete: 2 → 1 offers (removed 1 with stops)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[PerformanceLogger] NonstopFilter: 2→1 (1ms)
[FilterPipeline] Filter NonstopFilter completed: 2 → 1 (removed 1)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should filter offers using complete pipeline
[PerformanceLogger] AirlineFilter: 1→1 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 3 → 1 (5ms)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterFactory] Creating budget-focused pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] One-way filtering: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[PerformanceLogger] RoundTripFilter: 2→2 (0ms)
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[BudgetFilter] Filtered out offer offer-2: 600 USD > 550 USD
[BudgetFilter] Budget filtering complete: 2 → 1 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[PerformanceLogger] BudgetFilter: 2→1 (0ms)
[FilterPipeline] Filter BudgetFilter completed: 2 → 1 (removed 1)
[FilterPipeline] Executing filter: CarryOnFilter (1 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 1 → 1 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[PerformanceLogger] CarryOnFilter: 1→1 (1ms)
[FilterPipeline] Filter CarryOnFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (1 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[PerformanceLogger] NonstopFilter: 1→1 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[PerformanceLogger] AirlineFilter: 1→1 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 2 → 1 (1ms)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] One-way filtering: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[BudgetFilter] Filtered out offer offer-2: 600 USD > 550 USD
[BudgetFilter] Budget filtering complete: 2 → 1 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterPipeline] Filter BudgetFilter completed: 2 → 1 (removed 1)
[FilterPipeline] Execution completed: 2 → 1 (1ms)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] One-way filtering: 2 → 2 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[BudgetFilter] Filtered out offer offer-2: 600 USD > 550 USD
[BudgetFilter] Budget filtering complete: 2 → 1 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > End-to-End Filtering > should handle budget filtering with different pipeline types
[FilterPipeline] Filter BudgetFilter completed: 2 → 1 (removed 1)
[FilterPipeline] Execution completed: 2 → 1 (1ms)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[FilterFactory] Created filter context: {
  budget: [33m500[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Starting execution with 500 offers
[FilterPipeline] Executing filter: RoundTripFilter (500 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] One-way filtering: 500 → 500 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[FilterPipeline] Filter RoundTripFilter completed: 500 → 500 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (500 offers)
[BudgetFilter] Starting budget filtering with budget: 500 USD
[BudgetFilter] Effective budget (with tolerance): 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-226: 552 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-227: 554 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-228: 556 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-229: 558 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-230: 560 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-231: 562 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-232: 564 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-233: 566 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-234: 568 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-235: 570 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-236: 572 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-237: 574 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-238: 576 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-239: 578 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-240: 580 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-241: 582 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-242: 584 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-243: 586 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-244: 588 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-245: 590 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-246: 592 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-247: 594 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-248: 596 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-249: 598 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-250: 600 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-251: 602 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-252: 604 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-253: 606 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-254: 608 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-255: 610 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-256: 612 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-257: 614 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-258: 616 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-259: 618 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-260: 620 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-261: 622 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-262: 624 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-263: 626 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-264: 628 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-265: 630 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-266: 632 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-267: 634 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-268: 636 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-269: 638 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-270: 640 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-271: 642 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-272: 644 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-273: 646 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-274: 648 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-275: 650 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-276: 652 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-277: 654 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-278: 656 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-279: 658 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-280: 660 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-281: 662 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-282: 664 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-283: 666 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-284: 668 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-285: 670 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-286: 672 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-287: 674 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-288: 676 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-289: 678 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-290: 680 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-291: 682 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-292: 684 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-293: 686 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-294: 688 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-295: 690 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-296: 692 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-297: 694 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-298: 696 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-299: 698 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-300: 700 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-301: 702 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-302: 704 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-303: 706 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-304: 708 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-305: 710 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-306: 712 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-307: 714 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-308: 716 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-309: 718 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-310: 720 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-311: 722 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-312: 724 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-313: 726 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-314: 728 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-315: 730 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-316: 732 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-317: 734 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-318: 736 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-319: 738 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-320: 740 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-321: 742 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-322: 744 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-323: 746 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-324: 748 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-325: 750 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-326: 752 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-327: 754 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-328: 756 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-329: 758 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-330: 760 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-331: 762 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-332: 764 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-333: 766 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-334: 768 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-335: 770 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-336: 772 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-337: 774 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-338: 776 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-339: 778 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-340: 780 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-341: 782 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-342: 784 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-343: 786 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-344: 788 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-345: 790 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-346: 792 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-347: 794 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-348: 796 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-349: 798 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-350: 800 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-351: 802 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-352: 804 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-353: 806 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-354: 808 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-355: 810 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-356: 812 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-357: 814 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-358: 816 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-359: 818 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-360: 820 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-361: 822 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-362: 824 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-363: 826 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-364: 828 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-365: 830 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-366: 832 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-367: 834 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-368: 836 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-369: 838 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-370: 840 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-371: 842 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-372: 844 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-373: 846 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-374: 848 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-375: 850 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-376: 852 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-377: 854 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-378: 856 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-379: 858 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-380: 860 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-381: 862 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-382: 864 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-383: 866 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-384: 868 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-385: 870 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-386: 872 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-387: 874 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-388: 876 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-389: 878 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-390: 880 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-391: 882 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-392: 884 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-393: 886 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-394: 888 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-395: 890 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-396: 892 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-397: 894 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-398: 896 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-399: 898 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-400: 900 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-401: 902 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-402: 904 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-403: 906 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-404: 908 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-405: 910 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-406: 912 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-407: 914 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-408: 916 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-409: 918 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-410: 920 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-411: 922 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-412: 924 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-413: 926 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-414: 928 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-415: 930 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-416: 932 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-417: 934 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-418: 936 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-419: 938 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-420: 940 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-421: 942 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-422: 944 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-423: 946 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-424: 948 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-425: 950 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-426: 952 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-427: 954 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-428: 956 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-429: 958 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-430: 960 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-431: 962 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-432: 964 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-433: 966 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-434: 968 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-435: 970 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-436: 972 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-437: 974 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-438: 976 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-439: 978 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-440: 980 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-441: 982 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-442: 984 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-443: 986 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-444: 988 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-445: 990 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-446: 992 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-447: 994 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-448: 996 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-449: 998 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-450: 1000 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-451: 1002 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-452: 1004 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-453: 1006 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-454: 1008 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-455: 1010 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-456: 1012 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-457: 1014 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-458: 1016 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-459: 1018 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-460: 1020 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-461: 1022 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-462: 1024 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-463: 1026 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-464: 1028 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-465: 1030 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-466: 1032 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-467: 1034 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-468: 1036 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-469: 1038 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-470: 1040 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-471: 1042 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-472: 1044 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-473: 1046 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-474: 1048 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-475: 1050 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-476: 1052 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-477: 1054 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-478: 1056 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-479: 1058 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-480: 1060 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-481: 1062 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-482: 1064 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-483: 1066 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-484: 1068 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-485: 1070 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-486: 1072 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-487: 1074 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-488: 1076 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-489: 1078 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-490: 1080 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-491: 1082 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-492: 1084 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-493: 1086 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-494: 1088 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-495: 1090 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-496: 1092 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-497: 1094 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-498: 1096 USD > 550 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[BudgetFilter] Filtered out offer offer-499: 1098 USD > 550 USD
[BudgetFilter] Budget filtering complete: 500 → 226 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should handle large offer sets efficiently
[FilterPipeline] Filter BudgetFilter completed: 500 → 226 (removed 274)
[FilterPipeline] Execution completed: 500 → 226 (173ms)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should continue processing when individual filters encounter errors
[FilterFactory] Created filter context: {
  budget: [33m-100[39m,
  currency: [32m'USD'[39m,
  route: [32m'LAX → JFK'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: RoundTripFilter (1 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] One-way filtering: 1 → 1 offers

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should continue processing when individual filters encounter errors
[PerformanceLogger] RoundTripFilter: 1→1 (0ms)
[FilterPipeline] Filter RoundTripFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: -100 USD

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should continue processing when individual filters encounter errors
[PerformanceLogger] BudgetFilter: 1→1 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (1 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 1 → 1 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should continue processing when individual filters encounter errors
[PerformanceLogger] CarryOnFilter: 1→1 (2ms)
[FilterPipeline] Filter CarryOnFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (1 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should continue processing when individual filters encounter errors
[PerformanceLogger] NonstopFilter: 1→1 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/integration-simple.test.ts > Phase 2 Integration: Core Functionality > Performance and Error Handling > should continue processing when individual filters encounter errors
[PerformanceLogger] AirlineFilter: 1→1 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 1 → 1 (3ms)

 ✓ src/lib/filtering/__tests__/integration-simple.test.ts (8 tests) 402ms
stdout | src/lib/errors/__tests__/handler.test.ts > ErrorHandler > handle > should return formatted error response
[INFO] Client error: Test validation error {
  "code": "VALIDATION_ERROR",
  "message": "Test validation error",
  "retryable": false,
  "timestamp": "2025-07-14T06:51:07.921Z"
}

stdout | src/lib/errors/__tests__/handler.test.ts > ErrorHandler > handle > should include userMessage when available
[INFO] Client error: Technical error {
  "code": "VALIDATION_ERROR",
  "message": "Technical error",
  "context": {},
  "retryable": false,
  "timestamp": "2025-07-14T06:51:07.940Z"
}

 ✓ src/lib/errors/__tests__/handler.test.ts (16 tests) 287ms
stdout | tests/unit/hooks/useTripOffersPools.test.ts > useTripOffersPools > should handle budget bumping correctly
[INFO] [🔍 POOLS-DEBUG] Calling fetchFlightSearch for tripId: test-trip
[INFO] [🔍 POOLS-DEBUG] Calling fetchFlightSearch for tripId: test-trip
[INFO] [🔍 POOLS-DEBUG] fetchFlightSearch response: {
  pool1Count: [33m0[39m,
  pool2Count: [33m0[39m,
  pool3Count: [33m0[39m,
  totalOffers: [33m0[39m,
  success: [33mtrue[39m,
  message: [32m'Test success'[39m
}
[INFO] [🔍 POOLS-DEBUG] Setting pools state: { pool1Count: [33m0[39m, pool2Count: [33m0[39m, pool3Count: [33m0[39m }
[INFO] [useTripOffersPools] Pool results cached in unifiedCache for key: test-trip-1000-manual
[INFO] [🔍 POOLS-DEBUG] fetchFlightSearch response: {
  pool1Count: [33m0[39m,
  pool2Count: [33m0[39m,
  pool3Count: [33m0[39m,
  totalOffers: [33m0[39m,
  success: [33mtrue[39m,
  message: [32m'Test success'[39m
}
[INFO] [🔍 POOLS-DEBUG] Setting pools state: { pool1Count: [33m0[39m, pool2Count: [33m0[39m, pool3Count: [33m0[39m }
[INFO] [useTripOffersPools] Pool results cached in unifiedCache for key: test-trip-1200-manual

stdout | tests/unit/hooks/useTripOffersPools.test.ts > useTripOffersPools > should prevent budget bumping after 3 uses
[INFO] [useTripOffersPools] Using cached results from unifiedCache for key: test-trip-1000-manual
[INFO] [useTripOffersPools] Using cached results from unifiedCache for key: test-trip-1200-manual

 ✓ tests/unit/hooks/useTripOffersPools.test.ts (3 tests) 298ms
stdout | src/tests/hooks/useTripOffersPools.test.ts > useTripOffersPools > should handle budget bumping correctly
[INFO] [🔍 POOLS-DEBUG] Calling fetchFlightSearch for tripId: test-trip
[INFO] [🔍 POOLS-DEBUG] Calling fetchFlightSearch for tripId: test-trip
[INFO] [🔍 POOLS-DEBUG] fetchFlightSearch response: {
  pool1Count: [33m0[39m,
  pool2Count: [33m0[39m,
  pool3Count: [33m0[39m,
  totalOffers: [33m0[39m,
  success: [33mtrue[39m,
  message: [32m'Test success'[39m
}
[INFO] [🔍 POOLS-DEBUG] Setting pools state: { pool1Count: [33m0[39m, pool2Count: [33m0[39m, pool3Count: [33m0[39m }
[INFO] [useTripOffersPools] Pool results cached in unifiedCache for key: test-trip-1000-manual
[INFO] [🔍 POOLS-DEBUG] fetchFlightSearch response: {
  pool1Count: [33m0[39m,
  pool2Count: [33m0[39m,
  pool3Count: [33m0[39m,
  totalOffers: [33m0[39m,
  success: [33mtrue[39m,
  message: [32m'Test success'[39m
}
[INFO] [🔍 POOLS-DEBUG] Setting pools state: { pool1Count: [33m0[39m, pool2Count: [33m0[39m, pool3Count: [33m0[39m }
[INFO] [useTripOffersPools] Pool results cached in unifiedCache for key: test-trip-1200-manual

stdout | src/tests/hooks/useTripOffersPools.test.ts > useTripOffersPools > should prevent budget bumping after 3 uses
[INFO] [useTripOffersPools] Using cached results from unifiedCache for key: test-trip-1000-manual
[INFO] [useTripOffersPools] Using cached results from unifiedCache for key: test-trip-1200-manual

 ✓ src/tests/hooks/useTripOffersPools.test.ts (3 tests) 292ms
 ❯ src/tests/components/TripRequestForm.test.tsx (10 tests | 5 failed) 47662ms
   ✓ TripRequestForm - Filter Toggles Logic > should render "Nonstop flights only" switch checked by default  3984ms
   ✓ TripRequestForm - Filter Toggles Logic > should render "Include carry-on + personal item" switch unchecked by default  1455ms
   ✓ TripRequestForm - Filter Toggles Logic > should update switch state when "Include carry-on + personal item" switch is toggled  2057ms
   ✓ TripRequestForm - Filter Toggles Logic > should reflect Zod schema default values for switches on initial render  1207ms
   × TripRequestForm - Submission Logic > should populate destination_location_code from destination_airport if omitted 6936ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ TripRequestForm - Auto-Booking Logic > should show payment method selection when auto-booking is enabled and prerequisites are met  4946ms
   × TripRequestForm - Auto-Booking Logic > should fail submission if auto-booking is enabled, max_price is set, but no payment method is selected 6693ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Auto-Booking Logic > should fail submission if auto-booking is enabled, payment method is set, but max_price is missing 5504ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Auto-Booking Logic > should submit successfully with auto-booking ON, payment method, and max_price 6364ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × TripRequestForm - Auto-Booking Logic > should submit successfully with auto-booking OFF, not sending auto-booking fields 8500ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/lib/form-validation.test.ts (17 tests) 159ms
stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Provider Adapter Integration > should normalize Amadeus offers correctly
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Provider Adapter Integration > should normalize Duffel offers correctly
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

 ✓ supabase/functions/tests/send-notification.test.ts (11 tests) 275ms
stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[ProviderAdapter] Successfully normalized 2 offers from 2 raw offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 2 offers
[FilterPipeline] Executing filter: RoundTripFilter (2 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 2 → 2 offers
[RoundTripFilter] After routing validation: 2 → 2 offers
[RoundTripFilter] After provider-specific validation: 2 → 2 offers
[RoundTripFilter] Round-trip filtering complete: 2 → 2 offers (removed 0)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[PerformanceLogger] RoundTripFilter: 2→2 (3ms)
[FilterPipeline] Filter RoundTripFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (2 offers)
[BudgetFilter] Starting budget filtering with budget: 1000 USD
[BudgetFilter] Effective budget (with tolerance): 1050 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[BudgetFilter] Budget filtering complete: 2 → 2 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[PerformanceLogger] BudgetFilter: 2→2 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (2 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 2 → 2 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[PerformanceLogger] CarryOnFilter: 2→2 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (2 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[PerformanceLogger] NonstopFilter: 2→2 (1ms)
[FilterPipeline] Filter NonstopFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (2 offers)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should execute standard pipeline successfully for round-trip offers
[PerformanceLogger] AirlineFilter: 2→2 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 2 → 2 (removed 0)
[FilterPipeline] Execution completed: 2 → 2 (6ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should filter out offers exceeding budget
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should filter out offers exceeding budget
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers
[FilterFactory] Creating budget-focused pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: RoundTripFilter (1 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 1 → 1 offers
[RoundTripFilter] After routing validation: 1 → 1 offers
[RoundTripFilter] After provider-specific validation: 1 → 1 offers
[RoundTripFilter] Round-trip filtering complete: 1 → 1 offers (removed 0)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should filter out offers exceeding budget
[FilterPipeline] Filter RoundTripFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: 300 USD
[BudgetFilter] Effective budget (with tolerance): 350 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should filter out offers exceeding budget
[BudgetFilter] Filtered out offer AMADEUS_001: 625 USD > 350 USD
[BudgetFilter] Budget filtering complete: 1 → 0 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should filter out offers exceeding budget
[FilterPipeline] Filter BudgetFilter completed: 1 → 0 (removed 1)
[FilterPipeline] Execution completed: 1 → 0 (1ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[FilterFactory] Created filter context: {
  budget: [33m600[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mfalse[39m,
  nonstopRequired: [33mfalse[39m
}
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: RoundTripFilter (1 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: one-way
[RoundTripFilter] One-way filtering: 1 → 1 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[PerformanceLogger] RoundTripFilter: 1→1 (1ms)
[FilterPipeline] Filter RoundTripFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: 600 USD
[BudgetFilter] Effective budget (with tolerance): 650 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[BudgetFilter] Budget filtering complete: 1 → 1 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[PerformanceLogger] BudgetFilter: 1→1 (0ms)
[FilterPipeline] Filter BudgetFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (1 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 1 → 1 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[PerformanceLogger] CarryOnFilter: 1→1 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (1 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[PerformanceLogger] NonstopFilter: 1→1 (1ms)
[FilterPipeline] Filter NonstopFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should handle one-way filtering correctly
[PerformanceLogger] AirlineFilter: 1→1 (1ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 1 → 1 (3ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Complete Filtering Pipeline > should recommend correct pipeline types
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Edge Function Integration Simulation > should simulate complete edge function flow
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Edge Function Integration Simulation > should simulate complete edge function flow
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers
[FilterFactory] Creating fast filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: RoundTripFilter (1 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 1 → 1 offers
[RoundTripFilter] After routing validation: 1 → 1 offers
[RoundTripFilter] After provider-specific validation: 1 → 1 offers
[RoundTripFilter] Round-trip filtering complete: 1 → 1 offers (removed 0)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Edge Function Integration Simulation > should simulate complete edge function flow
[FilterPipeline] Filter RoundTripFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: 1000 USD
[BudgetFilter] Effective budget (with tolerance): 1050 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Edge Function Integration Simulation > should simulate complete edge function flow
[BudgetFilter] Budget filtering complete: 1 → 1 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Edge Function Integration Simulation > should simulate complete edge function flow
[FilterPipeline] Filter BudgetFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 1 → 1 (1ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should handle empty offers gracefully
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should handle empty offers gracefully
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 0 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should handle malformed offers gracefully
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should handle malformed offers gracefully
[ProviderAdapter] Successfully normalized 0 offers from 1 raw offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 0 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[ProviderAdapter] Successfully normalized 100 offers from 100 raw offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 100 offers
[FilterPipeline] Executing filter: RoundTripFilter (100 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 100 → 100 offers
[RoundTripFilter] After routing validation: 100 → 100 offers
[RoundTripFilter] After provider-specific validation: 100 → 100 offers
[RoundTripFilter] Round-trip filtering complete: 100 → 100 offers (removed 0)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[PerformanceLogger] RoundTripFilter: 100→100 (1ms)
[FilterPipeline] Filter RoundTripFilter completed: 100 → 100 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (100 offers)
[BudgetFilter] Starting budget filtering with budget: 1000 USD
[BudgetFilter] Effective budget (with tolerance): 1050 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[BudgetFilter] Budget filtering complete: 100 → 100 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[PerformanceLogger] BudgetFilter: 100→100 (1ms)
[FilterPipeline] Filter BudgetFilter completed: 100 → 100 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (100 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 100 → 100 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[PerformanceLogger] CarryOnFilter: 100→100 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 100 → 100 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (100 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[PerformanceLogger] NonstopFilter: 100→100 (1ms)
[FilterPipeline] Filter NonstopFilter completed: 100 → 100 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (100 offers)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Performance and Error Handling > should complete filtering within reasonable time
[PerformanceLogger] AirlineFilter: 100→100 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 100 → 100 (removed 0)
[FilterPipeline] Execution completed: 100 → 100 (3ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: RoundTripFilter (1 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 1 → 1 offers
[RoundTripFilter] After routing validation: 1 → 1 offers
[RoundTripFilter] After provider-specific validation: 1 → 1 offers
[RoundTripFilter] Round-trip filtering complete: 1 → 1 offers (removed 0)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[PerformanceLogger] RoundTripFilter: 1→1 (0ms)
[FilterPipeline] Filter RoundTripFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: 1000 USD
[BudgetFilter] Effective budget (with tolerance): 1050 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[BudgetFilter] Budget filtering complete: 1 → 1 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[PerformanceLogger] BudgetFilter: 1→1 (3ms)
[FilterPipeline] Filter BudgetFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (1 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 1 → 1 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[PerformanceLogger] CarryOnFilter: 1→1 (0ms)
[FilterPipeline] Filter CarryOnFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (1 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[PerformanceLogger] NonstopFilter: 1→1 (51ms)
[FilterPipeline] Filter NonstopFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should maintain filter execution order
[PerformanceLogger] AirlineFilter: 1→1 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 1 → 1 (54ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}
[FilterFactory] Created filter context: {
  budget: [33m300[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[ProviderAdapter] Successfully normalized 1 offers from 1 raw offers
[FilterFactory] Creating standard filtering pipeline
[FilterPipeline] Added filter: RoundTripFilter (priority: 5)
[FilterPipeline] Added filter: BudgetFilter (priority: 10)
[FilterPipeline] Added filter: CarryOnFilter (priority: 12)
[FilterPipeline] Added filter: NonstopFilter (priority: 15)
[FilterPipeline] Added filter: AirlineFilter (priority: 20)
[FilterFactory] Standard pipeline created with filters: RoundTripFilter(5), BudgetFilter(10), CarryOnFilter(12), NonstopFilter(15), AirlineFilter(20)
[FilterPipeline] Starting execution with 1 offers
[FilterPipeline] Executing filter: RoundTripFilter (1 offers)
[RoundTripFilter] Starting round-trip filtering
[RoundTripFilter] Search type: round-trip
[RoundTripFilter] After itinerary count filter: 1 → 1 offers
[RoundTripFilter] After routing validation: 1 → 1 offers
[RoundTripFilter] After provider-specific validation: 1 → 1 offers
[RoundTripFilter] Round-trip filtering complete: 1 → 1 offers (removed 0)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[PerformanceLogger] RoundTripFilter: 1→1 (3ms)
[FilterPipeline] Filter RoundTripFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: BudgetFilter (1 offers)
[BudgetFilter] Starting budget filtering with budget: 1000 USD
[BudgetFilter] Effective budget (with tolerance): 1050 USD

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[BudgetFilter] Budget filtering complete: 1 → 1 offers

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[PerformanceLogger] BudgetFilter: 1→1 (0ms)
[FilterPipeline] Filter BudgetFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: CarryOnFilter (1 offers)
[CarryOnFilter] Starting carry-on filtering
[CarryOnFilter] Filtering for carry-on included offers only (app requirement)
[CarryOnFilter] Carry-on filtering complete: 1 → 1 offers (removed 0 without carry-on)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[PerformanceLogger] CarryOnFilter: 1→1 (1ms)
[FilterPipeline] Filter CarryOnFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: NonstopFilter (1 offers)
[NonstopFilter] Starting nonstop filtering
[NonstopFilter] Nonstop not required, skipping filter

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[PerformanceLogger] NonstopFilter: 1→1 (0ms)
[FilterPipeline] Filter NonstopFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Executing filter: AirlineFilter (1 offers)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > End-to-End Filtering Integration > Filter State Integration > should track filter performance metrics correctly
[PerformanceLogger] AirlineFilter: 1→1 (0ms)
[FilterPipeline] Filter AirlineFilter completed: 1 → 1 (removed 0)
[FilterPipeline] Execution completed: 1 → 1 (4ms)

stdout | src/lib/filtering/__tests__/end-to-end-integration.test.ts > Integration with Service Layer > should work seamlessly with tripOffersService integration
[FilterFactory] Created filter context: {
  budget: [33m1000[39m,
  currency: [32m'USD'[39m,
  route: [32m'JFK → LAX'[39m,
  roundTrip: [33mtrue[39m,
  nonstopRequired: [33mfalse[39m
}

 ✓ src/lib/filtering/__tests__/end-to-end-integration.test.ts (13 tests) 246ms
stdout | src/services/flightApi.test.ts > flightApi > transformAmadeusToOffers maps correctly
Successfully transformed 1 offers

stdout | src/services/flightApi.test.ts > flightApi > transformAmadeusToOffers handles empty data
No offers data to transform
No offers data to transform

stdout | src/services/flightApi.test.ts > flightApi > transformAmadeusToOffers handles malformed data gracefully
Successfully transformed 0 offers

 ✓ src/services/flightApi.test.ts (11 tests) 200ms
 ✓ src/tests/components/TripRequestForm.minimal.test.tsx (1 test) 363ms
   ✓ TripRequestForm - Minimal Test > should render without crashing  347ms
stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should return null if seatMap.flightSegments is an empty array (no seats to process)
[selectSeat] Found 0 available seats before filtering.
[selectSeat] 0 seats after budget filtering (remaining budget: 100).
[selectSeat] No seats available after all filters.

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should return null if remainingBudget <= 0
[selectSeat] Remaining budget (0) is not positive enough for paid seats (or is zero). totalBudget: 100, baseFare: 100
[selectSeat] Remaining budget (-10) is not positive enough for paid seats (or is zero). totalBudget: 90, baseFare: 100

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should pick the cheapest AISLE seat if available within budget
[selectSeat] Found 3 available seats before filtering.
[selectSeat] 2 seats after budget filtering (remaining budget: 25).
[selectSeat] Seats by type - Aisle: 1, Window: 1, Middle: 0
[selectSeat] Attempting to pick from AISLE seats. Chosen: 2C, Price: 20
[selectSeat] Final chosen seat: 2C, Type: AISLE, Price: 20

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should pick the cheapest WINDOW seat if no AISLE available within budget
[selectSeat] Found 3 available seats before filtering.
[selectSeat] 1 seats after budget filtering (remaining budget: 25).
[selectSeat] Seats by type - Aisle: 0, Window: 1, Middle: 0
[selectSeat] Attempting to pick from WINDOW seats. Chosen: 2B, Price: 20
[selectSeat] Final chosen seat: 2B, Type: WINDOW, Price: 20

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should pick the cheapest MIDDLE seat if allowMiddle is true and only MIDDLE available in budget
[selectSeat] Found 4 available seats before filtering.
[selectSeat] 1 seats after budget filtering (remaining budget: 25).
[selectSeat] Seats by type - Aisle: 0, Window: 0, Middle: 1
[selectSeat] Attempting to pick from MIDDLE seats. Chosen: 3C, Price: 20
[selectSeat] Final chosen seat: 3C, Type: MIDDLE, Price: 20

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should return null if allowMiddle is false and only MIDDLE seats are available under budget
[selectSeat] Found 3 available seats before filtering.
[selectSeat] 1 seats after budget filtering (remaining budget: 25).
[selectSeat] 0 seats after middle seat filtering (was 1, allowMiddle: false).
[selectSeat] No seats available after all filters.

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should return null if no seats are available within budget
[selectSeat] Found 2 available seats before filtering.
[selectSeat] 0 seats after budget filtering (remaining budget: 25).
[selectSeat] No seats available after all filters.

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should handle seats with price 0 correctly when remaining budget allows
[selectSeat] Found 1 available seats before filtering.
[selectSeat] 1 seats after budget filtering (remaining budget: 10).
[selectSeat] Seats by type - Aisle: 1, Window: 0, Middle: 0
[selectSeat] Attempting to pick from AISLE seats. Chosen: 1A, Price: 0
[selectSeat] Final chosen seat: 1A, Type: AISLE, Price: 0
[selectSeat] Remaining budget (0) is not positive enough for paid seats (or is zero). totalBudget: 100, baseFare: 100

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should prioritize AISLE > WINDOW > MIDDLE when all are same priced and under budget
[selectSeat] Found 3 available seats before filtering.
[selectSeat] 3 seats after budget filtering (remaining budget: 20).
[selectSeat] Seats by type - Aisle: 1, Window: 1, Middle: 1
[selectSeat] Attempting to pick from AISLE seats. Chosen: 2C, Price: 15
[selectSeat] Final chosen seat: 2C, Type: AISLE, Price: 15

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should ignore unavailable seats
[selectSeat] Found 1 available seats before filtering.
[selectSeat] 1 seats after budget filtering (remaining budget: 20).
[selectSeat] Seats by type - Aisle: 0, Window: 1, Middle: 0
[selectSeat] Attempting to pick from WINDOW seats. Chosen: 1B, Price: 15
[selectSeat] Final chosen seat: 1B, Type: WINDOW, Price: 15

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should return null if all available seats are of disallowed types
[selectSeat] Found 2 available seats before filtering.
[selectSeat] 2 seats after budget filtering (remaining budget: 20).
[selectSeat] 0 seats after middle seat filtering (was 2, allowMiddle: false).
[selectSeat] No seats available after all filters.

stdout | supabase/functions/lib/seatSelector.test.ts > selectSeat > should correctly parse string prices from seat.pricing.total
[selectSeat] Found 1 available seats before filtering.
[selectSeat] 1 seats after budget filtering (remaining budget: 25).
[selectSeat] Seats by type - Aisle: 1, Window: 0, Middle: 0
[selectSeat] Attempting to pick from AISLE seats. Chosen: 1A, Price: 20.55
[selectSeat] Final chosen seat: 1A, Type: AISLE, Price: 20.55

 ✓ supabase/functions/lib/seatSelector.test.ts (13 tests) 122ms
 ✓ src/tests/unit/services/profileCompletenessService.enhanced.test.ts (18 tests) 144ms
 ✓ src/lib/filtering/__tests__/AirlineFilter.test.ts (20 tests) 174ms
stdout | supabase/functions/flight-offers-v2/index.test.ts > Flight Offers v2 Edge Function > should return 200 with empty array for valid tripRequestId
Flight offers v2 function started...

 ✓ supabase/functions/flight-offers-v2/index.test.ts (4 tests) 225ms
 ✓ src/tests/unit/database/profileCompleteness.trigger.test.ts (16 tests) 194ms
 ✓ src/lib/business-rules/__tests__/ConfigLoader.test.ts (3 tests) 156ms
 ✓ src/tests/payment-architecture.test.ts (14 tests) 77ms
 ✓ tests/unit/payment-architecture.test.ts (14 tests) 72ms
 ✓ tests/unit/services/profileCompletenessService.test.ts (17 tests) 103ms
 ✓ src/tests/services/profileCompletenessService.test.ts (17 tests) 112ms
 ✓ src/tests/feature-flags/userInBucket.test.ts (5 tests) 77ms
stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected Supabase client
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: trip-123. Fetching from flight_offers_v2 table...

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected Supabase client
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] Refresh requested for tripRequestId: trip-123. Invoking flight-search-v2...

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] Response from 'flight-search-v2' for tripRequestId trip-123: { success: [33mtrue[39m, inserted: [33m5[39m }
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: trip-123. Fetching from flight_offers_v2 table...

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] No V2 data found, falling back to legacy flight_offers table...

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] Transformed 0 legacy offers to V2 format

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Cache behavior in test environment > should respect useCache flag
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: trip-123. Fetching from flight_offers_v2 table...

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Cache behavior in test environment > should respect useCache flag
[ServerAction/getFlightOffers] No V2 data found, falling back to legacy flight_offers table...

stdout | tests/unit/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Cache behavior in test environment > should respect useCache flag
[ServerAction/getFlightOffers] Transformed 0 legacy offers to V2 format

 ✓ tests/unit/serverActions/getFlightOffers.refactored.test.ts (5 tests) 165ms
 ✓ supabase/functions/tests/payment-methods-kms.test.ts (5 tests) 15ms
stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected Supabase client
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: trip-123. Fetching from flight_offers_v2 table...

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected Supabase client
[ServerAction/getFlightOffers] Found 1 offers in flight_offers_v2 table

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] Refresh requested for tripRequestId: trip-123. Invoking flight-search-v2...

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] Response from 'flight-search-v2' for tripRequestId trip-123: { success: [33mtrue[39m, inserted: [33m5[39m }
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: trip-123. Fetching from flight_offers_v2 table...

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] No V2 data found, falling back to legacy flight_offers table...

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Dependency injection > should use injected edge function when refresh is true
[ServerAction/getFlightOffers] Transformed 0 legacy offers to V2 format

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Cache behavior in test environment > should respect useCache flag
[ServerAction/getFlightOffers] Cache miss or stale for tripRequestId: trip-123. Fetching from flight_offers_v2 table...

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Cache behavior in test environment > should respect useCache flag
[ServerAction/getFlightOffers] No V2 data found, falling back to legacy flight_offers table...

stdout | src/tests/serverActions/getFlightOffers.refactored.test.ts > getFlightOffers (Refactored) > Cache behavior in test environment > should respect useCache flag
[ServerAction/getFlightOffers] Transformed 0 legacy offers to V2 format

 ✓ src/tests/serverActions/getFlightOffers.refactored.test.ts (5 tests) 269ms
 ✓ supabase/functions/tests/carry-on-fee.vitest.test.ts (19 tests) 95ms
 ✓ supabase/functions/tests/carry-on-fee.test.ts (19 tests) 161ms
stdout | supabase/functions/tests/carry-on-fee-standalone.test.ts > computeCarryOnFee > should handle Rollback mechanism test - feature disabled
[carry-on] Feature disabled via ALLOW_UNKNOWN_CARRYON flag, returning 0

 ✓ supabase/functions/tests/carry-on-fee-standalone.test.ts (17 tests) 93ms
 ✓ tests/unit/hooks/useTripOffersLegacy.helpers.test.ts (13 tests) 104ms
 ✓ src/tests/utils/getPoolDisplayName.test.ts (2 tests) 16ms
 ✓ supabase/functions/flight-search-v2/index.test.ts (6 tests) 206ms
 ✓ src/tests/hooks/useTripOffersLegacy.helpers.test.ts (13 tests) 79ms
 ✓ tests/unit/services/carry-on-fee.client.test.ts (3 tests) 38ms
 ✓ src/tests/services/carry-on-fee.client.test.ts (3 tests) 8ms
 ✓ tests/unit/utils/getPoolDisplayName.test.ts (2 tests) 7ms
 ↓ supabase/functions/tests/auto-book.test.ts (5 tests | 5 skipped)
 ↓ supabase/functions/tests/payment-architecture-e2e.test.ts (3 tests | 3 skipped)
 ↓ supabase/functions/tests/payment-flow.test.ts (6 tests | 6 skipped)

 Test Files  4 failed | 77 passed | 3 skipped (84)
      Tests  11 failed | 715 passed | 17 skipped (743)
   Start at  01:49:47
   Duration  104.04s (transform 9.42s, setup 152.12s, collect 275.40s, tests 210.89s, environment 323.94s, prepare 56.31s)

